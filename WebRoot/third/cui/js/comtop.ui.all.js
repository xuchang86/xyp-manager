/*!
 * jQuery JavaScript Library v1.11.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-04-28T16:19Z
 * 为了解决怪异模式拿不到视口高度，做了HACK，详搜：TODO
 */

(function( global, factory ) {
	 //这里需要做重复引用检查
	if(window.__hasCUILoad){
		return;
	}
	
	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper window is present,
		// execute the factory and get jQuery
		// For environments that do not inherently posses a window with a document
		// (such as Node.js), expose a jQuery-making factory as module.exports
		// This accentuates the need for the creation of a real window
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//

var deletedIds = [];

var slice = deletedIds.slice;

var concat = deletedIds.concat;

var push = deletedIds.push;

var indexOf = deletedIds.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "1.11.3",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1, IE<9
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: deletedIds.sort,
	splice: deletedIds.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call(obj, "constructor") &&
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( support.ownLast ) {
			for ( key in obj ) {
				return hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1, IE<9
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( indexOf ) {
				return indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		while ( j < len ) {
			first[ i++ ] = second[ j++ ];
		}

		// Support: IE<9
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
		if ( len !== len ) {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: function() {
		return +( new Date() );
	},

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];
	nodeType = context.nodeType;

	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	if ( !seed && documentIsHTML ) {

		// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
		if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType !== 1 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;
	parent = doc.defaultView;

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Support tests
	---------------------------------------------------------------------- */
	documentIsHTML = !isXML( doc );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\f]' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.unique( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );

					} else if ( !(--remaining) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * Clean-up method for dom ready events
 */
function detach() {
	if ( document.addEventListener ) {
		document.removeEventListener( "DOMContentLoaded", completed, false );
		window.removeEventListener( "load", completed, false );

	} else {
		document.detachEvent( "onreadystatechange", completed );
		window.detachEvent( "onload", completed );
	}
}

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	// readyState === "complete" is good enough for us to call the dom ready in oldIE
	if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
		detach();
		jQuery.ready();
	}
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};


var strundefined = typeof undefined;



// Support: IE<9
// Iteration over object's inherited properties before its own
var i;
for ( i in jQuery( support ) ) {
	break;
}
support.ownLast = i !== "0";

// Note: most support tests are defined in their respective modules.
// false until the test is run
support.inlineBlockNeedsLayout = false;

// Execute ASAP in case we need to set body.style.zoom
jQuery(function() {
	// Minified: var a,b,c,d
	var val, div, body, container;

	body = document.getElementsByTagName( "body" )[ 0 ];
	if ( !body || !body.style ) {
		// Return for frameset docs that don't have a body
		return;
	}

	// Setup
	div = document.createElement( "div" );
	container = document.createElement( "div" );
	container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
	body.appendChild( container ).appendChild( div );

	if ( typeof div.style.zoom !== strundefined ) {
		// Support: IE<8
		// Check if natively block-level elements act like inline-block
		// elements when setting their display to 'inline' and giving
		// them layout
		div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

		support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
		if ( val ) {
			// Prevent IE 6 from affecting layout for positioned elements #11048
			// Prevent IE from shrinking the body in IE 7 mode #12869
			// Support: IE<8
			body.style.zoom = 1;
		}
	}

	body.removeChild( container );
});




(function() {
	var div = document.createElement( "div" );

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( elem ) {
	var noData = jQuery.noData[ (elem.nodeName + " ").toLowerCase() ],
		nodeType = +elem.nodeType || 1;

	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
	return nodeType !== 1 && nodeType !== 9 ?
		false :

		// Nodes accept data unless otherwise specified; rejection can be conditional
		!noData || noData !== true && elem.getAttribute("classid") === noData;
};


var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}

function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// The following elements (space-suffixed to avoid Object.prototype collisions)
	// throw uncatchable exceptions if you attempt to set expando properties
	noData: {
		"applet ": true,
		"embed ": true,
		// ...but Flash objects (which have this classid) *can* handle expandos
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[0],
			attrs = elem && elem.attributes;

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each(function() {
				jQuery.data( this, key, value );
			}) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};



// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		length = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < length; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			length ? fn( elems[0], key ) : emptyGet;
};
var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	// Minified: var a,b,c
	var input = document.createElement( "input" ),
		div = document.createElement( "div" ),
		fragment = document.createDocumentFragment();

	// Setup
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName( "tbody" ).length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone =
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	input.type = "checkbox";
	input.checked = true;
	fragment.appendChild( input );
	support.appendChecked = input.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE6-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// #11217 - WebKit loses check when the name is after the checked attribute
	fragment.appendChild( div );
	div.innerHTML = "<input type='radio' checked='checked' name='t'/>";

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	support.noCloneEvent = true;
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}
})();


(function() {
	var i, eventName,
		div = document.createElement( "div" );

	// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)
	for ( i in { submit: true, change: true, focusin: true }) {
		eventName = "on" + i;

		if ( !(support[ i + "Bubbles" ] = eventName in window) ) {
			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
			div.setAttribute( eventName, "t" );
			support[ i + "Bubbles" ] = div.attributes[ eventName ].expando === false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: IE < 9, Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					jQuery._removeData( doc, fix );
				} else {
					jQuery._data( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!support.noCloneEvent || !support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = (rtagName.exec( elem ) || [ "", "" ])[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						deletedIds.push( id );
					}
				}
			}
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ (rtagName.exec( value ) || [ "", "" ])[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[i], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optmization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}


(function() {
	var shrinkWrapBlocksVal;

	support.shrinkWrapBlocks = function() {
		if ( shrinkWrapBlocksVal != null ) {
			return shrinkWrapBlocksVal;
		}

		// Will be changed later if needed.
		shrinkWrapBlocksVal = false;

		// Minified: var b,c,d
		var div, body, container;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		// Support: IE6
		// Check if elements with layout shrink-wrap their children
		if ( typeof div.style.zoom !== strundefined ) {
			// Reset CSS: box-sizing; display; margin; border
			div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;" +
				"padding:1px;width:1px;zoom:1";
			div.appendChild( document.createElement( "div" ) ).style.width = "5px";
			shrinkWrapBlocksVal = div.offsetWidth !== 3;
		}

		body.removeChild( container );

		return shrinkWrapBlocksVal;
	};

})();
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );



var getStyles, curCSS,
	rposition = /^(top|right|bottom|left)$/;

if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		if ( elem.ownerDocument.defaultView.opener ) {
			return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
		}

		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "";
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, computed ) {
		var left, rs, rsLeft, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed[ name ] : undefined;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "" || "auto";
	};
}




function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			var condition = conditionFn();

			if ( condition == null ) {
				// The test was not ready at this point; screw the hook this time
				// but check again when needed next time.
				return;
			}

			if ( condition ) {
				// Hook not needed (or it's not possible to use it due to missing dependency),
				// remove it.
				// Since there are no other hooks for marginRight, remove the whole object.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.

			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	// Minified: var b,c,d,e,f,g, h,i
	var div, style, a, pixelPositionVal, boxSizingReliableVal,
		reliableHiddenOffsetsVal, reliableMarginRightVal;

	// Setup
	div = document.createElement( "div" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName( "a" )[ 0 ];
	style = a && a.style;

	// Finish early in limited (non-browser) environments
	if ( !style ) {
		return;
	}

	style.cssText = "float:left;opacity:.5";

	// Support: IE<9
	// Make sure that element opacity exists (as opposed to filter)
	support.opacity = style.opacity === "0.5";

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!style.cssFloat;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Support: Firefox<29, Android 2.3
	// Vendor-prefix box-sizing
	support.boxSizing = style.boxSizing === "" || style.MozBoxSizing === "" ||
		style.WebkitBoxSizing === "";

	jQuery.extend(support, {
		reliableHiddenOffsets: function() {
			if ( reliableHiddenOffsetsVal == null ) {
				computeStyleTests();
			}
			return reliableHiddenOffsetsVal;
		},

		boxSizingReliable: function() {
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},

		pixelPosition: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelPositionVal;
		},

		// Support: Android 2.3
		reliableMarginRight: function() {
			if ( reliableMarginRightVal == null ) {
				computeStyleTests();
			}
			return reliableMarginRightVal;
		}
	});

	function computeStyleTests() {
		// Minified: var b,c,d,j
		var div, body, container, contents;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";

		// Support: IE<9
		// Assume reasonable values in the absence of getComputedStyle
		pixelPositionVal = boxSizingReliableVal = false;
		reliableMarginRightVal = true;

		// Check for getComputedStyle so that this code is not run in IE<9.
		if ( window.getComputedStyle ) {
			pixelPositionVal = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			boxSizingReliableVal =
				( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Support: Android 2.3
			// Div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			contents = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			contents.style.cssText = div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
			contents.style.marginRight = contents.style.width = "0";
			div.style.width = "1px";

			reliableMarginRightVal =
				!parseFloat( ( window.getComputedStyle( contents, null ) || {} ).marginRight );

			div.removeChild( contents );
		}

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		contents = div.getElementsByTagName( "td" );
		contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
		reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
		if ( reliableHiddenOffsetsVal ) {
			contents[ 0 ].style.display = "";
			contents[ 1 ].style.display = "none";
			reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
		}

		body.removeChild( container );
	}

})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
		ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,

	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];


// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display && display !== "none" || !hidden ) {
				jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Support: IE
				// Swallow errors from 'invalid' CSS values (#5509)
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// Work around by temporarily setting element display to inline-block
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";
			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !support.shrinkWrapBlocks() ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {
	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	// Minified: var a,b,c,d,e
	var input, div, select, a, opt;

	// Setup
	div = document.createElement( "div" );
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName("a")[ 0 ];

	// First batch of tests.
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px";

	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute("style") );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute("href") === "/a";

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement("form").enctype;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE8 only
	// Check if we can trust getAttribute("value")
	input = document.createElement( "input" );
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";
})();


var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {

						// Support: IE6
						// When new option element is added to select box we need to
						// force reflow of newly added node in order to workaround delay
						// of initialization properties
						try {
							option.selected = optionSet = true;

						} catch ( _ ) {

							// Will be executed only in IE6
							option.scrollHeight;
						}

					} else {
						option.selected = false;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}

				return options;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = support.getSetAttribute,
	getSetInput = support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;
					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// Retrieve booleans specially
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {

	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
		function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		} :
		function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
			}
		};
});

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			if ( name === "value" || value === elem.getAttribute( name ) ) {
				return value;
			}
		}
	};

	// Some attributes are constructed with empty-string values when not defined
	attrHandle.id = attrHandle.name = attrHandle.coords =
		function( elem, name, isXML ) {
			var ret;
			if ( !isXML ) {
				return (ret = elem.getAttributeNode( name )) && ret.value !== "" ?
					ret.value :
					null;
			}
		};

	// Fixing value retrieval on a button requires this module
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			if ( ret && ret.specified ) {
				return ret.value;
			}
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	});
}

if ( !support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}




var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						-1;
			}
		}
	}
});

// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !support.hrefNormalized ) {
	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

// Support: Safari, IE9+
// mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});

// IE6/7 call enctype encoding
if ( !support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

jQuery.parseJSON = function( data ) {
	// Attempt to parse using the native JSON parser first
	if ( window.JSON && window.JSON.parse ) {
		// Support: Android 2.3
		// Workaround failure to string-cast null input
		return window.JSON.parse( data + "" );
	}

	var requireNonComma,
		depth = null,
		str = jQuery.trim( data + "" );

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

		// Force termination if we see a misplaced comma
		if ( requireNonComma && comma ) {
			depth = 0;
		}

		// Perform no more replacements after returning to outermost depth
		if ( depth === 0 ) {
			return token;
		}

		// Commas must not follow "[", "{", or ","
		requireNonComma = open || comma;

		// Determine new depth
		// array/object open ("[" or "{"): depth += true - false (increment)
		// array/object close ("]" or "}"): depth += false - true (decrement)
		// other cases ("," or primitive): depth += true - true (numeric cast)
		depth += !close - !open;

		// Remove this token
		return "";
	}) ) ?
		( Function( "return " + str ) )() :
		jQuery.error( "Invalid JSON: " + data );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	try {
		if ( window.DOMParser ) { // Standard
			tmp = new DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} else { // IE
			xml = new ActiveXObject( "Microsoft.XMLDOM" );
			xml.async = "false";
			xml.loadXML( data );
		}
	} catch( e ) {
		xml = undefined;
	}
	if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType.charAt( 0 ) === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
		(!support.reliableHiddenOffsets() &&
			((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
};

jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?
	// Support: IE6+
	function() {

		// XHR cannot access local files, always use ActiveX for that case
		return !this.isLocal &&

			// Support: IE7-8
			// oldIE XHR does not support non-RFC2616 methods (#13240)
			// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
			// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
			// Although this check for six methods instead of eight
			// since IE also does not support "trace" and "connect"
			/^(get|post|head|put|delete|options)$/i.test( this.type ) &&

			createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

var xhrId = 0,
	xhrCallbacks = {},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE<10
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	});
}

// Determine support properties
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( options ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !options.crossDomain || support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					// Open the socket
					xhr.open( options.type, options.url, options.async, options.username, options.password );

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						// Support: IE<9
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
						// request header to a null-value.
						//
						// To keep consistent with other XHR implementations, cast the value
						// to string and ignore `undefined`.
						if ( headers[ i ] !== undefined ) {
							xhr.setRequestHeader( i, headers[ i ] + "" );
						}
					}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( options.hasContent && options.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, statusText, responses;

						// Was never called and is aborted or complete
						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
							// Clean up
							delete xhrCallbacks[ id ];
							callback = undefined;
							xhr.onreadystatechange = jQuery.noop;

							// Abort manually if needed
							if ( isAbort ) {
								if ( xhr.readyState !== 4 ) {
									xhr.abort();
								}
							} else {
								responses = {};
								status = xhr.status;

								// Support: IE<10
								// Accessing binary-data responseText throws an exception
								// (#11426)
								if ( typeof xhr.responseText === "string" ) {
									responses.text = xhr.responseText;
								}

								// Firefox throws an exception when accessing
								// statusText for faulty cross-domain requests
								try {
									statusText = xhr.statusText;
								} catch( e ) {
									// We normalize with Webkit giving an empty statusText
									statusText = "";
								}

								// Filter status for non standard behaviors

								// If the request is local and we have data: assume a success
								// (success with no data won't get notified, that's the best we
								// can do given current implementations)
								if ( !status && options.isLocal && !options.crossDomain ) {
									status = responses.text ? 200 : 404;
								// IE - #1450: sometimes returns 1223 when it should be 204
								} else if ( status === 1223 ) {
									status = 204;
								}
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );
						}
					};

					if ( !options.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						// Add to the list of active xhr callbacks
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off, url.length ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};





var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			jQuery.inArray("auto", [ curCSSTop, curCSSLeft ] ) > -1;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			box = { top: 0, left: 0 },
			elem = this[ 0 ],
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					//TODO:怪异模式
					var compat = window.document.compatMode;
					if(compat == 'BackCompat'){
						return elem.document.body["client" + name];
					}
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}

window.comtop = window.comtop || {};
window.comtop.cQuery = jQuery.noConflict(true);

return jQuery;

}));

/*! jQuery Migrate v1.2.1 | (c) 2005, 2013 jQuery Foundation, Inc. and other contributors | jquery.org/license */
(function( jQuery, window, undefined ) {
if(window.__hasCUILoad){
	return;
}
jQuery.migrateMute===void 0&&(jQuery.migrateMute=!0),function(e,t,n){function r(n){var r=t.console;i[n]||(i[n]=!0,e.migrateWarnings.push(n),r&&r.warn&&!e.migrateMute&&(r.warn("JQMIGRATE: "+n),e.migrateTrace&&r.trace&&r.trace()))}function a(t,a,i,o){if(Object.defineProperty)try{return Object.defineProperty(t,a,{configurable:!0,enumerable:!0,get:function(){return r(o),i},set:function(e){r(o),i=e}}),n}catch(s){}e._definePropertyBroken=!0,t[a]=i}var i={};e.migrateWarnings=[],!e.migrateMute&&t.console&&t.console.log&&t.console.log("JQMIGRATE: Logging is active"),e.migrateTrace===n&&(e.migrateTrace=!0),e.migrateReset=function(){i={},e.migrateWarnings.length=0},"BackCompat"===document.compatMode&&r("jQuery is not compatible with Quirks Mode");var o=e("<input/>",{size:1}).attr("size")&&e.attrFn,s=e.attr,u=e.attrHooks.value&&e.attrHooks.value.get||function(){return null},c=e.attrHooks.value&&e.attrHooks.value.set||function(){return n},l=/^(?:input|button)$/i,d=/^[238]$/,p=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,f=/^(?:checked|selected)$/i;a(e,"attrFn",o||{},"jQuery.attrFn is deprecated"),e.attr=function(t,a,i,u){var c=a.toLowerCase(),g=t&&t.nodeType;return u&&(4>s.length&&r("jQuery.fn.attr( props, pass ) is deprecated"),t&&!d.test(g)&&(o?a in o:e.isFunction(e.fn[a])))?e(t)[a](i):("type"===a&&i!==n&&l.test(t.nodeName)&&t.parentNode&&r("Can't change the 'type' of an input or button in IE 6/7/8"),!e.attrHooks[c]&&p.test(c)&&(e.attrHooks[c]={get:function(t,r){var a,i=e.prop(t,r);return i===!0||"boolean"!=typeof i&&(a=t.getAttributeNode(r))&&a.nodeValue!==!1?r.toLowerCase():n},set:function(t,n,r){var a;return n===!1?e.removeAttr(t,r):(a=e.propFix[r]||r,a in t&&(t[a]=!0),t.setAttribute(r,r.toLowerCase())),r}},f.test(c)&&r("jQuery.fn.attr('"+c+"') may use property instead of attribute")),s.call(e,t,a,i))},e.attrHooks.value={get:function(e,t){var n=(e.nodeName||"").toLowerCase();return"button"===n?u.apply(this,arguments):("input"!==n&&"option"!==n&&r("jQuery.fn.attr('value') no longer gets properties"),t in e?e.value:null)},set:function(e,t){var a=(e.nodeName||"").toLowerCase();return"button"===a?c.apply(this,arguments):("input"!==a&&"option"!==a&&r("jQuery.fn.attr('value', val) no longer sets properties"),e.value=t,n)}};var g,h,v=e.fn.init,m=e.parseJSON,y=/^([^<]*)(<[\w\W]+>)([^>]*)$/;e.fn.init=function(t,n,a){var i;return t&&"string"==typeof t&&!e.isPlainObject(n)&&(i=y.exec(e.trim(t)))&&i[0]&&("<"!==t.charAt(0)&&r("$(html) HTML strings must start with '<' character"),i[3]&&r("$(html) HTML text after last tag is ignored"),"#"===i[0].charAt(0)&&(r("HTML string cannot start with a '#' character"),e.error("JQMIGRATE: Invalid selector string (XSS)")),n&&n.context&&(n=n.context),e.parseHTML)?v.call(this,e.parseHTML(i[2],n,!0),n,a):v.apply(this,arguments)},e.fn.init.prototype=e.fn,e.parseJSON=function(e){return e||null===e?m.apply(this,arguments):(r("jQuery.parseJSON requires a valid JSON string"),null)},e.uaMatch=function(e){e=e.toLowerCase();var t=/(chrome)[ \/]([\w.]+)/.exec(e)||/(webkit)[ \/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||0>e.indexOf("compatible")&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[];return{browser:t[1]||"",version:t[2]||"0"}},e.browser||(g=e.uaMatch(navigator.userAgent),h={},g.browser&&(h[g.browser]=!0,h.version=g.version),h.chrome?h.webkit=!0:h.webkit&&(h.safari=!0),e.browser=h),a(e,"browser",e.browser,"jQuery.browser is deprecated"),e.sub=function(){function t(e,n){return new t.fn.init(e,n)}e.extend(!0,t,this),t.superclass=this,t.fn=t.prototype=this(),t.fn.constructor=t,t.sub=this.sub,t.fn.init=function(r,a){return a&&a instanceof e&&!(a instanceof t)&&(a=t(a)),e.fn.init.call(this,r,a,n)},t.fn.init.prototype=t.fn;var n=t(document);return r("jQuery.sub() is deprecated"),t},e.ajaxSetup({converters:{"text json":e.parseJSON}});var b=e.fn.data;e.fn.data=function(t){var a,i,o=this[0];return!o||"events"!==t||1!==arguments.length||(a=e.data(o,t),i=e._data(o,t),a!==n&&a!==i||i===n)?b.apply(this,arguments):(r("Use of jQuery.fn.data('events') is deprecated"),i)};var j=/\/(java|ecma)script/i,w=e.fn.andSelf||e.fn.addBack;e.fn.andSelf=function(){return r("jQuery.fn.andSelf() replaced by jQuery.fn.addBack()"),w.apply(this,arguments)},e.clean||(e.clean=function(t,a,i,o){a=a||document,a=!a.nodeType&&a[0]||a,a=a.ownerDocument||a,r("jQuery.clean() is deprecated");var s,u,c,l,d=[];if(e.merge(d,e.buildFragment(t,a).childNodes),i)for(c=function(e){return!e.type||j.test(e.type)?o?o.push(e.parentNode?e.parentNode.removeChild(e):e):i.appendChild(e):n},s=0;null!=(u=d[s]);s++)e.nodeName(u,"script")&&c(u)||(i.appendChild(u),u.getElementsByTagName!==n&&(l=e.grep(e.merge([],u.getElementsByTagName("script")),c),d.splice.apply(d,[s+1,0].concat(l)),s+=l.length));return d});var Q=e.event.add,x=e.event.remove,k=e.event.trigger,N=e.fn.toggle,T=e.fn.live,M=e.fn.die,S="ajaxStart|ajaxStop|ajaxSend|ajaxComplete|ajaxError|ajaxSuccess",C=RegExp("\\b(?:"+S+")\\b"),H=/(?:^|\s)hover(\.\S+|)\b/,A=function(t){return"string"!=typeof t||e.event.special.hover?t:(H.test(t)&&r("'hover' pseudo-event is deprecated, use 'mouseenter mouseleave'"),t&&t.replace(H,"mouseenter$1 mouseleave$1"))};e.event.props&&"attrChange"!==e.event.props[0]&&e.event.props.unshift("attrChange","attrName","relatedNode","srcElement"),e.event.dispatch&&a(e.event,"handle",e.event.dispatch,"jQuery.event.handle is undocumented and deprecated"),e.event.add=function(e,t,n,a,i){e!==document&&C.test(t)&&r("AJAX events should be attached to document: "+t),Q.call(this,e,A(t||""),n,a,i)},e.event.remove=function(e,t,n,r,a){x.call(this,e,A(t)||"",n,r,a)},e.fn.error=function(){var e=Array.prototype.slice.call(arguments,0);return r("jQuery.fn.error() is deprecated"),e.splice(0,0,"error"),arguments.length?this.bind.apply(this,e):(this.triggerHandler.apply(this,e),this)},e.fn.toggle=function(t,n){if(!e.isFunction(t)||!e.isFunction(n))return N.apply(this,arguments);r("jQuery.fn.toggle(handler, handler...) is deprecated");var a=arguments,i=t.guid||e.guid++,o=0,s=function(n){var r=(e._data(this,"lastToggle"+t.guid)||0)%o;return e._data(this,"lastToggle"+t.guid,r+1),n.preventDefault(),a[r].apply(this,arguments)||!1};for(s.guid=i;a.length>o;)a[o++].guid=i;return this.click(s)},e.fn.live=function(t,n,a){return r("jQuery.fn.live() is deprecated"),T?T.apply(this,arguments):(e(this.context).on(t,this.selector,n,a),this)},e.fn.die=function(t,n){return r("jQuery.fn.die() is deprecated"),M?M.apply(this,arguments):(e(this.context).off(t,this.selector||"**",n),this)},e.event.trigger=function(e,t,n,a){return n||C.test(e)||r("Global events are undocumented and deprecated"),k.call(this,e,t,n||document,a)},e.each(S.split("|"),function(t,n){e.event.special[n]={setup:function(){var t=this;return t!==document&&(e.event.add(document,n+"."+e.guid,function(){e.event.trigger(n,null,t,!0)}),e._data(this,n,e.guid++)),!1},teardown:function(){return this!==document&&e.event.remove(document,n+"."+e._data(this,n)),!1}}})}(jQuery,window);
})( window.comtop ? window.comtop.cQuery : window.jQuery, window );
//================================JCT=====================================
/**
 * JavaScript Common Templates(jCT) 3(第3版)
 * http://code.google.com/p/jsct/
 *
 * licensed under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
 *
 * Author achun (achun.shx at gmail.com)
 * Create Date: 2008-6-23
 * Last Date: 2009-12-23
 * Revision:3.9.12.23
 */
;(function(C){
    //对外暴露的接口
    C.JCT = jCT;
    function jCT(txt,path){//构建jCT对象,仅仅准备基础数据
        if(jCT.clearWhiteSpace)
            txt=txt.replace(/[\f\n\r\t\v]+/g,'');
        this.Fn = new jCT.Instance(txt,path);
        for (var i in this) this.Fn.Reserve+=i+',';
    }
    jCT.prototype={
        Extend:function(jct,args){//扩展自己
            for (var i in jct){
                if(this[i] && this[i].Fn && this[i].Fn.JavaScriptCommonTemplates && this[i].Extend )
                    this[i].Extend(jct[i]);
                else if(this.Fn.Reserve.indexOf(','+i+',')==-1)//防止保留成员被覆盖
                    this[i]=jct[i];
            }
            if(typeof jct.ERun=='function')
                jct.ERun.apply(this,args||[]);
            return this;
        },
        ExtendTo:function(jct,args){//附加到其他对象上
            for (var i in this){
                if(this.Fn.Reserve.indexOf(','+i+',')>0 && jct[i]) continue;
                if(jct[i]==null)
                    jct[i]=this[i];
                else if(this[i].Fn && this[i].Fn.JavaScriptCommonTemplates && this[i].ExtendTo)
                    this[i].ExtendTo(jct[i]);
            }
            if(typeof jct.ERun=='function') jct.ERun.apply(jct,args||[]);
            return this;
        },
        ExecChilds:function(childs,exec){//执行childs对象所列成员里的某个方法，默认是Exec方法
            if(typeof childs=='string'){
                exec=childs;
                childs=0;
            }
            exec=exec||'Exec';
            if(!childs){
                childs={};
                for (var c in this)
                    if(this[c].Fn && this[c].Fn.JavaScriptCommonTemplates)
                        childs[c]=[];
            }
            for(var c in childs)
                if(this[c] && (typeof this[c][exec]=='function')){
                    this[c][exec].apply(this[c],childs[c]);
                }
            return this;
        },
        BuildChilds:function(childs){//构建子jCT对象,并执行RunNow
            var cs={},withargs=false;
            if(undefined==childs) childs=[];
            else if (typeof childs=='string') childs=childs.split(',');
            else {
                cs=childs;//childs is object and with arguments array.
                withargs=true;
            }
            if(childs instanceof Array)
                for(var i=0;i<childs.length;i++) cs[childs[i]]=true;
            for (var i in this)
                if(this[i].Fn && this[i].Fn.JavaScriptCommonTemplates && (childs.length==0 || cs[i]))
                    this[i].Build(withargs?childs[i]:[]);
            return this;
        },
        GetView:function(){this.Fn.V=[];this.GetViewContinue.apply(this,arguments);return this.Fn.V.join('');},//得到装配数据后的视图
        GetViewContinue:function(){this.Build.apply(this,[arguments]);},//得到装配数据后的视图
        Build:function(args){//构建实例
            this.Fn.Build(this,args,arguments.callee.caller===this.GetViewContinue);
            return this;
        },
        PushView:function(txt){
            this.Fn.V.push(txt);
        }
    };
    jCT.Instance=function(txt,path){
        this.Init(txt,path);
    };
    jCT.clearWhiteSpace=true;
    jCT.Instance.prototype={
        JavaScriptCommonTemplates:3.0,
        Reserve:',',//保留成员
        args:[],//GetView的参数
        Tags:{//几种不同的模板定义风格
            comment:{//注释标签风格
                block:{begin:'<!---',end:'-->'},//语法块标记
                exp:{begin:'+-',end:'-+'},//取值表达式
                member:{begin:'/*+',end:'*/'},//定义成员语法标记
                memberend:{begin:'/*-',end:'*/'},//定义成员结束语法标记
                clean:{begin:'<!--clean',end:'/clean-->'}//清理标记
            },
            script:{//脚本标签风格
                block:{begin:'<script type="text/jct">',end:'</script>'},
                exp:{begin:'+-',end:'-+'},
                member:{begin:'/*+',end:'*/'},
                memberend:{begin:'/*-',end:'*/'},
                clean:{begin:'<!--clean',end:'/clean-->'}
            },
            code:{//code标签风格
                block:{begin:'<code class="jct">',end:'</code>'},
                exp:{begin:'+-',end:'-+'},
                member:{begin:'/*+',end:'*/'},
                memberend:{begin:'/*-',end:'*/'},
                clean:{begin:'<!--clean',end:'/clean-->'}
            }
        },
        Init:function(txt,path){
            this.Src=txt || '';
            this.Path=path || '';
            for (var tag in this.Tags){//自动判断模板风格
                if (this.Src.indexOf(this.Tags[tag].block.begin)>=0) break;
            }
            this.Tag=this.Tags[tag];
            this.A=[];//由src转换的模板数组
            this.V=[];//执行的文本结果,以数组形式存放
            this.EXEC=[];//
            var a=[];
            var p=[0,0,0,0,0];
            var max=this.Src.length;
            while (this.Slice(this.Tag.clean,p[4],p,max))
                a.push(this.Src.slice(p[0],p[1]));
            if(a.length){
                a.push(this.Src.slice(p[4]));
                this.Src = a.join('');
            }
        },
        Build:function(self,args,getview){
            this.EXEC=[];
            this.Parse(self);
            try{
                var code=this.EXEC.join('\n');
                self.GetViewContinue=new Function(this.args,code);
                this.Src='';
            }catch (ex){
                this.V=['jCT Parse Error'];
                self.ERROR={message:ex.message + '\n'+ (ex.lineNumber || ex.number),code:code};
            }
            if(self.BRun)
                self.BRun.apply(self,args||[]);
            if(getview){
                this.V=[];
                self.GetViewContinue.apply(self,args||[]);
            }
        },
        Parse:function(self){
            var tag = this.Tag,A = this.A,E=this.EXEC,max= this.Src.length,p=[0,0,0,0,0],p1=[0,0,0,0,0];
            while (this.Slice(tag.block,p[4],p,max)){//语法分2段
                p1=[0,0,0,0,p[0]];
                while (this.Slice(tag.exp,p1[4],p1,p[1])){//处理取值表达式
                    E.push('this.Fn.V.push(this.Fn.A['+A.length+']);');
                    A.push(this.Src.slice(p1[0],p1[1]));
                    E.push('this.Fn.V.push('+this.Src.slice(p1[2],p1[3])+');');
                }
                if(p1[4]!=p[1]){
                    E.push('this.Fn.V.push(this.Fn.A['+A.length+']);');
                    A.push(this.Src.slice(p1[4],p[1]));
                }
                if(this.Src.slice(p[2],p[2]+2)=='//'){//处理扩展语法
                    var str=this.Src.slice(p[2]+2,p[2]+3);
                    if (str=='/'){//子模板
                        str=this.Src.slice(p[2]+3,p[3]);
                        var argspos=str.indexOf(' ');
                        var args=[];
                        if(argspos>0){
                            args=str.slice(argspos+1).split(',');
                            str=str.slice(0,argspos);
                        }
                        var child=tag.block.begin+'///'+str+tag.block.end;
                        var tmp = this.Src.indexOf(child,p[4]);
                        if (tmp>0){
                            var njct=new jCT(this.Src.slice(p[4],tmp),this.Path);
                            njct.Fn.args=args;
                            if(!self[str]) self[str]={};
                            for (var j in njct)
                                self[str][j]=njct[j];
                            p[4] = tmp + child.length;
                        }
                    }else if (str=='.'){//成员对象
                        str=this.Src.slice(p[2]+3,p[3]);
                        var argspos=str.indexOf(' ')+1;
                        if(str.slice(argspos,argspos+8)=='function'){
                            var obj=str.slice(0,argspos-1);
                            self[obj]=new Function('return '+str.slice(argspos,str.length))();
                        }else{
                            var obj=new Function('return '+str.slice(argspos));
                            self[str.slice(0,argspos)]=obj.call(self);
                        }
                    }else if (str==' '){//GetView参数定义
                        this.args=this.Src.slice(p[2]+2,p[3]).slice(1).split(',');
                    }
                }else//javascript语句
                    E.push(this.Src.slice(p[2],p[3]));
            }
            p1=[0,0,0,0,p[4]];p[1]=max;
            while (this.Slice(tag.exp,p1[4],p1,p[1])){//处理取值表达式
                E.push('this.Fn.V.push(this.Fn.A['+A.length+']);');
                A.push(this.Src.slice(p1[0],p1[1]));
                E.push('this.Fn.V.push('+this.Src.slice(p1[2],p1[3])+');');
            }
            if(p1[4]!=p[1]){
                E.push('this.Fn.V.push(this.Fn.A['+A.length+']);');
                A.push(this.Src.slice(p1[4],p[1]));
            }
        },
        Slice:function(tn,b1,p,max){//把string第2段分成2段
            var begin=tn.begin;
            var end=tn.end;
            var e1,b2,e2;
            e1=this.Src.indexOf(begin,b1);
            if (e1<0 || e1>=max) return false;
            b2=e1+begin.length;
            if (b2<0 || b2>=max) return false;
            e2=this.Src.indexOf(end,b2);
            if (e2<0 || e2>=max) return false;
            p[0]=b1;p[1]=e1;
            p[2]=b2;p[3]=e2;
            p[4]=e2+end.length;
            return true;
        }
    };
})(window.comtop);
//主命名空间
window.comtop = window.comtop || {};
//=============================命名空间与随机ID==========================
;(function(C){
    /**
     * 控制台//TODO 不支持原生console的浏览器需要另行实现
     * @type {*|Object}
     */
    window.console = window.console || {
        log: function(){},
        info: function(){},
        warn: function(){},
        error: function(){}
    };

    /**
     * 对外接口
     */
    C.namespace = _namespace;
    C.guid = _guid;

    /**
     * 创建命名空间
     * @param {String} name  如'comtop.ui.button'
     * @return {Object}
     */
    function _namespace(name){
        var i,
            ni,
            nis = name.split('.'),
            ns = window;

        for(i = 0; i < nis.length; i=i+1){
            ni = nis[i];
            ns[ni] = ns[ni] || {};
            ns = ns[ni];
        }

        return ns;
    }

    /**
     * 生成随机ID
     * @return {String}
     */
    function _guid(){
        //return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(n){
        // 采用短ID
        return 'xxxx-4xxx-yxxx'.replace(/[xy]/g, function(n){
            var r = Math.random()*16| 0,
                v = n == 'x' ? r : (r&0x3|0x8);
            return v.toString(16);
        }).toUpperCase();
    }
})(window.comtop = window.comtop || {});

//创建UI命名空间
comtop.namespace('comtop.UI');
comtop.namespace('comtop.Dom');
comtop.namespace('comtop.String');
comtop.namespace('comtop.Date');
comtop.namespace('comtop.Number');
comtop.namespace('comtop.Browser');
comtop.namespace('comtop.Tools');

//CUI文件夹路径获取
;(function($, C){
    var $OScript = $('script[src*="cui/js/comtop.ui"]'), path;

    //获取官方相对路径
    path = $OScript.eq(0).attr('src');
    path = path.substr( 0, path.lastIndexOf('/') );
    path = path.substr( 0, path.lastIndexOf('/') + 1 );
    C.cuiFilePath = path;
})(window.comtop.cQuery, window.comtop);

/**
 * 浏览器判断
 * by wangwei3 2013-3-22
 */
;(function($, C){
    var $head = $('head');
    $head.attr("style", "font-family:isIE\\0; border:none; *font-family:isIE7; " +
    "_font-family:isIE6;-moz-border-radius-topleft:0");
    C.Browser = {
        isIE : false,
        isIE6 : false,
        isIE7 : false,
        isIE8 : false,
        isIE9 : false,
        notIE : true,
        isQM : document.compatMode !== 'CSS1Compat'
    };
    var font_family = $head.css("font-family");
    if( /^isIE\d?$/.test(font_family) ) {
        C.Browser[font_family] = true;
        C.Browser.notIE = false;
        if (font_family === "isIE6" || font_family === "isIE7") {
            C.Browser.isIE = true;
        } else if( $head.css("border") === undefined) {
            C.Browser["isIE8"] = true;
        } else {
            C.Browser["isIE9"] = true;
        }
    }
    $head.removeAttr("style");
})(window.comtop.cQuery, window.comtop);

//解决IE6背景闪烁问题
if(comtop.Browser.isIE6){
    document.execCommand( 'BackgroundImageCache', false, true );
}

//解决IE8 fontawesome-webfont不能加载问题。
;(function($, C){
    if(comtop.Browser.isIE8){
        var head = $("head");
        if($("#cuiFontCss").length < 1 && head.length > 0){
            var css = [
                '@font-face {',
                '     font-family: "FontAwesome";',
                '     src: url("', C.cuiFilePath,'themes/default/images/core/fonts/fontawesome-webfont.eot?#iefix&v=4.0.3") format("embedded-opentype")',
                ' } ',
                ' .cui-icon {',
                '     font-family: FontAwesome !important;',
                '     speak: none;',
                '     font-style: normal;',
                '     font-weight: normal;',
                '     font-variant: normal;',
                '     font-size: 14px;',
                ' }'
            ];
            head.append('<style type="text/css" id="cuiFontCss">' + css.join('') + '</style>');
        }
    }
})(window.comtop.cQuery, window.comtop);


/**
 * 标准/怪异模式下window和body的真实宽高
 * 兼容IE6-IE9,FF,Chrome
 * by 王伟 2013-4-17
 */
;(function (C) {
    var $ = C.cQuery;
    $.page = { //页面大小
        height : function() {
            if(C.Browser.isIE6 || C.Browser.isIE7 || C.Browser.isIE8) {
                var b = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);
                var c = Math.max(document.documentElement.offsetHeight, document.body.offsetHeight);
                if(b < c) {
                    return $(window).height();
                } else {
                    if (C.Browser.isQM) {
                        return b - 4;
                    }
                    return b;
                }
            } else {
                if (C.Browser.isQM) {
                    return $(document).height() - 4;
                }
                return $(document).height();
            }
        },
        width: function() {
            var div = $("<div></div>");
            div.css({"height": 1});
            var offset = parseInt($("body").css("paddingLeft")) + parseInt($("body").css("paddingRight")) + parseInt($("body").css("marginLeft")) + parseInt($("body").css("marginRight"));
            $("body").append(div);
            var width = div.width();
            div.remove();
            return width + offset;
            // if(C.Browser.isIE) {
            //     var b = Math.max(document.documentElement.scrollWidth, document.body.scrollWidth);
            //     var c = Math.max(document.documentElement.offsetWidth, document.body.offsetWidth);
            //     if(b < c) {
            //         return $(window).width();
            //     } else {
            //         if (C.Browser.isQM && $("body").css("overflow") !== "hidden") {
            //             return b - 21
            //         }
            //         return b;
            //     }
            // }else {
            //     return $(document).width();
            // }
        },
        scrollTop: function() { //页面滚动
            return $("html").scrollTop() || $("body").scrollTop();
        },
        scrollLeft: function() {
            return $("html").scrollLeft() || $("body").scrollLeft();
        }
    };
    $.client = { //窗口大小
        width: function() {
            if (C.Browser.isQM) {
                return document.documentElement.clientWidth || document.documentElement.offsetWidth - 21;
            }
            return $(window).width();

        },
        height: function() {
            if (C.Browser.isQM) {
                return window.innerHeight || document.documentElement.offsetHeight - 4;
            }
            return $(window).height();
        }
    };
})(window.comtop);

//=============================继承类与入口=============================
/*
 * jquery 创始人写的一个javascript类继承系统
 *
 * Simple JavaScript Inheritance
 * By John Resig http://ejohn.org/
 * MIT Licensed.
 *
 */
// Inspired by base2 and Prototype
;(function($, C) {
    //这里需要做重复引用检查
    if(window.__hasCUILoad){
        return;
    }

    /**
     * 提供cui创建入口
     * @type {Object}
     */
    window.cui = function(el){
        var $el    = $(el);
        var cuiObj = $el.data('uitype') || $el;
        if(cuiObj.options){
            var uitype = cuiObj.options.uitype;
            uitype = uitype.charAt(0).toLowerCase() + uitype.substring(1);
            if(!cuiObj[uitype]){
                cuiObj[uitype] = function(){
                    return this;
                };
            }
        }
        return cuiObj;
    };

    function registerCmp (clazz, superClass) {
        // 继承父类options
        clazz.options = $.extend(true, {}, superClass.options, clazz.options);

        if(superClass.options && superClass.options.uitype){
            var superUIType = superClass.options.uitype;
            // _superUITypes 继承链
            clazz._superUITypes = $.extend(true, [], superClass._superUITypes);
            clazz._superUITypes.push(superUIType);
        }

        var uitype = clazz.options ? clazz.options.uitype : null;
        if (!uitype) {
            return;
        }

        var uncapliseUIType = uitype.charAt(0).toLowerCase() + uitype.substring(1);
        // 绑定到jQuery组件
        if ($.fn[uncapliseUIType] == null) {
            $.fn[uncapliseUIType] = function (options){
                var $el = $(this).eq(0);

                //如果selector为空，则设默认selector
                $el.selector = $el.selector.replace('.slice(0,1)', '');
                if(!$el.selector){
                    var eventID = 'e' + '-' + C.guid(),
                        nodeName = this.nodeName || '';
                    $el.attr('eventID', eventID);
                    $el.selector = nodeName + '[eventID=' + eventID + ']:eq(0)';
                }

                var cuiObj = $el.data('uitype');

                //检查是否已经创建有相同的实例
                if (cuiObj == null) {
                    options = options || {};
                    options.el = $el;
                    cuiObj = new C.UI[uitype](options);  //8mm/100
                    cuiObj.isCUI = true;
                    C.UI.componentList.push(cuiObj);
                    if($el.size()) {
                        $el.data('uitype', cuiObj);
                    }
                }
                return cuiObj;
            };
        }
        clazz[uncapliseUIType] = function() {
            return this;
        };
    }

    var initializing = false, fnTest = /xyz/.test(function() {
        xyz;
    }) ? /\b_super\b/ : /.*/;
    // The base Class implementation (does nothing)
    C.Class = function() {
    };

    // Create a new Class that inherits from this class
    C.Class.extend = function(prop) {
        var _super = this.prototype;

        registerCmp(prop, _super);

        // Instantiate a base class (but only create the instance,
        // don't run the init constructor)
        initializing = true;
        var prototype = new this();
        initializing = false;

        // Copy the properties over onto the new prototype
        for ( var name in prop) {
            // Check if we're overwriting an existing function
            prototype[name] = typeof prop[name] == "function"
            && typeof _super[name] == "function"
            && fnTest.test(prop[name]) ? (function(name, fn) {
                return function() {
                    var tmp = this._super;

                    // Add a new ._super() method that is the same method
                    // but on the super-class
                    this._super = _super[name];

                    // The method only need to be bound temporarily, so we
                    // remove it when we're done executing
                    var ret = fn.apply(this, arguments);
                    this._super = tmp;

                    return ret;
                };
            })(name, prop[name]) : prop[name];
        }

        // The dummy class constructor
        function Class() {
            // All construction is actually done in the _initialize method
            if (!initializing && this.__init)
            //var param = Array.prototype.slice.call(arguments, 0);
                this.__init.apply(this, arguments);
        }

        // Populate our constructed prototype object
        Class.prototype = prototype;

        // Enforce the constructor to be what we expect
        Class.prototype.constructor = Class;

        // And make this class extendable
        Class.extend = arguments.callee;

        return Class;
    };
    C._registerCmp=registerCmp;
})(window.comtop.cQuery , window.comtop);

//=============================CUI 基类================================
;(function($, C){
    //这里需要做重复引用检查
    if(window.__hasCUILoad){
        return;
    }

    var globalTpls = globalTpls || {};

    C.UI.templatePath = null;   //存放模板路径

    C.UI.componentList = [];    //存放创建的UI实例

    /**
     * 组件初始化配置
     * @param conf {Object} 配置参数对象 如  {Calender: {icon: false}}
     */
    C.UI.setOpt = function (conf) {
        var p, ui = this, opt;
        if (typeof conf === "object") {
            for (p in conf) {
                switch (p){
                    case 'Dialog':
                        cui.dialog.setOpt(conf[p]);
                        break;
                    case 'MsgBox':
                        cui.msgbox.setOpt(conf[p]);
                        break;
                    case 'Message':
                        cui.msgbox.setOpt(conf[p], 'message');
                        break;
                    default :
                        if(conf.hasOwnProperty(p) && typeof ui[p] === "function") {
                            opt =  ui[p].prototype.options;
                            if (typeof opt === "object") {
                                $.extend(opt, conf[p]);
                            }
                        }
                }
            }
        }
    };

    /**
     * UI组件继承基类
     * 所有UI组件必须继承此基类
     * version: 1.0.7
     * @type {*}
     */
    C.UI.Base = C.Class.extend({
        options:{},     // UI的配置信息
        tpls:{},        // Map<模板名,模板>:模板被解析后存到此变量
        autoTpls:{},    // Map<模板名,TrueFalse>:模板是否在类创建时显示到el所指向的节点
        isInit: false,  // 是否已初始化，默认为false,已经初始化的，自动删除此属性
        cui_prompt: '不建议使用或修改（二次开发除外）没有对外公布的内部方法与变量，以避免因组件升级而引起功能异常',

        /**
         * 初始化模板
         * @param {Object} options 配置参数
         * @private
         */
        __init:function(options){
            var self = this,
                opts = {
                    target:{
                        eventName: 'change',
                        source: 'getValue',
                        target: 'setValue'
                    }
                },
                isScanner = options.isScanner,
                cusOptions = {},
                param = '',
                paramType = '';
            //手动添加tpls
            self.options.tpls = self.options.tpls || {};
            //还原参数真实类型
            for(var p in self.options){
                //如果是标签创建，则返回标签获取属性值
                if(isScanner){
                    switch (p){
                        case 'readonly':
                        //case 'width':
                        //case 'height':
                            param = _scanHTML(options.el[0], p);
                            break;
                        default:
                            param = options.el.attr(p);
                    }
                }else{
                    param = options[p];
                    cusOptions[p] = param;
                    continue;
                }

                if(typeof param !== 'string'){
                    continue;
                }

                cusOptions[p] = param;

                //如果参数值为字符串null，则直接返回null
                if(param == 'null'){
                    options[p] = null;
                    continue;
                }

                paramType = self.options[p] == null ? 'function' :  typeof self.options[p];
                //根据默认的参数类型对传进来的options进行类型转换
                options[p] = self._convertTo(param, paramType, self.options[p]);
            }

            //如果组件不具备textmode模式，则把传过来的textmode删除掉（如果有textmode传进来的时候）
            if(self.options.textmode == undefined){
                delete options.textmode;
            }

            //合并配置参数
            opts = self.options = $.extend(true, {}, opts, self.options, options);
			if(options.uitype!=="Tip"){ //排除Tip因为这里会给Listbox添加一个提示，而在这里option.el是Tip初始化两次
				var elId =  opts.el.attr("id");
				if(typeof uiConfig!=="undefined"){
					if(elId&&uiConfig[elId]){
						cusOptions = options = opts = self.options =$.extend(true, {},self.options,uiConfig[elId]);
					}
				}
			}
            //自定义初始化方法,给子类一个修改模型的机会
            self._init(cusOptions, options);

            //如果是文本模式，则中断模板操作
            if(opts.textmode){
                self.setTextMode();
                return;
            }
            
            if(opts.onlyDesign && !opts.designMode){
                return;
            }

            //加载模板
            self.__loadTemplate(opts.template);

            //合并配置参数 -- 模板参数的合并
            //模板的合并，对于不同的入参类型有不同的处理:
            //若为string: 表示另一个模板变量. (注：这里的从opts传入的string不表示具体的模板)
            for (var tpl in opts.tpls) {
                self.tpls['super.' + tpl] = self.tpls[tpl];
                if(typeof opts.tpls[tpl] === 'string'){
                    self.tpls[tpl] = self.tpls[opts.tpls[tpl]] || opts.tpls[tpl];
                }else{
                    self.tpls[tpl] = opts.tpls[tpl];
                }
            }

            //创建DOM元素并加载到el所指向的位置
            for (tpl in self.tpls) {
                if (self.autoTpls[tpl] == true){
                    var $target = $(opts.el);
                    var tagName = $target.get(0).tagName;
                    if (/[DIV|SPAN|A]/.test(tagName) && $.trim($target.html()) === '') {
                        self._buildTemplate($target, tpl, opts);
                    }else{
                        self._bindTplEvent();
                    }
                }
            }

            //自定义操作，在base完成数据和界面初始化后执行

            self._create();

            //2013-3-28新加
            if($target) {
                var cuiCreated = $target.data("cuiCreated");
                if(cuiCreated) {
                    $.each(cuiCreated, function() {
                        if(self[ this.method ]) {
                            self[ this.method ].apply(self, this.arg);
                        }
                    });
                    $target.removeData("cuiCreated");
                }
            }
        },

        /**
         * 加载数据
         * @param {String} url 加载URL
         * @param {Function} callback 回调
         * @param {Boolean} async 是否异步
         * @private
         */
        __load:function(url, callback, async){
            //默认取消异步
            typeof async === 'undefined' && (async = false);
            typeof callback !== 'function' && (callback = function(){});

            $.ajax({
                url: url + (C.version?('?v=' + C.version):""),
                async: async,
                dataType: 'text',
                success: callback,
                error: function(){
                    //alert('\'加载模板出错，请检查下网络或模板文件是否存在\'');
                }
            });
        },

        /**
         * 加载模板
         * @param {String} tmplName 模板文件名
         * @private
         */
        __loadTemplate:function(tmplName){
            tmplName = tmplName || 'template.html';
            var self = this,
                uitype = self.options.uitype,
                url = '', urlData,
                gTpls = globalTpls[uitype],
                $body = $('body'),
                tmplMark = $body.attr('cuitmplmark') || '',
                reg = new RegExp(tmplName);

            //兼容大小写
            uitype = uitype.charAt(0).toUpperCase() + uitype.substring(1);

            // 缓存中未找到相关模板
            if (!gTpls) {
                if(!reg.test(tmplMark)){
                    //扫描全路径
                    if(!C.UI.templatePath){
                        C.UI.scanTemplateUrl(tmplName);
                    }
                    //获取正确的模板路径前段
                    urlData = getTemplateUrl(tmplName);
                    url = urlData.path + 'template/' + tmplName;
                    //添加已加载标记
                    $body.attr('cuitmplmark', tmplMark + '[' + urlData.mark + '#' + tmplName + ']');
                    //加载模板
                    self.__load(url, function(doc){
                        //doc = doc.replace(/[\n\r]/g, '');
                        doc = doc.match(/<cmptpl[^>]*>(\s|\r|\t|.)*?<\/cmptpl>/g);

                        for(var i = 0, len = doc.length; i < len; i ++){
                            var uitype = doc[i].match(/uiType="([\w-]*)"/)[1],
                                varName = doc[i].match(/var="([\w-]*)"/)[1],
                                parseAtOnce = doc[i].match(/parse="([\w-]*)"/)[1] != 'false',
                                template = doc[i].replace(/<cmptpl[^>]*>/, '').replace(/<\/cmptpl>/, '');
                            //console.log(template);
                            var tplDef = globalTpls[uitype] || {tpls:{}, autoTpls: {}};
                            tplDef.tpls[varName] = template;
                            parseAtOnce && (tplDef.autoTpls[varName] = true);
                            globalTpls[uitype] = tplDef;
                        }
                    });
                }
                gTpls = globalTpls[uitype] || {tpls:{}, autoTpls: {}};
            }

            // 复制
            self.tpls = $.extend(true, {},gTpls.tpls);
            self.autoTpls = $.extend(true, {},gTpls.autoTpls);

            // 继续添加所有的父类模板
            if (self._superUITypes) {
                for (var i = self._superUITypes.length - 1; i >= 0; i--) {
                    uitype = self._superUITypes[i];
                    var superTpl = globalTpls[uitype];
                    if (superTpl) {
                        var superTpls = globalTpls[uitype].tpls;
                        for (var superTplName in superTpls) {
                            if (!self.tpls[superTplName]) {
                                self.tpls[superTplName] = superTpls[superTplName];
                            }
                        }
                        var superAutoTpls = globalTpls[uitype].autoTpls;
                        for (superTplName in superAutoTpls) {
                            if (!self.autoTpls[superTplName]) {
                                self.autoTpls[superTplName] = superAutoTpls[superTplName];
                            }
                        }
                    }
                }
            }
            $body = null;
        },

        /**
         * 加载并显示模板
         * @param {jQuery | HTMLElement} target 模板的显示位置
         * @param {String} tpl 模板变量名
         * @param {Object} options 模板数据
         * @param {Boolean} isAppend 是否以追加方式插入DOM
         * @return {JQuery}
         * @protected
         */
        _buildTemplate:function(target, tpl, options, isAppend){
            var self = this,
                $tg = $(target);
            options = options || self.options;
            // 若为object: 表示使用另一个实例的创建后的结果作为模板，同时要对两者作事件的交互(change/setValue)
            if (typeof self.tpls[tpl] == 'object') {
                self.tpls[tpl].el = $tg;
                self.__createTargetCmp(self.tpls[tpl]);
            } else {
                var view = $.trim(self._buildTemplateStr(tpl, options)) || '';

                var ref = view.match(/\#ref\=[\w\.]*\#/g) || [];
                var refName = '';
                for(var i = 0; i < ref.length; i ++){
                    refName = $.trim(ref[i].replace(/#/g,'').replace('ref=',''));
                    view = view.replace(ref[i], self._buildTemplateStr(refName, options) || '');
                }

                // 执行模板节点上的事件绑定
                view = self._bindTplEvent(view);

                // 显示模板
                isAppend ?
                    $tg.append(view):
                    $tg.html(view);

                return view;
            }
        },

        /**
         * 合成模板，并返回字符串模板
         * @param {String} tpl JCT模板名称
         * @param {Object} options 模板数据
         * @return {String} 返回模板字符串
         * @protected
         */
        _buildTemplateStr: function(tpl, options){
            var self = this;
            //生成JCT对象
            var instance = new C.JCT(self.tpls[tpl]);
            instance.Build();
            return instance.GetView(options);
        },

        /**
         * 创建targetCmp实例
         * @param {Object} cmpOpts 创建targetCmp实例的options
         * @private
         */
        __createTargetCmp: function(cmpOpts){
            //this.__bindTargetCmpEvent(new C.UI[cmpOpts.uiType](cmpOpts));
            new C.UI[cmpOpts.uitype](cmpOpts);
        },

        /**
         * 绑定模板事件
         * @param {String} view 模板字符串
         * @return {String} 返回已经插入事件的模板字符串
         * @protected
         */
        _bindTplEvent: function(view){
            var self = this,
                opts = self.options;

            if(opts.designMode){ return view;}
            //字符串方式绑定
            if(typeof view === 'string'){
                var selector = opts.el.selector,
                    bindList = view.match(/events=\"[\w-\s\;\=\,\.]*\"/g) || [],
                    eventString = [],
                    eventList = null,
                    singleEvent = null,
                    reg = null;

                for(var i = 0; i < bindList.length; i ++){
                    eventString = [];
                    eventList = bindList[i].replace(/\"/g, '').replace(/events\=/, '').split(';');

                    for(var k = 0, len = eventList.length; k < len; k ++){
                        singleEvent = eventList[k].split('=');
                        if(!$.trim(singleEvent[0])){
                            continue;
                        }
                        //如果a标签带有javascript:;则需要添加return，避免触发onbeforeunload事件
                        eventString.push(
                            'on', singleEvent[0], '="',
                            (C.Browser.isIE ? 'return ' : ''),
                            'comtop.proxyHandler(event, \'', selector ,'\', this, \'', singleEvent[1] ,'\');" '
                        );
                    }
                    var reg = new RegExp(bindList[i], 'g');
                    eventString.push(bindList[i].replace('events', 'etsBak'));
                    view = view.replace(reg, eventString.join(''));
                }
                return view;
            }
            //bind方式绑定
            view = view || $(opts.el);

            $('[etsBak]', view).each(function() {

                var $this = $(this),
                    eventList = $this.attr('etsBak').split(';'),
                    singleEvent;

                for (var i = 0; i < eventList.length; i++) {
                    singleEvent = eventList[i].split('=');
                    $this.bind(singleEvent[0] + '.comtopBase', {self:self, func:singleEvent[1]}, comtop.proxyHandler);
                }
                $this = null;
            });
            return view;
        },

        /**
         * 反绑定模板事件
         * @param {..|jQuery|HTMLElement} $el 反绑定指定模板事件，默认为options.el下的所有元素
         * @protected
         */
        _unbindTplEvent: function($el){
            var self = this,
                opts = self.options;
            $el = $el || opts.el;
            $('[etsBak]', $el).each(function(){
                var $this = $(this),
                    eventsList = $this.attr('etsBak').split(';');
                for(var i = 0; i < eventsList.length; i ++){
                    $this.removeAttr('on' + eventsList[i].split('=')[0]);
                }
                $this.unbind('.comtopBase');
            });
        },

        /**
         * 封装jQuery triggerHandler方法
         * @param {String} type 事件名
         * @param {Array} data 返回参数
         * @protected
         */
        _triggerHandler: function(type, data){
            $(this).triggerHandler(type, data);
        },

        /**
         * 自定义初始化
         * @param options {Object} 配置参数
         * @protected
         */
        _init: function(options){},

        /**
         * 自定义操作，在base完成数据和界面初始化后执行
         * @protected
         */
        _create: function(){},

        /**
         * 往组件实例绑定事件
         * @param {String} types 事件类型
         * @param {... | String | Number | Array | Object} data 传入回调函数参数
         * @param {Function} fn 回调函数
         * @public
         */
        bind: function(types, data, fn){
            $(this).bind(types, data, fn);
            return this;
        },

        /**
         * 解除组件实例上绑定的事件
         * @param {String} types 事件类型
         * @param {Function} fn 回调函数
         * @public
         */
        unbind: function(types, fn){
            $(this).unbind(types, fn);
            return this;
        },

        /**
         * 抽象函数
         * @public
         */
        setValue: function(){},
        getValue: function(){},

        /**
         * 显示组件
         * @public
         */
        show: function(){
            this.options.el.show();
            return this;
        },

        /**
         * 隐藏组件
         * @public
         */
        hide: function(){
            this.options.el.hide();
            return this;
        },

        /**
         * 只读模式
         * @public
         */
        setReadonly: function(){},

        /**
         * 文本模式
         */
        setTextMode: function(){
            //判断占位符的标签类型，非span和div的占位符会执行替换成缺省占位符
            var self = this,
                opts = self.options,
                nodeName = opts.el[0].nodeName,
                labelValue = self.getLabelValue();

            if(typeof labelValue ==="string"){
                //labelValue = C.String.htmlEncode(labelValue, opts.XSSDefense);
                labelValue = labelValue.replace(/\r?\n/gi,"<br />");
            }

            if(nodeName == 'SPAN' || nodeName == 'DIV'){
                opts.el.html(labelValue);
            }else if(nodeName == 'INPUT' || nodeName == 'BUTTON' || nodeName == 'TEXTAREA'){
                opts.el = opts.el.replaceWith('<span>' + labelValue + '</span>');
            }
        },

        /**
         * 获取labelValue，用于只读模式。此方法为缺省方法，大部份情况需要在组件下重写
         * @return {*|String}
         */
        getLabelValue: function(){
            return this.options.value;
        },

        /**
         * 可用设置
         * @param {Boolean} flag 可用设置，true为可用，false为不可用，默认为false
         * @public
         */
        disable: function(flag){
            flag = typeof flag === 'undefined' ? false : flag;
            $('input, select, textarea, button', this.options.el).attr('disabled', flag);
            return this;
        },

        /**
         * 移除组件
         * @public
         */
        destroy: function(){
            var self = this,
                opts = self.options;
            //移除事件
            self._unbindTplEvent(opts.el);
            //移除联动组件监听事件
            /*if(opts.targetCmp){
             self.__unbindTargetCmpEvent(opts.targetCmp);
             }*/
            //移除data对象
            opts.el.removeData();
            //移除模板生成的DOM结构
            if(self.tpls){
                opts.el.empty();
            }
        },

        /**
         * 类型转换
         * @param {String} str  字符串
         * @param {String} type 转型类型，提供的值有 "boolean" "number" "string" "json" "function"
         * @param {Boolean | Number | String | Function | Object} defaultValue 默认值
         * @return {Boolean | Number | String | Function | Object}
         * @private
         */
        _convertTo: function(str, type, defaultValue) {
            if($.trim(str) === ''){
                //如果参为空字符串，返回默认值
                return type === 'string' ? '' : defaultValue;
            }
            var attrJSON = {},
                jsonReg = /^(?:\{.*\}|\[.*\])$/; //判断是否为JSON格式
            //值不再删除空格、换行和tab
            //str = str.replace(/[\n\r\t]/g,'');
            //参数类型分类
            switch (type) {
                case 'string':
                    str = '' + str;
                    break;
                case 'boolean':
                    str = !!(str === 'true');
                    break;
                case 'number':
                    str = + str;
                    break;
                case 'object':
                    str = jsonReg.test( str ) ?
                        //这里去掉了空格，可能在某些时间点不需要
                        $.parseJSON(str.replace(/\\'/g, '#@@#').replace(/'/g, '"').replace(/#@@#/g, '\'')) :
                        getObject(str);
                    break;
                case 'function':
                    str = getObject(str);
                    break;
                default:
                    str = defaultValue;
                //str = null;
            }

            function getObject(str){
                var objStr = str.split('.'),
                    objParent = window;
                for(var k = 0; k < objStr.length; k ++){
                    objParent = objParent[objStr[k]];
                }
                return (typeof objParent === 'object' || typeof objParent === 'function') && !objParent.nodeName ?
                    //objParent : null;
                    objParent : defaultValue;
            }


            return str;
        }
    });

    /**
     * 事件代理处理
     * @param {Object} e 事件
     * @param {String} selector 选择表达式
     * @param {HTMLElement} eventEl 绑定事件的DOM元素
     * @param {String} func 事件处理方法，多方法以逗号隔开
     * @public
     */
    C.proxyHandler = function(e, selector, eventEl, func){
        var self = null,
            funcParent = null,
            funcList = null,
            obj = null,
            i = 0,
            k = 0;

        if(selector){
            //封装event
            if(!e){
                e = $.Event();
            }
            e = $.event.fix(e);
            //理换处理方式，在IE6下性能已经提升
            for (i = 0; i < C.UI.componentList.length; i++) {
                obj = C.UI.componentList[i];
                if(obj.options.el.selector === selector){
                    self = obj;
                    break;
                }
            }
            if(self == null){
                return false;
            }
        }else{
            self = e.data.self;
            func = e.data.func;
            eventEl = this;
            e.data = null;
        }
        func = func.split(',');
        for(i = 0; i < func.length; i ++){
            if($.isFunction(self[func[i]])){
                self[func[i]](e, eventEl, e.target || e.srcElement);
            }else{
                funcParent = window;
                funcList = func[i].split('.');
                for(k = 0 ;k < funcList.length ; k ++){
                    funcParent = funcParent[funcList[k]];
                }
                funcParent(e, eventEl, e.target || e.srcElement);
            }
        }
        //如果target是A标签，事件为click，且浏览器为IE，则需要处理href="javascript:;"带来的触发onbeforeunload问题
        if(e.type === 'click' && e.target.nodeName.toLocaleLowerCase() === 'a' && C.Browser.isIE){
            return false;
        }
    };

    /**
     * 扫描comtopjs路径
     * @param tmplName {String} 模板名称
     */
    C.UI.scanTemplateUrl = function(tmplName){
        var $TScript,
            i = 0,
            len = 0,
            path, tmpPath, attrTmpl,
            nameReg = new RegExp(tmplName),
            scriptOP = [],  //官方path
            scriptTP = [];  //第三方path

        $TScript = $('script[cuiTemplate]');

        //获取官方相对路径
        scriptOP.push({path: C.cuiFilePath, attrTmpl: ''});

        //获取第三方相对路径
        for(len = $TScript.length; i < len; i ++){
            path = $TScript.eq(i).attr('src');
            if(!path){
                continue;
            }
            tmpPath = path.substr( 0, path.lastIndexOf('/') );
            tmpPath = path.substr( 0, tmpPath.lastIndexOf('/') + 1 );
            scriptTP.push({path: tmpPath, attrTmpl: $TScript.eq(i).attr('cuiTemplate')});
        }

        C.UI.templatePath = {
            scriptTP: scriptTP,
            scriptOP: scriptOP
        };
    };

    function getTemplateUrl(tmplName){
        var paths = C.UI.templatePath, reg = new RegExp(tmplName);
        for(var i = 0; i < paths.scriptTP.length; i ++){
            if(reg.test(paths.scriptTP[i].attrTmpl)){
                return {
                    path: paths.scriptTP[i].path,
                    mark: 'extend'
                };
            }
        }
        return {
            path: paths.scriptOP[0].path,
            mark: 'cui'
        }
    }

    function _scanHTML(el, name){
        var outerHtml;
        //旧版本的firefox不支持outerHTML
        if(typeof el.outerHTML !== 'undefined'){
            outerHtml = el.outerHTML;
        }else{
            $('body').append('<div style="display: none;" id="f8_outerHTML_bug"></div>');
            $('#f8_outerHTML_bug').append($(el).clone());
            outerHtml = $('#f8_outerHTML_bug')[0].innerHTML;
            $('#f8_outerHTML_bug').remove();
        }
        var html = outerHtml.match(/<[^>]*>/)[0].replace(/[\r\n\t]/g,'');
        var reg = new RegExp('\\s' + name + '=[\"\']*([\\w-\\%]*)[\"\']*');
        var attrValue = html.match(reg);
        return attrValue ? attrValue[1] : null;
    }

    //标记，CUI基类已经加载了
    window.__hasCUILoad = true;
})(window.comtop.cQuery , window.comtop);

//=============================组件公用方法=============================
;(function($, C){
    C.Tools.getCUIURL = function(){

    }
    /**
     * 编码html敏感字符
     * @param h {String} 待编码字符串
     * @return {String} 编码后的字符串
     */
    C.String.htmlEncode = function(h, flag){
        if(!flag){
            return h;
        }
        var str = h || '',
            t = document.createElement ("div"),
            o;
        (t.textContent != undefined ) ? (t.textContent = str) : (t.innerText = str);
        o = t.innerHTML;
        t = null;
        return o;
    };
    /**
     * 获取字符串字节数
     * @param str {String} 字符串
     * @return {Number}
     */
    C.String.getBytesLength = function(str) {
        var len = 0;
        
        str = str.replace(/\r/g, "");

        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            //0x0001-0x007e  英文数字标点
            //0xff60-0xff9f  特殊符号
            //换行符强制以\r\n类型计数
            if (c == 10){
                len += 2;
            } else if ((c >= 0x0001 && c <= 0x007e) || (0xff60<=c && c<=0xff9f)) {
                len ++;
            } else {
                len += 2;
            }
        }
        return len;
    };
    /**
     * 截取多少个字符
     * @param str {String} 字符串
     * @param length {Number} 字符数
     * @returns {string}
     */
    C.String.interceptString = function(str, length){
        var temp = '';
        var w = 0;

        for (var i = 0, len = str.length; i < len; i++) {
            var c = str.charCodeAt(i);
            c == 10 ? w += 2 : w++;
            if (w <= length) {
                temp += str.charAt(i);
            } else {
                break;
            }
        }

        return temp;
    };

    /**
     * 截取多少个字节
     * @param str {String} 字符串
     * @param length {Number} 字节数
     * @return {String}
     */
    C.String.intercept = function(str, length) {
        var temp = '';
        var w = 0;

        for (var i = 0, len = str.length; i < len; i++) {
            var c = str.charCodeAt(i);
            //换行符加2
            if (c == 10){
                w += 2;
             //单字节加1
            } else if ((c >= 0x0000 && c <= 0x007e) || (0xff60<=c && c<=0xff9f)) {
                w++;
            } else {
                w+=2;
            }
            if (w <= length) {
                temp += str.charAt(i);
            } else {
                break;
            }
        }

        return temp;
    };

    /**
     * 格式化日期
     * @param {Date} source 日期对象
     * @param {String} pattern 格式规则
     * @return {String} 字符串
     */
    C.Date.format = function(source, pattern, iso8601, sundayFirst){
        //eg:pattern="yyyy-MM-dd hh:mm:ss";

        var o = {
            "M+" : source.getMonth()+1,                       //month
            "d+" : source.getDate(),                          //day
            "h+" : source.getHours(),                         //hour
            "H+" : source.getHours(),                       //兼容写法
            "m+" : source.getMinutes(),                       //minute
            "s+" : source.getSeconds(),                       //second
            "q+" : Math.floor((source.getMonth()+3)/3),       //quarter
            "S" : source.getMilliseconds(),                    //millisecond
            "w+" :  C.Date.getOnWeek(source, iso8601, sundayFirst).week
        };

        if(/(y+)/.test(pattern)){
            pattern = pattern.replace(RegExp.$1, (source.getFullYear()+'').substr(4 - RegExp.$1.length));
        }

        for(var k in o){
            if(new RegExp('(' + k + ')').test(pattern)){
                pattern = pattern.replace(RegExp.$1, RegExp.$1.length==1 ?
                    o[k] : ('00' + o[k]).substr(('' + o[k]).length));
            }
        }
        return pattern;
    };

    /**
     * 简单日期格式化.与format相比没有周,季度等.
     * @param date
     * @param fmt
     * @returns {*}
     */
    C.Date.simpleformat = function (date, fmt) {
        if (!date) {
            return "";
        }
        var type = $.type(date);
        if (type === "string" || type === "number") {
            var new_date = new Date();
            new_date.setTime(date);
            if (isNaN(new_date.getDate())) {
                return date;
            }
            date = new_date;
        }
        var str     = ["y+", "yyyy", "M", "MM", "d", "dd", "h", "hh", "m", "mm", "s", "ss"],
            year    = date.getFullYear().toString(),
            month   = (date.getMonth() + 1).toString(),
            dates   = date.getDate().toString(),
            hours   = date.getHours().toString(),
            minutes = date.getMinutes().toString(),
            seconds = date.getSeconds().toString();
        function addZreo(value) {
            return value.charAt(1) ? value : 0 + value;
        }
        var val = [
            year.slice(2),
            year,
            month,
            addZreo(month),
            dates,
            addZreo(dates),
            hours,
            addZreo(hours),
            minutes,
            addZreo(minutes),
            seconds,
            addZreo(seconds)
        ];
        for (var i = str.length; i--;) {
            fmt = fmt.replace(new RegExp(str[i]), val[i]);
        }
        return fmt;
    };

    /**
     * * 计算当天在当年的第几周
     * @param {Date} date 日期对象
     * @param {Boolean} iso8601 是否执行iso8601标准，ISO 8601 规定每年的第一周包含这一年的第一个星期四
     * @param {Boolean} sundayFirst 第一天是否为星期天
     * @return {Object}
     */
    C.Date.getOnWeek = function(date, iso8601, sundayFirst){
        if(!date){
            return null;
        }
        var time, reviseDate = iso8601 ? 4 : 1,
            checkDate = new Date(date.getTime());

        // Find Thursday of this week starting on Monday
        checkDate.setDate(checkDate.getDate() + reviseDate - (sundayFirst ? checkDate.getDay() : checkDate.getDay() || 7));

        time = checkDate.getTime();
        checkDate.setMonth(0); // Compare with Jan 1
        checkDate.setDate(1);
        return {
            year: checkDate.getFullYear(),
            week: Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1
        };
    };

    /**
     * 获取一年某一个星期的日期范围
     * @param {Number} year 年份
     * @param {Number} week 周数
     * @param {Boolean} iso8601 标准输出
     * @param {Boolean} sundayFirst 一周第一天设为周日
     * @return {Array}
     */
    C.Date.getWeekRange = function(year, week, iso8601, sundayFirst){
        sundayFirst = iso8601 ? false : sundayFirst;
        var firstDate = new Date(year, 0, 1),
            onWeek = C.Date.getOnWeek(firstDate, iso8601, sundayFirst).week,
            start, end, day;
        day = onWeek != 1 ? sundayFirst ? 7 - firstDate.getDay() : 8 - (firstDate.getDay() || 7) : 0;
        start = (week - 1) * 7 + day;
        end = start + 6;
        return [new Date(start *86400000 + firstDate.getTime()), new Date(end*86400000 + firstDate.getTime())];
    };

    /**
     * 将目标字符串转换成日期对象
     * @param {String} str 数据源
     * @param {String} format 格式
     * @return {Date} 日期对象
     */
    C.Date.parse = function(str, format, iso8601, sundayFirst){
        str = $.trim( str );
        if( str === '' ){
            return null;
        }

        var regexp, y, M, d, h, m, s, q, w;
        //正则数组
        //[index year, /yyyy/, /yy/]
        y = [-1, '([0-9]{4})', '([0-9]{2})'];
        //[index month, /MM/, /M/]
        M = [-1, '(0[1-9]|1[0-2])', '([1-9]|1[0-2])'];
        //[index date, /dd/, /d/]
        d = [-1, '(0[1-9]|[1-2][0-9]|30|31)', '([1-9]|[1-2][0-9]|30|31)'];
        //[index hour, /hh/, /h/]
        h = [-1, '([0-1][0-9]|20|21|22|23)', '([0-9]|1[0-9]|20|21|22|23)'];
        //[index Minute, /mm/, /m/]
        m = [-1, '([0-5][0-9])', '([0-9]|[1-5][0-9])'];
        //[index Second, /ss/, /s/]
        s = [-1, '([0-5][0-9])', '([0-9]|[1-5][0-9])'];
        //[index quarter, /qq/, /q/]
        q = [-1, '([0-0][1-4])', '([1-4])'];
        //[index Week, /ww/, /w/]
        w = [-1, '([0-5][0-9])', '([0-9]|[1-4][0-9]|5[0-3])'];

        if( validDate(str,format) ){
            var now = new Date(),
                val = regexp.exec( str ),
                index = getIndex( format),
                arDate = [now.getFullYear(), 1, 1, 0, 0, 0, 1, 1];

            //删除数组的第一个元素
            val.shift();

            for(var i = 0; i < 8; i ++){
                arDate[i] = index[i] >= 0 ? +(val[index[i]]) : arDate[i];
            }

            //如果format内需要返回季度，并且不对月份返回，则把月份改为当前季度的第一个月
            //如“2012年第3季度”，则返回new Date(2012, 8, 1, 0, 0, 0)
            if(index[6] >= 0 && index[1] < 0){
                arDate[1] = (arDate[6] - 1) * 3;
                arDate[2] = 1;
                arDate[3] = 0;
                arDate[4] = 0;
                arDate[5] = 0;
            }else if(index[7] >= 0 && index[1]){
                var range = C.Date.getWeekRange(arDate[0], arDate[7], iso8601, sundayFirst);
                arDate[1] = range[0].getMonth();
                arDate[2] = range[0].getDate();
            }else{
                arDate[1] = arDate[1] - 1;
            }
            return new Date( arDate[0], arDate[1], arDate[2], arDate[3], arDate[4], arDate[5], 0 );
        }else{
            return null;
        }

        /**
         * 检测数据是否符合格式要求
         * @param {String} str
         * @param {String} format
         * @return {Boolean}
         */
        function validDate(str, format){
            format = format.replace(/yyyy/,y[1]).replace(/yy/,y[2]).replace(/MM/,M[1])
                .replace(/M/,M[2]).replace(/dd/,d[1]).replace(/d/,d[2]).replace(/hh/,h[1])
                .replace(/h/,h[2]).replace(/mm/,m[1]).replace(/m/,m[2]).replace(/ss/,s[1])
                .replace(/s/,s[2]).replace(/qq/,q[1]).replace(/q/,q[2]).replace(/ww/,w[1]).replace(/w/,w[2]);

            regexp = new RegExp( '^' + format + '$' );

            return regexp.test( str );
        }

        /**
         * 获取截取位置
         * @param {String} format
         * @return {Array}
         */
        function getIndex( format ){
            var ia = [], i = 0, j, ia2;

            y[0] = format.indexOf('yyyy');
            y[0] < 0 && (y[0] = format.indexOf('yy'));
            y[0] >= 0 && (ia[i] = y[0], i ++);

            M[0] = format.indexOf('MM');
            M[0] < 0 && (M[0] = format.indexOf('M'));
            M[0] >= 0 && (ia[i] = M[0], i ++);

            d[0] = format.indexOf('dd');
            d[0] < 0 && (d[0] = format.indexOf('d'));
            d[0] >= 0 && (ia[i] = d[0], i ++);

            h[0] = format.indexOf('hh');
            h[0] < 0 && (h[0] = format.indexOf('h'));
            h[0] >= 0 && (ia[i] = h[0], i ++);

            m[0] = format.indexOf('mm');
            m[0] < 0 && (m[0] = format.indexOf('m'));
            m[0] >= 0 && (ia[i] = m[0], i ++);

            s[0] = format.indexOf('ss');
            s[0] < 0 && (s[0] = format.indexOf('s'));
            s[0] >= 0 && (ia[i] = s[0], i ++);

            q[0] = format.indexOf('qq');
            q[0] < 0 && (q[0] = format.indexOf('q'));
            q[0] >= 0 && (ia[i] = q[0], i ++);

            w[0] = format.indexOf('ww');
            w[0] < 0 && (w[0] = format.indexOf('w'));
            w[0] >= 0 && (ia[i] = w[0], i ++);

            ia2 = [ y[0], M[0], d[0], h[0], m[0], s[0], q[0], w[0] ];

            for( i = 0; i < ia.length - 1; i++ ){
                for( j = 0; j < ia.length - 1 - i; j++ ){
                    if( ia[j] > ia[j+1] ){
                        var temp = ia[j];
                        ia[j] = ia[j+1];
                        ia[j+1] = temp;
                    }
                }
            }

            for( i = 0; i < ia.length; i++ ){
                for( j = 0; j < ia2.length; j++ ){
                    if( ia[i] == ia2[j] )
                        ia2[j] = i;
                }
            }

            return ia2;
        }
    };

    /**
     * 金额格式化
     * @param str {String} 字符串
     * @param length {Number} 保留小数长度，最大支持18位。
     * @param other {Object} 其它配置属性
     * @returns {string} 字符串
     */
    C.Number.money = function (str, length, other) {
        other = $.extend({
            separator: ',',     //分隔符
            prefix: ''          //前缀
        }, other);

        if (typeof str !== "string" && typeof str !== "number" ||
            typeof str === "string" && str === '' || typeof str === "number" && isNaN(str)) {
            str = 0;
        }
        if(str.toString().indexOf(other.separator) > -1){
            return str;
        }

        var strArr = [],
            negative = false, //是否是负数
            intFormat = null,
            fixedDec = null,
            toLen = function(source, len){
                if(!source){
                   source = "";
                }
                if(!len){
                    return source;
                }
                return (source + '').length >= len ? source : ( source + Array.prototype.join.call({length:len + 1}, '0') ).slice(0, len);
            };

        //先去掉-符号
        if(/-/.test(str + '')){
            negative = true;
            str = (str + '').replace('-', '');
        }

        if(str.toString().split(".")[1] === ''){
            str += "0";
        }

        if(length !== null){
            length = isNaN(Number(length)) ? 2 : Number(length);
            str = C.Number.round(str, length);
        }

        strArr = str.toString().split(".");
        intFormat = (strArr[0] || 0).toString().replace(/(\d)(?=(?:\d{3})+$)/g, '$1' +　other.separator);
        fixedDec = toLen( strArr[1], length);
        fixedDec = fixedDec ? "." + fixedDec : "";
        return other.prefix + (negative ? '-' : '') + intFormat + fixedDec;
    };

    /**
     * 字符运行-四舍五入
     * @param numStr {string} 原始数据
     * @param places {number} 保留位数
     * @returns {string}
     */
    C.Number.round = function(numStr, places) {
        var spl, sign, dotPo,floatNum, charArr, _numStr, i, isDot, ret;
        if (!(spl = /^(\+|\-)?(\d+|\d*(\.)\d+)$/.exec(numStr + ''))) {
            return;
        }
        places = !places || places < 0 ? 0 : places;
        sign = spl[1] ? spl[1].replace("+", "") : "";//正负
        _numStr = spl[2].replace(/^0+/g, "");//去掉前面0
        _numStr = _numStr.replace(/(\.\d*?)0+$/g, "$1");//去掉后面0
        _numStr = _numStr.charAt(0) === "." ? "0" + _numStr : _numStr; //修正.开头的小数
        dotPo = _numStr.search(/\./);//查询小数位置
        floatNum = _numStr.substring(dotPo);//小数
        //不需要转换
        if (dotPo === -1 || !floatNum || floatNum.length <= places) {
            ret = sign + _numStr;
        } else {
            charArr = _numStr.split("");
            charArr.length = dotPo + places + 1;
            if (floatNum.charAt(places + 1) - 0 < 5) {
                ret = sign + charArr.join("");
            } else {
                for (i = charArr.length; i--;) {
                    if (charArr[i] === ".") {
                        isDot = true;
                        continue;
                    }
                    charArr[i] = charArr[i] - 0 + 1;
                    if (charArr[i] === 10) {
                        charArr[i] = !isDot ? "" : 0;
                    } else {
                        break;
                    }
                }
                ret = sign + (i < 0 ? "1" + charArr.join("") : charArr.join("")) ;
            }
        }
        ret = ret.replace(/\.0*$/, "").replace(/^\-0$/, "");
        return !ret ? "0" : ret;
    };

    /**
     * 格式化尺寸值
     * @param a {String | Number} 尺寸原始值
     */
    C.Tools.fixedNumber = function(a){
        var type = typeof a,
            ret = null;
        if (type === "number") {
            ret = Math.floor(a);
        } else if (type === "string") {
            a = $.trim(a);
            if (a === "auto") {
                ret = "auto";
            } else if (/\d+(\.\d*)?%/.test(a)) {
                ret = a.replace(/\.\d*/,"");
                if (ret === "%" || ret === "0%") {
                    ret = 0;
                }
            } else if (/\d/.test(a.charAt(0))) {
                ret = parseInt(a.replace(/x/,""));
            }
        }
        return ret;
    };

    /**
     * 封装$.ajax 提供默认错误处理函数。
     */
    cui.ajax = function(cfg) {

        var type = cfg.type || 'GET',
            dataType = cfg.dataType || 'json',
            success = cfg.success || $.noop,
            error = cfg.error,
            scope = cfg.scope || window;

        var $ = window.comtop.cQuery;

        $.ajax({
            url: cfg.url,
            type: type,
            data: cfg.data,
            dataType: dataType,
            success: function(resp) {
                if (dataType == 'json') {
                    if (resp.success === false) {
                        if(error && error.call) {
                            error.call(scope, resp);
                        } else {
                            cui.error(resp.exMessage);
                        }
                    } else {
                        success.call(scope, resp);
                    }
                } else {
                    success.call(scope, resp);
                }
            },
            error: function(xhr, textStatus) {
                if (error && error.call) {
                    error.call(scope);
                } else if (textStatus == 'parsererror') {
                    cui.error('服务器异常，请稍后再试');
                } else if (textStatus == 'timeout') {
                    cui.error('网络连接超时，请稍后再试');
                } else if (xhr.status == 404) {
                    cui.error('连接服务器失败，可能网络繁忙，请稍后再试');
                } else if(xhr.status == 0) {
                    //KSSP-2978: 如果快速跳转其它页面(此时原页面DOM已不存在),前端脚步异常,返回:status==0,则什么都不做.Fuyx,2011-07-08
                } else {
                    cui.error('服务异常');
                }
            }
        });
    };

    //控制页面字体
    if(C.Browser.isIE8){
        $('head').append('<style type="text/css">*{font-family: "Microsoft YaHei"!important}</style>');
    }
})(window.comtop.cQuery , window.comtop);

//=============================图标名称与编码对应表======================
window.comtop.icon = {
    "glass": "&#xf000;",
    "music": "&#xf001;",
    "search": "&#xf002;",
    "envelope-o": "&#xf003;",
    "heart": "&#xf004;",
    "star": "&#xf005;",
    "star-o": "&#xf006;",
    "user": "&#xf007;",
    "film": "&#xf008;",
    "th-large": "&#xf009;",
    "th": "&#xf00a;",
    "th-list": "&#xf00b;",
    "check": "&#xf00c;",
    "remove": "&#xf00d;",
    "search-plus": "&#xf00e;",
    "search-minus": "&#xf010;",
    "power-off": "&#xf011;",
    "signal": "&#xf012;",
    "cog": "&#xf013;",
    "trash-o": "&#xf014;",
    "home": "&#xf015;",
    "file-o": "&#xf016;",
    "clock-o": "&#xf017;",
    "road": "&#xf018;",
    "download": "&#xf019;",
    "arrow-circle-o-down": "&#xf01a;",
    "arrow-circle-o-up": "&#xf01b;",
    "inbox": "&#xf01c;",
    "play-circle-o": "&#xf01d;",
    "repeat": "&#xf01e;",
    "refresh": "&#xf021;",
    "list-alt": "&#xf022;",
    "lock": "&#xf023;",
    "flag": "&#xf024;",
    "headphones": "&#xf025;",
    "volume-off": "&#xf026;",
    "volume-down": "&#xf027;",
    "volume-up": "&#xf028;",
    "qrcode": "&#xf029;",
    "barcode": "&#xf02a;",
    "tag": "&#xf02b;",
    "tags": "&#xf02c;",
    "book": "&#xf02d;",
    "bookmark": "&#xf02e;",
    "print": "&#xf02f;",
    "camera": "&#xf030;",
    "font": "&#xf031;",
    "bold": "&#xf032;",
    "italic": "&#xf033;",
    "text-height": "&#xf034;",
    "text-width": "&#xf035;",
    "align-left": "&#xf036;",
    "align-center": "&#xf037;",
    "align-right": "&#xf038;",
    "align-justify": "&#xf039;",
    "list": "&#xf03a;",
    "outdent": "&#xf03b;",
    "indent": "&#xf03c;",
    "video-camera": "&#xf03d;",
    "picture-o": "&#xf03e;",
    "pencil": "&#xf040;",
    "map-marker": "&#xf041;",
    "adjust": "&#xf042;",
    "tint": "&#xf043;",
    "pencil-square-o": "&#xf044;",
    "share-square-o": "&#xf045;",
    "check-square-o": "&#xf046;",
    "arrows": "&#xf047;",
    "step-backward": "&#xf048;",
    "fast-backward": "&#xf049;",
    "backward": "&#xf04a;",
    "play": "&#xf04b;",
    "pause": "&#xf04c;",
    "stop": "&#xf04d;",
    "forward": "&#xf04e;",
    "fast-forward": "&#xf050;",
    "step-forward": "&#xf051;",
    "eject": "&#xf052;",
    "chevron-left": "&#xf053;",
    "chevron-right": "&#xf054;",
    "plus-circle": "&#xf055;",
    "minus-circle": "&#xf056;",
    "remove-circle": "&#xf057;",
    "check-circle": "&#xf058;",
    "question-circle": "&#xf059;",
    "info-circle": "&#xf05a;",
    "crosshairs": "&#xf05b;",
    "remove-circle-o": "&#xf05c;",
    "check-circle-o": "&#xf05d;",
    "ban": "&#xf05e;",
    "arrow-left": "&#xf060;",
    "arrow-right": "&#xf061;",
    "arrow-up": "&#xf062;",
    "arrow-down": "&#xf063;",
    "share": "&#xf064;",
    "expand": "&#xf065;",
    "compress": "&#xf066;",
    "plus": "&#xf067;",
    "minus": "&#xf068;",
    "asterisk": "&#xf069;",
    "exclamation-circle": "&#xf06a;",
    "gift": "&#xf06b;",
    "leaf": "&#xf06c;",
    "fire": "&#xf06d;",
    "eye": "&#xf06e;",
    "eye-slash": "&#xf070;",
    "exclamation-triangle": "&#xf071;",
    "plane": "&#xf072;",
    "calendar": "&#xf073;",
    "random": "&#xf074;",
    "comment": "&#xf075;",
    "magnet": "&#xf076;",
    "chevron-up": "&#xf077;",
    "chevron-down": "&#xf078;",
    "retweet": "&#xf079;",
    "shopping-cart": "&#xf07a;",
    "folder": "&#xf07b;",
    "folder-open": "&#xf07c;",
    "arrows-v": "&#xf07d;",
    "arrows-h": "&#xf07e;",
    "bar-chart-o": "&#xf080;",
    "twitter-square": "&#xf081;",
    "facebook-square": "&#xf082;",
    "camera-retro": "&#xf083;",
    "key": "&#xf084;",
    "cogs": "&#xf085;",
    "comments": "&#xf086;",
    "thumbs-o-up": "&#xf087;",
    "thumbs-o-down": "&#xf088;",
    "star-half": "&#xf089;",
    "heart-o": "&#xf08a;",
    "sign-out": "&#xf08b;",
    "linkedin-square": "&#xf08c;",
    "thumb-tack": "&#xf08d;",
    "external-link": "&#xf08e;",
    "sign-in": "&#xf090;",
    "trophy": "&#xf091;",
    "github-square": "&#xf092;",
    "upload": "&#xf093;",
    "lemon-o": "&#xf094;",
    "phone": "&#xf095;",
    "square-o": "&#xf096;",
    "bookmark-o": "&#xf097;",
    "phone-square": "&#xf098;",
    "twitter": "&#xf099;",
    "facebook": "&#xf09a;",
    "github": "&#xf09b;",
    "unlock": "&#xf09c;",
    "credit-card": "&#xf09d;",
    "rss": "&#xf09e;",
    "hdd-o": "&#xf0a0;",
    "bullhorn": "&#xf0a1;",
    "bell": "&#xf0f3;",
    "certificate": "&#xf0a3;",
    "hand-o-right": "&#xf0a4;",
    "hand-o-left": "&#xf0a5;",
    "hand-o-up": "&#xf0a6;",
    "hand-o-down": "&#xf0a7;",
    "arrow-circle-left": "&#xf0a8;",
    "arrow-circle-right": "&#xf0a9;",
    "arrow-circle-up": "&#xf0aa;",
    "arrow-circle-down": "&#xf0ab;",
    "globe": "&#xf0ac;",
    "wrench": "&#xf0ad;",
    "tasks": "&#xf0ae;",
    "filter": "&#xf0b0;",
    "briefcase": "&#xf0b1;",
    "arrows-alt": "&#xf0b2;",
    "users": "&#xf0c0;",
    "link": "&#xf0c1;",
    "cloud": "&#xf0c2;",
    "flask": "&#xf0c3;",
    "scissors": "&#xf0c4;",
    "files-o": "&#xf0c5;",
    "paperclip": "&#xf0c6;",
    "floppy-o": "&#xf0c7;",
    "square": "&#xf0c8;",
    "bars": "&#xf0c9;",
    "list-ul": "&#xf0ca;",
    "list-ol": "&#xf0cb;",
    "strikethrough": "&#xf0cc;",
    "underline": "&#xf0cd;",
    "table": "&#xf0ce;",
    "magic": "&#xf0d0;",
    "truck": "&#xf0d1;",
    "pinterest": "&#xf0d2;",
    "pinterest-square": "&#xf0d3;",
    "google-plus-square": "&#xf0d4;",
    "google-plus": "&#xf0d5;",
    "money": "&#xf0d6;",
    "caret-down": "&#xf0d7;",
    "caret-up": "&#xf0d8;",
    "caret-left": "&#xf0d9;",
    "caret-right": "&#xf0da;",
    "columns": "&#xf0db;",
    "sort": "&#xf0dc;",
    "sort-asc": "&#xf0dd;",
    "sort-desc": "&#xf0de;",
    "envelope": "&#xf0e0;",
    "linkedin": "&#xf0e1;",
    "undo": "&#xf0e2;",
    "gavel": "&#xf0e3;",
    "tachometer": "&#xf0e4;",
    "comment-o": "&#xf0e5;",
    "comments-o": "&#xf0e6;",
    "bolt": "&#xf0e7;",
    "sitemap": "&#xf0e8;",
    "umbrella": "&#xf0e9;",
    "clipboard": "&#xf0ea;",
    "lightbulb-o": "&#xf0eb;",
    "exchange": "&#xf0ec;",
    "cloud-download": "&#xf0ed;",
    "cloud-upload": "&#xf0ee;",
    "user-md": "&#xf0f0;",
    "stethoscope": "&#xf0f1;",
    "suitcase": "&#xf0f2;",
    "bell-o": "&#xf0a2;",
    "coffee": "&#xf0f4;",
    "cutlery": "&#xf0f5;",
    "file-text-o": "&#xf0f6;",
    "building-o": "&#xf0f7;",
    "hospital-o": "&#xf0f8;",
    "ambulance": "&#xf0f9;",
    "medkit": "&#xf0fa;",
    "fighter-jet": "&#xf0fb;",
    "beer": "&#xf0fc;",
    "h-square": "&#xf0fd;",
    "plus-square": "&#xf0fe;",
    "angle-double-left": "&#xf100;",
    "angle-double-right": "&#xf101;",
    "angle-double-up": "&#xf102;",
    "angle-double-down": "&#xf103;",
    "angle-left": "&#xf104;",
    "angle-right": "&#xf105;",
    "angle-up": "&#xf106;",
    "angle-down": "&#xf107;",
    "desktop": "&#xf108;",
    "laptop": "&#xf109;",
    "tablet": "&#xf10a;",
    "mobile": "&#xf10b;",
    "circle-o": "&#xf10c;",
    "quote-left": "&#xf10d;",
    "quote-right": "&#xf10e;",
    "spinner": "&#xf110;",
    "circle": "&#xf111;",
    "reply": "&#xf112;",
    "github-alt": "&#xf113;",
    "folder-o": "&#xf114;",
    "folder-open-o": "&#xf115;",
    "smile-o": "&#xf118;",
    "frown-o": "&#xf119;",
    "meh-o": "&#xf11a;",
    "gamepad": "&#xf11b;",
    "keyboard-o": "&#xf11c;",
    "flag-o": "&#xf11d;",
    "flag-checkered": "&#xf11e;",
    "terminal": "&#xf120;",
    "code": "&#xf121;",
    "reply-all": "&#xf122;",
    "mail-reply-all": "&#xf122;",
    "star-half-o": "&#xf123;",
    "location-arrow": "&#xf124;",
    "crop": "&#xf125;",
    "code-fork": "&#xf126;",
    "chain-broken": "&#xf127;",
    "question": "&#xf128;",
    "info": "&#xf129;",
    "exclamation": "&#xf12a;",
    "superscript": "&#xf12b;",
    "subscript": "&#xf12c;",
    "eraser": "&#xf12d;",
    "puzzle-piece": "&#xf12e;",
    "microphone": "&#xf130;",
    "microphone-slash": "&#xf131;",
    "shield": "&#xf132;",
    "calendar-o": "&#xf133;",
    "fire-extinguisher": "&#xf134;",
    "rocket": "&#xf135;",
    "maxcdn": "&#xf136;",
    "chevron-circle-left": "&#xf137;",
    "chevron-circle-right": "&#xf138;",
    "chevron-circle-up": "&#xf139;",
    "chevron-circle-down": "&#xf13a;",
    "html5": "&#xf13b;",
    "css3": "&#xf13c;",
    "anchor": "&#xf13d;",
    "unlock-alt": "&#xf13e;",
    "bullseye": "&#xf140;",
    "ellipsis-h": "&#xf141;",
    "ellipsis-v": "&#xf142;",
    "rss-square": "&#xf143;",
    "play-circle": "&#xf144;",
    "ticket": "&#xf145;",
    "minus-square": "&#xf146;",
    "minus-square-o": "&#xf147;",
    "level-up": "&#xf148;",
    "level-down": "&#xf149;",
    "check-square": "&#xf14a;",
    "pencil-square": "&#xf14b;",
    "external-link-square": "&#xf14c;",
    "share-square": "&#xf14d;",
    "compass": "&#xf14e;",
    "caret-square-o-down": "&#xf150;",
    "caret-square-o-up": "&#xf151;",
    "caret-square-o-right": "&#xf152;",
    "eur": "&#xf153;",
    "gbp": "&#xf154;",
    "usd": "&#xf155;",
    "inr": "&#xf156;",
    "jpy": "&#xf157;",
    "rub": "&#xf158;",
    "krw": "&#xf159;",
    "btc": "&#xf15a;",
    "file": "&#xf15b;",
    "file-text": "&#xf15c;",
    "sort-alpha-asc": "&#xf15d;",
    "sort-alpha-desc": "&#xf15e;",
    "sort-amount-asc": "&#xf160;",
    "sort-amount-desc": "&#xf161;",
    "sort-numeric-asc": "&#xf162;",
    "sort-numeric-desc": "&#xf163;",
    "thumbs-up": "&#xf164;",
    "thumbs-down": "&#xf165;",
    "youtube-square": "&#xf166;",
    "youtube": "&#xf167;",
    "xing": "&#xf168;",
    "xing-square": "&#xf169;",
    "youtube-play": "&#xf16a;",
    "dropbox": "&#xf16b;",
    "stack-overflow": "&#xf16c;",
    "instagram": "&#xf16d;",
    "flickr": "&#xf16e;",
    "adn": "&#xf170;",
    "bitbucket": "&#xf171;",
    "bitbucket-square": "&#xf172;",
    "tumblr": "&#xf173;",
    "tumblr-square": "&#xf174;",
    "long-arrow-down": "&#xf175;",
    "long-arrow-up": "&#xf176;",
    "long-arrow-left": "&#xf177;",
    "long-arrow-right": "&#xf178;",
    "apple": "&#xf179;",
    "windows": "&#xf17a;",
    "android": "&#xf17b;",
    "linux": "&#xf17c;",
    "dribbble": "&#xf17d;",
    "skype": "&#xf17e;",
    "foursquare": "&#xf180;",
    "trello": "&#xf181;",
    "female": "&#xf182;",
    "male": "&#xf183;",
    "gittip": "&#xf184;",
    "sun-o": "&#xf185;",
    "moon-o": "&#xf186;",
    "archive": "&#xf187;",
    "bug": "&#xf188;",
    "vk": "&#xf189;",
    "weibo": "&#xf18a;",
    "renren": "&#xf18b;",
    "pagelines": "&#xf18c;",
    "stack-exchange": "&#xf18d;",
    "arrow-circle-o-right": "&#xf18e;",
    "arrow-circle-o-left": "&#xf190;",
    "caret-square-o-left": "&#xf191;",
    "dot-circle-o": "&#xf192;",
    "wheelchair": "&#xf193;",
    "vimeo-square": "&#xf194;",
    "try": "&#xf195;",
    "plus-square-o": "&#xf196;"
};
;(function($, C){
    'use strict';
    /**
     * 将json数据对像绑定到不同的cui元素
     */
    C.UI.Databind = C.UI.Base.extend({
        options: {
            uitype: 'Databind',
            scope: 'uitype',
            data: {}
        },

        data: {},
        // 备份初始数据供reset使用
        initData: {},
        // 记录propName --> el的mapping关系
        bindMapping: {},

        /**
         * init
         */
        _init: function() {
            this.data = this.options.el.get(0);
            try{
                delete this.data.eventID;
            }catch(e){}
            
            this.initData = $.extend(true, {}, this.data);
            this.bindMapping = {};
        },

        /**
         * 设置data数据
         */
        setValue: function(data, isInit){
            for (var propName in data) {
                if(propName.toLowerCase().indexOf('jquery') >= 0){
                    continue;
                }
                this.set(propName, data[propName], isInit);
            }
        },

        /**
         * 获取data数据
         */
        getValue: function(){
			var data = $.extend({}, this.data);
			for(var i in data){
				if(i.toLowerCase().indexOf('jquery') >= 0){
                    delete data[i];
                }
			}
            return data;
        },

        // 外部对像的值发生改变, 更新到data对像
        _change: function(event) {
            var propName = event.data.propName;
            var el = event.data.el;
            var newValue = cui(el).getValue();
            var oldValue = this.data[propName];
            if (newValue != oldValue) {
                this.data[propName] = newValue;
                this._triggerHandler('change', [propName, oldValue, newValue]);
            }
        },

        /**
         * 绑定元素到指定属性
         *
         * @param el 目标元素
         * @param propName 绑定的数据属性名称
         */
        addBind: function(el, propName){
            this.bindMapping[propName] = el;
            var $el = cui(el);
            if(!C.UI.scan.textmode && !$el.options.textmode){
                var value = $el.getValue();
                if(typeof this.data[propName] === 'undefined'){
                    if(typeof value === 'string' && value !== ''){
                        this.data[propName] = value;
                    }else if($.type(value) === 'array' && value.lenght !== 0){
                        this.data[propName] = value;
                    }
                }
            }
            $el.bind('change', {propName: propName, el: el}, $.proxy(this._change, this));
            //在添加绑定时，如果绑定数据不存在，则不执行数据填充
            if(typeof this.data[propName] !== 'undefined'){
                if(!$el.options.textmode){
                    $el.setValue(this.data[propName], true);
                }else{
                    $el.options.value = this.data[propName];
                    $el.setTextMode();
                }
            }

            return this;
        },

        /**
         * 重置所有元素的值为初始值
         */
        reset: function(){
            for (var key in this.initData) {
                this.set(key, this.initData[key], true);
            }
        },

        /**
         * 清空表单数据
         */
        setEmpty: function(){
            var valType, val = '', key;
            //清空提示样式
            for(key in this.bindMapping){
                cui(this.bindMapping[key]).onValid();
            }
            //清空值
            for (key in this.data) {
                if(key.toLowerCase().indexOf('jquery') >= 0){
                    continue;
                }
                valType = Object.prototype.toString.call(this.data[key])
                    .match(/\[object\s([A-Za-z]{1,})\]/)[1].toLocaleLowerCase();
                valType = this.data[key] === null ? 'null' : valType;
                switch (valType){
                    case 'number':
                        val = '';
                        break;
                    case 'string':
                        val = '';
                        break;
                    case 'array':
                        val = [];
                        break;
                    case 'object':
                        val = {};
                        break;
                    case 'null':
                        val = null;
                        break;
                    case 'undefined':
                        val = undefined;
                }
                this.set(key, val, true);
            }
        },

        /**
         * 设置属性值
         * @param {String} propName 绑定数据名称
         * @param {Object | Number | Array | String | ...} value'
         * @param {Boolean} isReset 是否执行重置
         */
        set: function(propName, value, isReset){
            var oldValue = this.data[propName];
            if (value != oldValue || isReset) {
                this.data[propName] = value;
                var el = this.bindMapping[propName];
                var $el = cui(el);
                if(el){
                    if(!$el.options.textmode){
                        $el.setValue(value, !!isReset);
                    }else{
                        $el.options.value = value;
                        $el.setTextMode();
                    }
                }
                this._triggerHandler('change', [propName, oldValue, value]);
            }
        },

        /**
         * 获取数指定的据源的属性值
         */
        get: function(propName) {
            return this.data[propName];
        },

        /**
         * 解除所有的数据绑定
         */
        destroy: function() {
            this._super();
            for (var key in this.bindMapping) {
                if (key) {
                    cui(this.bindMapping[key]).unbind('change', null, this._change);
                }
            }
        }
    });
})(window.comtop.cQuery, window.comtop);
;(function($, C) {
    C.UI.Validate = C.UI.Base.extend({

        options: {
            uitype: 'Validate',
            onValid: null,
            onInValid: null
        },

        /***  默认提示的样式名  ***/
        invalidClass: 'validate_invalid',
        messageClass: 'validate_validation_message',
        invalidFieldClass: 'validate_invalid_field',

        _create: function() {
            $.extend(this, this.options);
        },

        /**
         * 销毁组件
         */
        destroy: function() {
            var self = this;

            var validateEl = $.data(this.options.el, 'validateEl') || [];
            $.each(validateEl, function(index, element) {
                var $cui = cui('#' + element.id);
                var $el = $cui.options.el;

                $cui.unbind('change', self._validateEvent);
                $el.removeData('validateRule');
            });
            $.removeData(this.options.el, 'validateEl');
        },

        /**
         * 添加元素验证规则
         * @param element 元素id或元素对象
         * @param validateMethod 验证方法
         * @param validateParamsObj 参数
         */
        add: function(element, validateMethod, validateParamsObj) {
            var $cui = $.type(element) == 'string' ? cui('#' + element) : element;
            if (!$cui.options) return;
            var $el = $cui.options.el;

            //缓存验证规则
            var validations = $el.data('validateRule') || [];
            var validJson = null;
            //如果用户没传验证参数，且所传的validateMethod在Validate对象中找不到
            //默认认为用户选择了required验证，且validateMethod为验证失败时的信息
            if (!validateParamsObj && !Validate[validateMethod]) {
                validJson = {type: 'required', params: {m: validateMethod}};
            } else {
                validJson = {type: validateMethod, params: validateParamsObj || {}};
            }
            validations.push(validJson);
            $el.data('validateRule', validations);

            //缓存验证的元素
            var validateEl = $.data(this.options.el, 'validateEl') || [];
            if (!this._contains($el[0], validateEl)) {
                //为element注册事件
                $cui.bind('change', this, this._validateEvent);
                validateEl.push($el[0]);
            }
            $.data(this.options.el, 'validateEl', validateEl);
        },
        /**
         * 修改元素验证提示
         * @param element 元素id或元素对象
         * @param validateParamsObj 验证的参数
         */
        setTips: function(element,validateParamsObj) {
            if(!element || !validateParamsObj){
                return;
            }
            var $cui = $.type(element) === 'string' ? cui('#' + element) : element;
            if (!$cui.options) return;
            var $el = $cui.options.el;

            //缓存验证规则
            var validations = $el.data('validateRule') || [],validataParams = [],that = this;

            if($.type(validateParamsObj) === 'string') {
                $.each(validations,function(i){
                    var obj = validations[i];
                    if(obj.type === 'required'){
                        obj.params.m = validateParamsObj;
                    }
                });
                if($cui.options.el.attr("tip")){
                    this.validOneElement($cui);
                }
                return;
            }
            if(!$.isArray(validateParamsObj)){
                validataParams.push(validateParamsObj);
            }else{
                validataParams = validateParamsObj;
            }
            $.each(validataParams,function(i){
                var newTips =  validataParams[i];
                $.each(validations,function(j){
                    var rule = validations[j];
                    if(newTips.type === rule.type){
                        var tipName = that._getPropertyNames(newTips)[1] || "m";
                        rule.params[tipName] && (rule.params[tipName] = newTips[tipName]);
                    }
                })
            });
            if($cui.options.el.attr("tip")){
                this.validOneElement($cui);
            }
        },
        /**
         * 获取对象的属性名
         * @param obj 对象
         */
        _getPropertyNames: function(obj) {
            var result = [];
            for(key in obj){
                result.push(key);
            }
            return result;

        },
        /**
         * 是否让指定元素的验证失效
         * @param element 元素id或元素cui对象
         * @param flag 是否失效true/false
         */
        disValid: function(element, flag) {
            var $cui = $.type(element) == 'string' ? cui('#' + element) : element;
            if (!$cui.options) return;
            var $el = $cui.options.el;
            if (flag) {
                $el.data("disValid", "true");
            } else {
                $el.removeData("disValid");
            }
        },

        /**
         * 对象数组包含检查
         * @param obj对象元素
         * @param array数组
         * @return {Boolean}
         * @private
         */
        _contains: function(obj, array) {
            var flag = false;
            $.each(array, function(index, item) {
                if (obj === item) {
                    flag = true;
                    return;
                }
            });
            return flag;
        },

        /**
         * 移除元素规则
         * @param element 元素id或元素对象
         * @param validateMethod 验证方法
         * @param validateParamsObj 参数
         */
        remove: function(element, validateMethod) {
            var $cui = $.type(element) == 'string' ? cui('#' + element) : element;
            if (!$cui.options) return;
            var $el = $cui.options.el;

            var validations = [];
            if (validateMethod) {
                validations = $el.data('validateRule') || [];

                var idx = -1;
                $.each(validations, function(index, item) {
                    if (item.type == validateMethod) {
                        idx = index;
                    }
                });
                if (idx >= 0) {
                    validations.splice(idx, 1);
                }
            }

            if (validations.length < 1) {
                $el.removeData('validateRule');
                $cui.unbind('change', this, this._validateEvent);

                //移除验证元素
                var validateEl = $.data(this.options.el, 'validateEl') || [];
                var label = -1;
                $.each(validateEl, function(index, item) {
                    if (item.id == $el[0].id) {
                        label = index;
                    }
                });
                if (label >= 0) {
                    validateEl.splice(label, 1);
                }

                if (validateEl.length < 1) {
                    $.removeData(this.options.el, 'validateEl');
                } else {
                    $.data(this.options.el, 'validateEl', validateEl);
                }

            } else {
                $el.data('validateRule', validations);
            }
        },

        /**
         * 验证事件
         * @param e
         * @param {Boolean} isReset 是否是组件数据重置，重置数据不执行验证
         * @private
         */
        _validateEvent: function(e, isReset) {
            var self = e.data;
            //!!isReset把undefined转为false
            self._validate(this, !!isReset);
        },

        /**
         * 验证所有元素
         * @return {Boolean}
         */
        validAllElement: function() {
            return this._validElement($.data(this.options.el, 'validateEl'));
        },

        /**
         * 验证一个元素是否成功
         * @param element 元素id或元素对象
         * @return {Boolean}
         */
        validOneElement: function(element) {
            var $cui = $.type(element) == 'string' ? cui('#' + element) : element;
            if (!$cui.options) return false;

            return this._validate($cui);
        },

        /**
         * 验证元素
         * @param type {String} 验证方式，分别提供"ALL"（全部验证）, "AREA"（局部验证）, "CUSTOM"（自定义验证元素）
         * @param range {String|jQuery|HTMLElement} 验证范围
         * @param include {Boolean} 是否包含
         */
        validElement: function(type, range, include){
            var $range = [],
                i, len;
            //默认是全部验证
            type = type || 'ALL';
            type = type.toLocaleUpperCase(type);
            switch (type){
                //区域验证
                case 'AREA':
                    var $setRange = $(range);
                    var $tmpAllRange = [];
                    var $tmpRange = [];
                    var $list = C.UI.componentList;
                    for(i = 0, len = $list.length; i < len; i ++){
                        //查找区域内的表单元素
                        if($setRange.find($list[i].options.el).length){
                            if(typeof $list[i].options.textmode !== 'undefined'){
                                $tmpRange.push($list[i].options.el[0]);
                            }
                        }
                        //查找所有表单元素
                        if($list[i].options.el){
                            if(typeof $list[i].options.textmode !== 'undefined'){
                                $tmpAllRange.push($list[i].options.el[0]);
                            }
                        }
                    }

                    include = typeof include === 'undefined' ? true : false;
                    if(include){
                        $range = $tmpRange;
                    }else{
                        var check = false;
                        for (i = 0, len = $tmpAllRange.length; i < len; i++) {
                            for (var j = 0, jLen = $tmpRange.length; j < jLen; j ++) {
                                if($($tmpRange[j]).attr('id') == $($tmpAllRange[i]).attr('id')){
                                    check = true;
                                    break;
                                }
                            }
                            if(!check){
                                $range.push($tmpAllRange[i]);
                            }
                            check = false;
                        }
                    }

                    break;
                case 'CUSTOM':
                    include = typeof include === 'undefined' ? true : false;
                    if(include){
                        for (i = 0, len = range.length; i < len; i++) {
                            $range.push($('#' + range[i])[0]);
                        }
                    }else{
                        var $list = C.UI.componentList;
                        var $tmpRange = [];
                        for(i = 0, len = $list.length; i < len; i ++){
                            if($list[i].options.el){
                                if(typeof $list[i].options.textmode !== 'undefined'){
                                    $tmpRange.push($list[i].options.el[0]);
                                }
                            }
                        }

                        var check = false;
                        for (i = 0, len = $tmpRange.length; i < len; i++) {
                            for (var j = 0, jLen = range.length; j < jLen; j ++) {
                                if($($tmpRange[i]).attr('id') == range[j]){
                                    check = true;
                                    break;
                                }
                            }
                            if(!check){
                                $range.push($tmpRange[i]);
                            }
                            check = false;
                        }
                    }
                    break;
                case 'ALL':
                default:
                    $range = $.data(this.options.el, 'validateEl');
            }
            return this._validElement($range);
        },

        _validElement: function(validateEl) {
            validateEl = validateEl || [];
            var validList = [];
            var inValidList = [];
            var isValid = true;
            var notValidReadOnly = this.notValidReadOnly;
            for (var i = 0; i < validateEl.length; i++) {
                var element = validateEl[i];
                var $cui = cui(element);
                if(typeof $cui.options === 'undefined'){
                    continue;
                }
                //在设置 window.validater.notValidReadOnly =true的时候readonly状态下的CUI组件不再校验
                if(notValidReadOnly && $cui.options.readonly===true || $cui.options.textmode===true){
                    continue;
                }
                var result = this._validate($cui);
                result = $.extend(result, {id: element.id});
                if (result.valid) {
                    validList.push(result);
                } else {
                    isValid = false;
                    inValidList.push(result);
                }
            }
            return [inValidList, validList, isValid];
        },

        /**
         * 验证元素
         * @param {CUI} $cui 元素cui对象
         * @param {Boolean} isReset 是否是组件数据重置，重置数据不执行验证
         * @return {Boolean}
         * @private
         */
        _validate: function($cui, isReset) {
            var $el = $cui.options.el;
            if(isReset){
                $cui.onValid($cui);
                return false;
            }
            if (!$el[0].disabled) {
                //判断是否不验证该元素，若不验证直接返回验证正确
                var result = null;
                var disValid = $cui.options.el.data("disValid");
                if (disValid && disValid == "true") {
                    result = {valid: true, message: ''};
                } else {
                    result = this._doValidate($cui);
                }
                var isValid = result.valid;
                if (isValid) {
                    // 如果所验证的组件有onValid方法执行该方法
                    // 否则执行validate组件自带的onValid方法
                    if ($cui.onValid && !this.options.onValid) {
                        $cui.onValid($cui);
                    }else if(!$cui.onValid && !this.options.onValid){
                        this.onValid($el);
                    }else{
                        this.options.onValid.apply(this, [$el]);
                    }
                } else {
                    // 如果所验证的组件有onInvalid方法执行该方法
                    // 否则执行validate组件自带的onInvalid方法
                    if ($cui.onInValid && !this.options.onInValid) {
                        $cui.onInValid($cui, result.message);
                    }else if(!$cui.onInValid && !this.options.onInValid){
                        this.onInValid($el, result.message);
                    }else{
                        this.options.onInValid.apply(this, [$el, result.message]);
                    }
                }
                return result;
            }
        },

        /**
         * 验证某一元素的所有规则
         * @param $cui 元素cui对象
         * @return {}
         * @private
         */
        _doValidate: function($cui) {
            var $el = $cui.options.el;
            var validateFailed = false;

            var validations = $el.data('validateRule') || [];
            for (var i = 0; i < validations.length; i++) {
                var validation = validations[i];
                var result = this._validateElement($cui, validation);
                validateFailed = !result.valid;
                if (validateFailed) return {valid: false, message: result.message};
            }
            return {valid: true, message: ''};
        },

        /**
         * 验证某一元素的单一规则
         * @param $cui 元素cui对象
         * @param validation 规则
         * @return {}
         * @private
         */
        _validateElement: function($cui, validation) {
            var validateMethod = validation.type;
            var validateParamsObj = validation.params;

            var value = $cui.getValue();
            var isValid = true;
            var message = '';
            try {
                Validate[validateMethod](value, validateParamsObj);
            } catch (error) {
                message = error.message;
                isValid = false;
            } finally {
                return {valid: isValid, message: message};
            }
        },

        /**
         * 验证失败组件处理默认方法
         * @param element
         * @param message
         */
        onInValid: function(element, message){
            this._insertMessage(element, this._createMessageSpan(message));
            this._addFieldClass(element);
        },

        /**
         * 验证成功组件处理默认方法
         * @param element
         */
        onValid: function(element){
            this._removeMessageAndFieldClass(element)
        },

        /**
         * 创建一个span容器，填充失败或者成功消息
         * @param message
         * @return {Element}
         * @private
         */
        _createMessageSpan: function(message) {
            return $("<span></span>").html(message);
        },

        /**
         * 插入失败提示消息
         * @param element 验证的元素
         * @param elementToInsert 消息容器
         * @private
         */
        _insertMessage: function(element, elementToInsert) {
            this._removeMessage(element);
            $(elementToInsert).addClass(this.messageClass + (' ' + this.invalidClass));
            $(elementToInsert).insertAfter(element);
        },

        /**
         * 为验证的元素添加样式
         * @param element 验证的元素
         * @private
         */
        _addFieldClass: function(element) {
            this._removeFieldClass(element);
            $(element).addClass(this.invalidFieldClass);
        },

        /**
         * 移除失败提示
         * @param element 验证的元素
         * @private
         */
        _removeMessage: function(element) {
            if (nextEl = $(element).next('.' + this.messageClass)) {
                $(nextEl).remove();
            }
        },

        /**
         * 移除样式
         * @param element 验证的元素
         * @private
         */
        _removeFieldClass: function(element) {
            $(element).removeClass(this.invalidFieldClass);
        },

        /**
         * 移除失败消息以及移除样式
         * @param element 验证的元素
         * @private
         */
        _removeMessageAndFieldClass: function(element) {
            this._removeMessage(element);
            this._removeFieldClass(element);
        }
    });

    var Validate = null;
    C.UI.Validate.rule = Validate = {

        /**
         * 验证是否存在(扩展字段 req)
         * 参数 解释数据
         * m: 出错信息字符串
         * emptyVal:包含在其中的也算为空
         */
        required: function(value, paramsObj){
            var params = $.extend({
                m: "不能为空!"
            }, paramsObj || {});
            if(value === null || value === undefined) {
                Validate.fail(params.m);
            }
            if(typeof value ==="string"&&$.trim(value)===''){
                Validate.fail(params.m);
            }
            if (params.emptyVal) {
                $.each(params.emptyVal, function(i, item) {
                    if (value == item) {
                        Validate.fail(params.m);
                    }
                });
            }
            if ($.type(value) === 'array') {
                if(value.length === 0){
                    Validate.fail(params.m);
                }else{
                    for (var i = 0; i < value.length; i++) {
                        if ($.trim(value[i]) === '' || value[i] === null || value[i] === undefined) {
                            Validate.fail(params.m);
                            break;
                        }
                    }
                }
            }
            return true;
        },

        /**
         * 验证数值类型(扩展字段 num)
         * 参数 解释                                 数据
         *  oi： 是否只能为Integer （onlyInteger）     true/false
         *  min: 最小数                               数字
         *  max: 最大数                               数字
         *  is:  必须和该数字相等                      数字
         *  wrongm: 输入不和 is 相等的数字时提示信息       数字
         *  notnm：不为数字时提示信息                    字符串
         *  notim：不为整数时提示信息                    字符串
         *  minm：小于 min 数字时提示信息               字符串
         *  maxm：大于 max 数字时提示信息               字符串
         */
        numeric: function(value, paramsObj){
            var suppliedValue = value;
            if ('' === value) return true;
            var value = Number(value);
            var paramsObj = paramsObj || {};
            var params = {
                notANumberMessage:  paramsObj.notnm || "必须为数字!",
                notAnIntegerMessage: paramsObj.notim || "必须为整数!",
                wrongNumberMessage: paramsObj.wrongm || "必须为 " + paramsObj.is + "!",
                tooLowMessage:         paramsObj.minm || "必须大于 " + paramsObj.min + "!",
                tooHighMessage:        paramsObj.maxm || "必须小于 " + paramsObj.max + "!",
                is:                            ((paramsObj.is) || (paramsObj.is == 0)) ? paramsObj.is : null,
                minimum:                   ((paramsObj.min) || (paramsObj.min == 0)) ? paramsObj.min : null,
                maximum:                  ((paramsObj.max) || (paramsObj.max == 0)) ? paramsObj.max : null,
                onlyInteger:               paramsObj.oi || false
            };
            if (!isFinite(value))  Validate.fail(params.notANumberMessage);
//            if (params.onlyInteger && ( ( /\.0+$|\.$/.test(String(suppliedValue)) )  || ( value != parseInt(value) ) ) ) {
//                Validate.fail(params.notAnIntegerMessage);
//            }
            if (params.onlyInteger && !/^\d+$/.test(String(suppliedValue))) {
                Validate.fail(params.notAnIntegerMessage);
            }
            switch(true){
                case (params.is !== null):
                    if( value != Number(params.is) ) Validate.fail(params.wrongNumberMessage);
                    break;
                case (params.minimum !== null && params.maximum !== null):
                    Validate.numeric(value, {minm: params.tooLowMessage, min: params.minimum});
                    Validate.numeric(value, {maxm: params.tooHighMessage, max: params.maximum});
                    break;
                case (params.minimum !== null):
                    if( value < Number(params.minimum) ) Validate.fail(params.tooLowMessage);
                    break;
                case (params.maximum !== null):
                    if( value > Number(params.maximum) ) Validate.fail(params.tooHighMessage);
                    break;
            }
            return true;
        },

        /**
         * 正则表达式验证 (扩展字段 format)
         *  参数   解释                                 数据
         *  m:     出错信息                             字符串
         *  pattern: 验证正则表达式                     字符串
         *  negate: 是否忽略本次验证（negate）           true/false
         */
        format: function(value, paramsObj){
            var value = String(value);
            if ('' == value) return true;
            var params = $.extend({
                m: "不符合规定格式!",
                pattern:           /./ ,
                negate:            false
            }, paramsObj || {});
            params.pattern = $.type(params.pattern) == "string" ? new RegExp(params.pattern) : params.pattern;
            if(!params.negate) {//不忽略
                if(!params.pattern.test(value)) { //不忽略,且验证不过
                    Validate.fail(params.m);
                }
            }
            return true;
        },

        /**
         * 邮箱格式验证 (扩展字段 email)
         * 参数 解释                                 数据
         *  m:   出错信息                             字符串
         */
        email: function(value, paramsObj){
            if ('' == value) return true;
            var params = $.extend({
                m: "邮箱格式输入不合法!"
            }, paramsObj || {});
            Validate.format(value, {
                m: params.m,
                pattern: /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i
            });
            return true;
        },

        /**
         * 日期格式验证 (扩展字段 date)考虑了闰年、二月等因素
         * 参数 解释                                 数据
         *  m:   出错信息                            字符串
         */
        dateFormat : function(value, paramsObj) {
            var params = $.extend({
                m: "日期格式必须为yyyy-MM-dd形式！"
            }, paramsObj || {});
            Validate.format(value, {
                m: params.m,
                pattern: /^((((((0[48])|([13579][26])|([2468][048]))00)|([0-9][0-9]((0[48])|([13579][26])|([2468][048]))))-02-29)|(((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9][0-9])|([1-9][0-9][0-9][0-9]))-((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30))|(((0[1-9])|(1[0-2]))-((0[1-9])|(1[0-9])|(2[0-8]))))))$/i
            });
            return true;
        },

        /**
         * 长度验证(扩展字段 len)
         * 参数 解释                               数据
         *  m:   出错信息                          字符串
         *  min: 最小长度                          数字
         *  max: 最大长度                          数字
         *  is:  必须和该长度相等                     数字
         *  wrongm: 输入长度和 is 不相等时提示信息        数字
         *  minm：长度小于 min 数字时提示信息            字符串
         *  maxm：长度大于 max 数字时提示信息            字符串
         */
        length: function(value, paramsObj){
            var value = String(value);
            var paramsObj = paramsObj || {};
            var params = {
                wrongLengthMessage: paramsObj.wrongm || "长度必须为 " + paramsObj.is + " 字节!",
                tooShortMessage:      paramsObj.minm || "长度必须大于 " + paramsObj.min + " 字节!",
                tooLongMessage:       paramsObj.maxm || "长度必须小于 " + paramsObj.max + " 字节!",
                is:                           ((paramsObj.is) || (paramsObj.is == 0)) ? paramsObj.is : null,
                minimum:                  ((paramsObj.min) || (paramsObj.min == 0)) ? paramsObj.min : null,
                maximum:                 ((paramsObj.max) || (paramsObj.max == 0)) ? paramsObj.max : null
            }
            switch(true){
                case (params.is !== null):
                    if( value.replace(/[^\x00-\xff]/g, "xx").length != Number(params.is) ) {
                        Validate.fail(params.wrongLengthMessage);
                    }
                    break;
                case (params.minimum !== null && params.maximum !== null):
                    Validate.length(value, {minm: params.tooShortMessage, min: params.minimum});
                    Validate.length(value, {maxm: params.tooLongMessage, max: params.maximum});
                    break;
                case (params.minimum !== null):
                    if( value.replace(/[^\x00-\xff]/g, "xx").length < Number(params.minimum) ) {
                        Validate.fail(params.tooShortMessage);
                    }
                    break;
                case (params.maximum !== null):
                    if( value.replace(/[^\x00-\xff]/g, "xx").length > Number(params.maximum) ) {
                        Validate.fail(params.tooLongMessage);
                    }
                    break;
                default:
                    throw new Validate.error("Validate::Length - 长度验证必须提供长度值!");
            }
            return true;
        },

        /**
         * 包含验证 (扩展字段 inc)
         * 参数 解释                                 数据
         *  m:   出错信息                             字符串
         *  negate: 是否忽略                          true/false
         *  caseSensitive: 大小写敏感(caseSensitive)   true/false
         *  allowNull: 是否可以为空                    数字
         *  within:  集合                             数组
         *  partialMatch: 是否部分匹配                 true/false
         */
        inclusion: function(value, paramsObj){
            var params = $.extend({
                m: "",
                within:           [],
                allowNull:        false,
                partialMatch:   false,
                caseSensitive: true,
                negate:          false
            }, paramsObj || {});
            params.m = params.m || value + "没有包含在数组" + params.within.join(',') + "中";
            if(params.allowNull && !value) return true;
            if(!params.allowNull && !value) Validate.fail(params.m);
            //if case insensitive, make all strings in the array lowercase, and the value too
            if(!params.caseSensitive){
                var lowerWithin = [];
                $.each(params.within, function(index, item){
                    if(typeof item == 'string') item = item.toLowerCase();
                    lowerWithin.push(item);
                });
                params.within = lowerWithin;
                if(typeof value == 'string') value = value.toLowerCase();
            }

            var found = false;
            $.each(params.within, function(index, item) {
                if (item == value) found = true;
                if (params.partialMatch) {
                    if (value.indexOf(item) != -1) {
                        found = true;
                    }
                }
            });
            if( (!params.negate && !found) || (params.negate && found) ) Validate.fail(params.m);
            return true;
        },

        /**
         * 不包含验证 (扩展字段 exc)
         * 参数 解释                                 数据
         *  m:   出错信息                             字符串
         *  caseSensitive: 大小写敏感(caseSensitive)   true/false
         *  allowNull: 是否可以为空                    数字
         *  within:  集合                             数组
         *  partialMatch: 是否部分匹配                 true/false
         */
        exclusion: function(value, paramsObj){
            var params = $.extend({
                m: "",
                within:             [],
                allowNull:          false,
                partialMatch:     false,
                caseSensitive:   true
            }, paramsObj || {});
            params.m = params.m || value + "不应该在数组" + params.within.join(',') + "中！";
            params.negate = true;// set outside of params so cannot be overridden
            Validate.inclusion(value, params);
            return true;
        },

        /**
         * 组合匹配一致验证，如用户名和密码 (扩展字段 confirm)
         * 参数 解释                                 数据
         *  m:   出错信息                             字符串
         *  match: 验证与之匹配的元素引用              元素或元素id
         */
        confirmation: function(value, paramsObj){
            if(!paramsObj.match) {
                throw new Error("Validate::Confirmation - 与之匹配的元素引用或元素id必须被提供!");
            }
            var params = $.extend({
                m: "两者不一致!",
                match:            null
            }, paramsObj || {});
            params.match = $.type(params.match) == 'string' ? cui('#' + params.match) : params.match;
            if(!params.match || params.match.length == 0) {
                throw new Error("Validate::Confirmation - 与之匹配的元素引用或元素不存在!");
            }
            if(value != params.match.getValue()) {
                Validate.fail(params.m);
            }
            return true;
        },

        /**
         * 验证值是否为true 主要是验证checkbox (扩展字段 accept)
         * 参数 解释                                 数据
         *  m:   出错信息                             字符串
         */
        acceptance: function(value, paramsObj){
            var params = $.extend({
                m: "必须选择!"
            }, paramsObj || {});
            if(!value) {
                Validate.fail(params.m);
            }
            return true;
        },

        /**
         * 自定义验证函数 (扩展字段 custom)
         * 参数 解释                                 数据
         *  m:   出错信息                             字符串
         *  against:  自定义的函数                    function
         *  args:   自定义的函数的参数                 对象
         * */
        custom: function(value, paramsObj){
            var params = $.extend({
                against: function(){ return true; },
                args: {},
                m: "不合法!"
            }, paramsObj || {});
            var cusFunction = params.against;
            if ($.type(cusFunction) == 'string') {
                cusFunction = window[cusFunction];
            }
            if(!cusFunction(value, params.args,params)) {
                Validate.fail(params.m);
            }
            return true;
        },


        error: function(errorMessage){
            this.message = errorMessage;
            this.name = 'ValidationError';
        },

        fail: function(errorMessage){
            throw new Validate.error(errorMessage);
        }

    }
})(window.comtop.cQuery, window.comtop);
/**
 *
 * Tip组件
 *
 * @author 柯尚福
 * @since 2012-08-29
 * @updata 2013-04-01 by linchaoqun
 */
;(function($, C){

    C.UI.Tip = C.UI.Base.extend({

        options: {
            uitype: 'Tip',
            pointee: true,      //是否显示箭头
            position: 'auto',   //tip的显示位置
            live: false,        //是否以live的方式注册事件
            trigger: 'hover',   //触发tip显示的方式
            x: false,           //是否显示关闭按钮
            maxWidth: 150,       //最大宽度
            fade: false,		//是否淡入淡出 //TODO
            opacity: 1,          //透明度 //TODO
            tipEl: null,         //指定获取'tip'属性的元素,为扫描器和validate所做的处理
            content_cls: '.ctip-msg',
            close_cls: '.ctip-x',
            tipType: 'normal'      //默认是绿色 包含值 normal error
        },

        _init: function() {
            this.options.uid = 'tip_' + C.guid();
            var o = this.options;
            this.$el = $(o.el);
            this.$tipEl = o.tipEl ? $(o.tipEl) : this.$el;
            this.outTime = null;   //用于tip缓后隐藏
            this._fixTitle();
        },

        _create: function() {
            if(this.options.trigger === 'onload') {
                this.show();
            } else {
                this._bindElEvent();
            }
        },

        /**
         * 创建TipDOM结构
         * @private
         */
        _createDOM: function(){
            var self = this,
                opts = self.options,
                html = [], zIndex = $(this.$el).parents(".cui-dialog-container").css("z-index")||"";//这里加入z-index计算为了dialog验证input的时候error不能出现
            html.push('<div class="ctip" ',zIndex?('style="z-index:'+zIndex):'','" id="', opts.uid, '">');
            opts.pointee && html.push('<div class="ctip-arrow"><span class="tip-arrow-border">&#9670</span><span class="tip-arrow-bg">&#9670</span></div>');
            html.push('<div class="ctip-content ', (opts.x === true ? 'ctip-closed' : '') ,'">');
            opts.x && html.push('<a class="ctip-x cui-icon" href="#">&#xf00d;</a>');
            html.push('<div class="ctip-msg"></div></div></div>');
            $('body').append(html.join(''));
        },

        /**
         * 在要显示tip的dom元素上绑定相应事件
         */
        _bindElEvent: function() {
            var _self = this, o = _self.options;
            var binder = (o.live === 'true' || o.live ===true) ? 'live' : 'bind',
                eventIn = o.trigger === 'hover' ? 'mouseenter' : o.trigger === 'click' ? 'click' : 'focus',
                eventOut = o.trigger === 'hover' ? 'mouseleave' : o.trigger === 'click' ? '' : 'blur';

            _self.$el[binder](eventIn, function(){
                if(_self.outTime){
                    clearTimeout(_self.outTime);
                }
                _self.show(_self.$el.attr('tipType'));
                if (o.trigger !== 'hover') {
                    return false;
                }
            })[binder](eventOut, function(){
                if(!o.x){
                    _self.outTime = setTimeout(function(){
                        _self.hide();
                    }, 100);
                }
                if (o.trigger !== 'hover') {
                    return false;
                }
            });


        },

        /**
         * 延时创建tip
         */
        _lazyCreate: function() {
            var self = this,
                opts = self.options;
            if(!this.created){
                this._createDOM();
                self.$tip = $('#' + opts.uid);
                self._bindEvent();
                self.created = true;
            }
        },

        _setMaxWidth: function(){
            var $tip = this.$tip,
                o = this.options;
            if(C.Browser.isIE6){
                var width = $tip.find('.ctip-msg').width() > o.maxWidth ? o.maxWidth : 'auto';
                if(C.Browser.isQM && width != 'auto'){
                    width = width + 16;
                }
                $tip.children('.ctip-content').css('width', width);
            }else{
                $tip.children('.ctip-content').css('maxWidth', o.maxWidth);
            }
        },

        /**
         * 绑定tip的事件
         */
        _bindEvent: function() {
            var _self = this, o = this.options;
            //关闭按钮
            if(o.x === true){
                this.$tip.find(o.close_cls).bind('click', function(){
                    _self.hide();
                    return false;
                });
            }else{
                if(!o.onlyEl){ //onleEl 只是在tip附加el效果，不再tip注册事件
                    _self.$tip.hover(function(){
                        if(_self.outTime){
                            clearTimeout(_self.outTime);
                        }
                    },function(){
                        _self.outTime = setTimeout(function(){
                            _self.hide();
                        }, 200);
                    });
                }
            }

        },

        /**
         * 移除要显示tip的dom元素的title属性
         */
        _fixTitle: function() {
            this.$el.removeAttr('title');
        },

        /**
         * 设置tip要显示的位置
         */
        _setPosition: function() {
            var $tip = this.$tip,
                $ele = this.$el,
                o = this.options;
            var elePos = $.extend({},$ele.offset(),{
                width: $ele[0].offsetWidth,
                height: $ele[0].offsetHeight
            });
            var tipWidth = $tip[0].offsetWidth,
                tipHeight = $tip[0].offsetHeight,
                position = o.position;


            //处理ie6 不支持css max-width属性的问题
            if( C.Browser.isIE && tipWidth > o.maxWidth){
                $tip.width(o.maxWidth);
                tipWidth = $tip[0].offsetWidth; //重新获取宽高度
                tipHeight = $tip[0].offsetHeight;
            }

            if(position === 'auto'){
                position = this._calAutoPosition(elePos);
            }

            var tipPos = {};
            switch(position){
                case 't':
                    tipPos = {left: elePos.left + elePos.width / 2 - tipWidth / 2, top: elePos.top -tipHeight - 5};
                    break;
                case 'b':
                    tipPos = {left: elePos.left + elePos.width / 2 - tipWidth / 2, top: elePos.top + elePos.height + 5};
                    break;
                case 'l':
                    tipPos = {left: elePos.left - tipWidth - 5, top: elePos.top + elePos.height / 2 - tipHeight / 2};
                    break;
                case 'r':
                    tipPos = {left: elePos.left + elePos.width + 5 , top: elePos.top + elePos.height / 2 - tipHeight / 2};
                    break;
                case 'lt':
                    tipPos = {left: elePos.left, top: elePos.top - tipHeight - 5};
                    break;
                case 'lb':
                    tipPos = {left: elePos.left, top: elePos.top + elePos.height  + 5};
                    break;
                case 'rt':
                    tipPos = {left: elePos.left + elePos.width  - tipWidth, top: elePos.top - tipHeight - 5};
                    break;
                case 'rb':
                    tipPos = {left: elePos.left + elePos.width  - tipWidth, top: elePos.top + elePos.height + 5};
                    break;
            }

            $tip.css(tipPos).addClass('ctip-' + position);

        },

        /**
         * 如果用户不指定显示位置，自动计算tip的显示位置
         */
        _calAutoPosition: function(elePos) {
            var $win = $(window);
            var windowSize = {
                width: $win.width(),
                height: $win.height()
            };
            var tb = elePos.top > ($(document).scrollTop() + windowSize.height / 2) ? 't' : 'b';
            var lr = '',
                minDistance = this.options.maxWidth / 2, //距离左右窗边的最小距离
                farToLeft = elePos.left + elePos.width / 2 - $(document).scrollLeft(), //元素到左窗边的距离
                farToRight = windowSize.width - farToLeft; //元素到右窗边的距离

            if(farToLeft < minDistance){
                lr = 'l';
            } else if(farToRight < minDistance){
                lr = 'r';
            }
            return lr + tb;
        },

        /**
         * 获取tip的内容
         */
        getContent: function() {
            var o = this.options;
            return o.content ? o.content : this.$tipEl.attr('tip');
        },

        /**
         * 设置tip的内容
         * @param content {String} tip内容
         */
        setContent: function(content) {
            var content = content || this.getContent();

            //如果tip没有创建，则先创建tip
            if(!this.created){
                this._lazyCreate();
            }

            this.$tip.find(this.options.content_cls).html(content);
            this.$tipEl.attr('tip', content);
        },

        /**
         * 设置tip类型
         * @param tipType {String} tip状态类型，分别有'normal/error'
         */
        setType: function(tipType){
            var self = this,
                opts = self.options;
            self.$tip.removeClass('ctip-' + opts.tipType);
            self.$tip.addClass('ctip-' + tipType);
            opts.tipType = tipType;
        },

        /**
         * 显示tip
         * @param tipType {String} 显示色彩类型，值与options.tipType一致
         */
        show: function(tipType) {
            var self = this;
            self._lazyCreate();
            if($.trim(self.getContent())==='') { //如果tip内容为空，就不显示
                return;
            }

            self.setContent();
            //先重置样式
            self.$tip[0].className = 'ctip';
            self.$tip.css({top: 0, left: 0, display: 'block'});
            self._setMaxWidth();
            self._setPosition();
            self.setType(tipType || self.options.tipType);
            //this.$tip.show();
        },

        /**
         * 隐藏tip
         */
        hide: function() {
            if(this.$tip) {
                this.$tip.hide();
            }
        }

    });

    /**
    * HACK:为了解决拥有tipPosition属性的组件会生成两个TIPS
    */
    function hasTipsNow(el, opt, list){
        var tipPosition = cui(el).tipPosition,
            $el =  tipPosition ? $(tipPosition, el) : $(el),
            tipid = $el.attr('tipid');
        if(list[tipid]){
            //getContent中o.content的优先级大于attr('tip')
            opt.content && list[tipid].$tipEl.attr('tip', opt.content), delete opt.content;
            $.extend(list[tipid].options, opt);
            return list[tipid];
        }
        return false;
    }

    cui.tipList = {};
    cui.tip = function(el, options) {
        var tiper = null;

        options = options || {};
        tiper = hasTipsNow(el, options, cui.tipList);

        if(tiper){
            return tiper;
        }

        options.el = $(el);
        tiper = new C.UI.Tip(options);

        cui.tipList[tiper.options.uid] = tiper;
        options.el.attr('tipID', tiper.options.uid);
        return tiper;
    };
})(window.comtop.cQuery, window.comtop);
/*!
 * jQuery UI Widget 1.10.0
 * http://jqueryui.com
 *
 * Copyright 2013 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/jQuery.widget/
 */
(function( $, undefined ) {

var uuid = 0,
	slice = Array.prototype.slice,
	_cleanData = $.cleanData;
$.cleanData = function( elems ) {
	for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
		try {
			$( elem ).triggerHandler( "remove" );
		// http://bugs.jquery.com/ticket/8235
		} catch( e ) {}
	}
	_cleanData( elems );
};

$.widget = function( name, base, prototype ) {
	var fullName, existingConstructor, constructor, basePrototype,
		// proxiedPrototype allows the provided prototype to remain unmodified
		// so that it can be used as a mixin for multiple widgets (#8876)
		proxiedPrototype = {},
		namespace = name.split( "." )[ 0 ];

	name = name.split( "." )[ 1 ];
	fullName = namespace + "-" + name;

	if ( !prototype ) {
		prototype = base;
		base = $.Widget;
	}

	// create selector for plugin
	$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
		return !!$.data( elem, fullName );
	};

	$[ namespace ] = $[ namespace ] || {};
	existingConstructor = $[ namespace ][ name ];
	constructor = $[ namespace ][ name ] = function( options, element ) {
		// allow instantiation without "new" keyword
		if ( !this._createWidget ) {
			return new constructor( options, element );
		}

		// allow instantiation without initializing for simple inheritance
		// must use "new" keyword (the code above always passes args)
		if ( arguments.length ) {
			this._createWidget( options, element );
		}
	};
	// extend with the existing constructor to carry over any static properties
	$.extend( constructor, existingConstructor, {
		version: prototype.version,
		// copy the object used to create the prototype in case we need to
		// redefine the widget later
		_proto: $.extend( {}, prototype ),
		// track widgets that inherit from this widget in case this widget is
		// redefined after a widget inherits from it
		_childConstructors: []
	});

	basePrototype = new base();
	// we need to make the options hash a property directly on the new instance
	// otherwise we'll modify the options hash on the prototype that we're
	// inheriting from
	basePrototype.options = $.widget.extend( {}, basePrototype.options );
	$.each( prototype, function( prop, value ) {
		if ( !$.isFunction( value ) ) {
			proxiedPrototype[ prop ] = value;
			return;
		}
		proxiedPrototype[ prop ] = (function() {
			var _super = function() {
					return base.prototype[ prop ].apply( this, arguments );
				},
				_superApply = function( args ) {
					return base.prototype[ prop ].apply( this, args );
				};
			return function() {
				var __super = this._super,
					__superApply = this._superApply,
					returnValue;

				this._super = _super;
				this._superApply = _superApply;

				returnValue = value.apply( this, arguments );

				this._super = __super;
				this._superApply = __superApply;

				return returnValue;
			};
		})();
	});
	constructor.prototype = $.widget.extend( basePrototype, {
		// TODO: remove support for widgetEventPrefix
		// always use the name + a colon as the prefix, e.g., draggable:start
		// don't prefix for widgets that aren't DOM-based
		widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix : name
	}, proxiedPrototype, {
		constructor: constructor,
		namespace: namespace,
		widgetName: name,
		widgetFullName: fullName
	});

	// If this widget is being redefined then we need to find all widgets that
	// are inheriting from it and redefine all of them so that they inherit from
	// the new version of this widget. We're essentially trying to replace one
	// level in the prototype chain.
	if ( existingConstructor ) {
		$.each( existingConstructor._childConstructors, function( i, child ) {
			var childPrototype = child.prototype;

			// redefine the child widget using the same prototype that was
			// originally used, but inherit from the new version of the base
			$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto );
		});
		// remove the list of existing child constructors from the old constructor
		// so the old child constructors can be garbage collected
		delete existingConstructor._childConstructors;
	} else {
		base._childConstructors.push( constructor );
	}

	$.widget.bridge( name, constructor );
};

$.widget.extend = function( target ) {
	var input = slice.call( arguments, 1 ),
		inputIndex = 0,
		inputLength = input.length,
		key,
		value;
	for ( ; inputIndex < inputLength; inputIndex++ ) {
		for ( key in input[ inputIndex ] ) {
			value = input[ inputIndex ][ key ];
			if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {
				// Clone objects
				if ( $.isPlainObject( value ) ) {
					target[ key ] = $.isPlainObject( target[ key ] ) ?
						$.widget.extend( {}, target[ key ], value ) :
						// Don't extend strings, arrays, etc. with objects
						$.widget.extend( {}, value );
				// Copy everything else by reference
				} else {
					target[ key ] = value;
				}
			}
		}
	}
	return target;
};

$.widget.bridge = function( name, object ) {
	var fullName = object.prototype.widgetFullName || name;
	$.fn[ name ] = function( options ) {
		var isMethodCall = typeof options === "string",
			args = slice.call( arguments, 1 ),
			returnValue = this;

		// allow multiple hashes to be passed on init
		options = !isMethodCall && args.length ?
			$.widget.extend.apply( null, [ options ].concat(args) ) :
			options;

		if ( isMethodCall ) {
			this.each(function() {
				var methodValue,
					instance = $.data( this, fullName );
				if ( !instance ) {
					return $.error( "cannot call methods on " + name + " prior to initialization; " +
						"attempted to call method '" + options + "'" );
				}
				if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {
					return $.error( "no such method '" + options + "' for " + name + " widget instance" );
				}
				methodValue = instance[ options ].apply( instance, args );
				if ( methodValue !== instance && methodValue !== undefined ) {
					returnValue = methodValue && methodValue.jquery ?
						returnValue.pushStack( methodValue.get() ) :
						methodValue;
					return false;
				}
			});
		} else {
			this.each(function() {
				var instance = $.data( this, fullName );
				if ( instance ) {
					instance.option( options || {} )._init();
				} else {
					$.data( this, fullName, new object( options, this ) );
				}
			});
		}

		return returnValue;
	};
};

$.Widget = function( /* options, element */ ) {};
$.Widget._childConstructors = [];

$.Widget.prototype = {
	widgetName: "widget",
	widgetEventPrefix: "",
	defaultElement: "<div>",
	options: {
		disabled: false,

		// callbacks
		create: null
	},
	_createWidget: function( options, element ) {
		element = $( element || this.defaultElement || this )[ 0 ];
		this.element = $( element );
		this.uuid = uuid++;
		this.eventNamespace = "." + this.widgetName + this.uuid;
		this.options = $.widget.extend( {},
			this.options,
			this._getCreateOptions(),
			options );

		this.bindings = $();
		this.hoverable = $();
		this.focusable = $();

		if ( element !== this ) {
			$.data( element, this.widgetFullName, this );
			this._on( true, this.element, {
				remove: function( event ) {
					if ( event.target === element ) {
						this.destroy();
					}
				}
			});
			this.document = $( element.style ?
				// element within the document
				element.ownerDocument :
				// element is window or document
				element.document || element );
			this.window = $( this.document[0].defaultView || this.document[0].parentWindow );
		}

		this._create();
		this._trigger( "create", null, this._getCreateEventData() );
		this._init();
	},
	_getCreateOptions: $.noop,
	_getCreateEventData: $.noop,
	_create: $.noop,
	_init: $.noop,

	destroy: function() {
		this._destroy();
		// we can probably remove the unbind calls in 2.0
		// all event bindings should go through this._on()
		this.element
			.unbind( this.eventNamespace )
			// 1.9 BC for #7810
			// TODO remove dual storage
			.removeData( this.widgetName )
			.removeData( this.widgetFullName )
			// support: jquery <1.6.3
			// http://bugs.jquery.com/ticket/9413
			.removeData( $.camelCase( this.widgetFullName ) );
		this.widget()
			.unbind( this.eventNamespace )
			.removeAttr( "aria-disabled" )
			.removeClass(
				this.widgetFullName + "-disabled " +
				"ui-state-disabled" );

		// clean up events and states
		this.bindings.unbind( this.eventNamespace );
		this.hoverable.removeClass( "ui-state-hover" );
		this.focusable.removeClass( "ui-state-focus" );
	},
	_destroy: $.noop,

	widget: function() {
		return this.element;
	},

	option: function( key, value ) {
		var options = key,
			parts,
			curOption,
			i;

		if ( arguments.length === 0 ) {
			// don't return a reference to the internal hash
			return $.widget.extend( {}, this.options );
		}

		if ( typeof key === "string" ) {
			// handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
			options = {};
			parts = key.split( "." );
			key = parts.shift();
			if ( parts.length ) {
				curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
				for ( i = 0; i < parts.length - 1; i++ ) {
					curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
					curOption = curOption[ parts[ i ] ];
				}
				key = parts.pop();
				if ( value === undefined ) {
					return curOption[ key ] === undefined ? null : curOption[ key ];
				}
				curOption[ key ] = value;
			} else {
				if ( value === undefined ) {
					return this.options[ key ] === undefined ? null : this.options[ key ];
				}
				options[ key ] = value;
			}
		}

		this._setOptions( options );

		return this;
	},
	_setOptions: function( options ) {
		var key;

		for ( key in options ) {
			this._setOption( key, options[ key ] );
		}

		return this;
	},
	_setOption: function( key, value ) {
		this.options[ key ] = value;

		if ( key === "disabled" ) {
			this.widget()
				.toggleClass( this.widgetFullName + "-disabled ui-state-disabled", !!value )
				.attr( "aria-disabled", value );
			this.hoverable.removeClass( "ui-state-hover" );
			this.focusable.removeClass( "ui-state-focus" );
		}

		return this;
	},

	enable: function() {
		return this._setOption( "disabled", false );
	},
	disable: function() {
		return this._setOption( "disabled", true );
	},

	_on: function( suppressDisabledCheck, element, handlers ) {
		var delegateElement,
			instance = this;

		// no suppressDisabledCheck flag, shuffle arguments
		if ( typeof suppressDisabledCheck !== "boolean" ) {
			handlers = element;
			element = suppressDisabledCheck;
			suppressDisabledCheck = false;
		}

		// no element argument, shuffle and use this.element
		if ( !handlers ) {
			handlers = element;
			element = this.element;
			delegateElement = this.widget();
		} else {
			// accept selectors, DOM elements
			element = delegateElement = $( element );
			this.bindings = this.bindings.add( element );
		}

		$.each( handlers, function( event, handler ) {
			function handlerProxy() {
				// allow widgets to customize the disabled handling
				// - disabled as an array instead of boolean
				// - disabled class as method for disabling individual parts
				if ( !suppressDisabledCheck &&
						( instance.options.disabled === true ||
							$( this ).hasClass( "ui-state-disabled" ) ) ) {
					return;
				}
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}

			// copy the guid so direct unbinding works
			if ( typeof handler !== "string" ) {
				handlerProxy.guid = handler.guid =
					handler.guid || handlerProxy.guid || $.guid++;
			}

			var match = event.match( /^(\w+)\s*(.*)$/ ),
				eventName = match[1] + instance.eventNamespace,
				selector = match[2];
			if ( selector ) {
				delegateElement.delegate( selector, eventName, handlerProxy );
			} else {
				element.bind( eventName, handlerProxy );
			}
		});
	},

	_off: function( element, eventName ) {
		eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) + this.eventNamespace;
		element.unbind( eventName ).undelegate( eventName );
	},

	_delay: function( handler, delay ) {
		function handlerProxy() {
			return ( typeof handler === "string" ? instance[ handler ] : handler )
				.apply( instance, arguments );
		}
		var instance = this;
		return setTimeout( handlerProxy, delay || 0 );
	},

	_hoverable: function( element ) {
		this.hoverable = this.hoverable.add( element );
		this._on( element, {
			mouseenter: function( event ) {
				$( event.currentTarget ).addClass( "ui-state-hover" );
			},
			mouseleave: function( event ) {
				$( event.currentTarget ).removeClass( "ui-state-hover" );
			}
		});
	},

	_focusable: function( element ) {
		this.focusable = this.focusable.add( element );
		this._on( element, {
			focusin: function( event ) {
				$( event.currentTarget ).addClass( "ui-state-focus" );
			},
			focusout: function( event ) {
				$( event.currentTarget ).removeClass( "ui-state-focus" );
			}
		});
	},

	_trigger: function( type, event, data ) {
		var prop, orig,
			callback = this.options[ type ];

		data = data || {};
		event = $.Event( event );
		event.type = ( type === this.widgetEventPrefix ?
			type :
			this.widgetEventPrefix + type ).toLowerCase();
		// the original event may come from any element
		// so we need to reset the target on the new event
		event.target = this.element[ 0 ];

		// copy original event properties over to the new event
		orig = event.originalEvent;
		if ( orig ) {
			for ( prop in orig ) {
				if ( !( prop in event ) ) {
					event[ prop ] = orig[ prop ];
				}
			}
		}

		this.element.trigger( event, data );
		return !( $.isFunction( callback ) &&
			callback.apply( this.element[0], [ event ].concat( data ) ) === false ||
			event.isDefaultPrevented() );
	}
};

$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
	$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
		if ( typeof options === "string" ) {
			options = { effect: options };
		}
		var hasOptions,
			effectName = !options ?
				method :
				options === true || typeof options === "number" ?
					defaultEffect :
					options.effect || defaultEffect;
		options = options || {};
		if ( typeof options === "number" ) {
			options = { duration: options };
		}
		hasOptions = !$.isEmptyObject( options );
		options.complete = callback;
		if ( options.delay ) {
			element.delay( options.delay );
		}
		if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
			element[ method ]( options );
		} else if ( effectName !== method && element[ effectName ] ) {
			element[ effectName ]( options.duration, options.easing, callback );
		} else {
			element.queue(function( next ) {
				$( this )[ method ]();
				if ( callback ) {
					callback.call( element[ 0 ] );
				}
				next();
			});
		}
	};
});

})( window.comtop.cQuery );

/**
 * Cookie plugin
 *
 * Copyright (c) 2006 Klaus Hartl (stilbuero.de)
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 */

/**
 * Create a cookie with the given name and value and other optional parameters.
 *
 * @example $.cookie('the_cookie', 'the_value');
 * @desc Set the value of a cookie.
 * @example $.cookie('the_cookie', 'the_value', { expires: 7, path: '/', domain: 'jquery.com', secure: true });
 * @desc Create a cookie with all available options.
 * @example $.cookie('the_cookie', 'the_value');
 * @desc Create a session cookie.
 * @example $.cookie('the_cookie', null);
 * @desc Delete a cookie by passing null as value. Keep in mind that you have to use the same path and domain
 *       used when the cookie was set.
 *
 * @param String name The name of the cookie.
 * @param String value The value of the cookie.
 * @param Object options An object literal containing key/value pairs to provide optional cookie attributes.
 * @option Number|Date expires Either an integer specifying the expiration date from now on in days or a Date object.
 *                             If a negative value is specified (e.g. a date in the past), the cookie will be deleted.
 *                             If set to null or omitted, the cookie will be a session cookie and will not be retained
 *                             when the the browser exits.
 * @option String path The value of the path atribute of the cookie (default: path of page that created the cookie).
 * @option String domain The value of the domain attribute of the cookie (default: domain of page that created the cookie).
 * @option Boolean secure If true, the secure attribute of the cookie will be set and the cookie transmission will
 *                        require a secure protocol (like HTTPS).
 * @type undefined
 *
 * @name $.cookie
 * @cat Plugins/Cookie
 * @author Klaus Hartl/klaus.hartl@stilbuero.de
 */

/**
 * Get the value of a cookie with the given name.
 *
 * @example $.cookie('the_cookie');
 * @desc Get the value of a cookie.
 *
 * @param String name The name of the cookie.
 * @return The value of the cookie.
 * @type String
 *
 * @name $.cookie
 * @cat Plugins/Cookie
 * @author Klaus Hartl/klaus.hartl@stilbuero.de
 */
;(function(jQuery) {

jQuery.cookie = function(name, value, options) {
    if (typeof value != 'undefined') { // name and value given, set cookie
        options = options || {};
        if (value === null) {
            value = '';
            options = $.extend({}, options); // clone object since it's unexpected behavior if the expired property were changed
            options.expires = -1;
        }
        var expires = '';
        if (options.expires && (typeof options.expires == 'number' || options.expires.toUTCString)) {
            var date;
            if (typeof options.expires == 'number') {
                date = new Date();
                date.setTime(date.getTime() + (options.expires * 24 * 60 * 60 * 1000));
            } else {
                date = options.expires;
            }
            expires = '; expires=' + date.toUTCString(); // use expires attribute, max-age is not supported by IE
        }
        // NOTE Needed to parenthesize options.path and options.domain
        // in the following expressions, otherwise they evaluate to undefined
        // in the packed version for some reason...
        var path = options.path ? '; path=' + (options.path) : '';
        var domain = options.domain ? '; domain=' + (options.domain) : '';
        var secure = options.secure ? '; secure' : '';
        document.cookie = [name, '=', encodeURIComponent(value), expires, path, domain, secure].join('');
    } else { // only name given, get cookie
        var cookieValue = null;
        if (document.cookie && document.cookie != '') {
            var cookies = document.cookie.split(';');
            for (var i = 0; i < cookies.length; i++) {
                var cookie = jQuery.trim(cookies[i]);
                // Does this cookie string begin with the name we want?
                if (cookie.substring(0, name.length + 1) == (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }
};

})(window.comtop.cQuery);
/* jQuery Dynatree Plugin - v1.2.2 - 2012-10-07
 * http://dynatree.googlecode.com/
 * Copyright (c) 2012 Martin Wendt; Licensed MIT, GPL */
var _canLog = true;

function _log(g, f) {
	if(!_canLog) {
		return ;
	}
	var b = Array.prototype.slice.apply(arguments, [1]);
	var c = new Date();
	var a = c.getHours() + ":" + c.getMinutes() + ":" + c.getSeconds() + "." + c.getMilliseconds();
	b[0] = a + " - " + b[0];
	try {
		switch(g) {
		case "info":
			window.console.info.apply(window.console, b);
			break;
		case "warn":
			window.console.warn.apply(window.console, b);
			break;
		default:
			window.console.log.apply(window.console, b);
			break;
		}
	} catch(d) {
		if(!window.console) {
			_canLog = false;
		}
	}
}
function logMsg(a) {
	Array.prototype.unshift.apply(arguments, ["debug"]);
	_log.apply(this, arguments);
}
var getDynaTreePersistData = null;
var DTNodeStatus_Error = -1;
var DTNodeStatus_Loading = 1;
var DTNodeStatus_Ok = 0;
(function($) {
	var Class = {
		create: function() {
			return function() {
				this.initialize.apply(this, arguments);
			}
		}
	};

	function getDtNodeFromElement(el) {
		alert("getDtNodeFromElement is deprecated");
		return $.ui.dynatree.getNode(el);
	}
	function noop() {}
	var DynaTreeNode = Class.create();
	DynaTreeNode.prototype = {
		initialize: function(parent, tree, data) {
			this.parent = parent;
			this.tree = tree;
			if(typeof data === "string") {
				data = {
					title: data
				}
			}
			if(data.key === undefined) {
				data.key = "_" + tree._nodeCount++;
			}
			this.data = $.extend({}, $.ui.dynatree.nodedatadefaults, data);
			this.li = null;
			this.span = null;
			this.ul = null;
			this.childList = null;
			this._isLoading = false;
			this.hasSubSel = false;
			this.bExpanded = false;
			this.bSelected = false;
		},
		toString: function() {
			return "DynaTreeNode<" + this.data.key + ">: '" + this.data.title + "'";
		},
		toDict: function(recursive, callback) {
			var dict = $.extend({}, this.data);
			dict.activate = (this.tree.activeNode === this);
			dict.focus = (this.tree.focusNode === this);
			dict.expand = this.bExpanded;
			dict.select = this.bSelected;
			if(callback) {
				callback(dict);
			}
			if(recursive && this.childList) {
				dict.children = [];
				for(var i = 0, l = this.childList.length; i < l; i++) {
					dict.children.push(this.childList[i].toDict(true, callback));
				}
			} else {
				delete dict.children;
			}
			return dict;
		},
/**
 * 增加node disable方法
 * author：cxm
 * */
     disable:function(){
        	this.data.disable=true;
        	var li =$(this.li);
        	      this.expand(false);        	   
        	      li.children().removeClass("dynatree-active").addClass("dynatree-node-disable");
        	      li.find(".dynatree-checkbox").removeClass("dynatree-checkbox").addClass("dynatree-checkbox-disable");
        	      li.find(".dynatree-radio").removeClass("dynatree-radio").addClass("dynatree-radio-disable");
        	      
        },
        enable:function(){
        	this.data.disable=false;
        	var li =$(this.li);
          li.children().removeClass("dynatree-node-disable");
  	      li.find(".dynatree-checkbox-disable").removeClass("dynatree-checkbox-disable").addClass("dynatree-checkbox");
	      li.find(".dynatree-radio-disable").removeClass("dynatree-radio-disable").addClass("dynatree-radio");        	
        },
		
		fromDict: function(dict) {
			var children = dict.children;
			if(children === undefined) {
				this.data = $.extend(this.data, dict);
				this.render();
				return;
			}
			dict = $.extend({}, dict);
			dict.children = undefined;
			this.data = $.extend(this.data, dict);
			this.removeChildren();
			this.addChild(children);
		},
		_getInnerHtml: function() {
			var tree = this.tree,
				opts = tree.options,
				cache = tree.cache,
				level = this.getLevel(),
				data = this.data,
				res = "",
				imageSrc;
			if(level < opts.minExpandLevel) {
				if(level > 1) {
					res += cache.tagConnector;
				}
			} else {
				if(this.hasChildren() !== false) {
					res += cache.tagExpander;
				} else {
					res += cache.tagConnector;
				}
			}
			if(opts.checkbox && data.hideCheckbox !== true && !data.isStatusNode) {
				res += cache.tagCheckbox;
			}
			if(data.icon) {
				if(data.icon.charAt(0) === "/") {
					imageSrc = data.icon;
				} else {
					imageSrc = opts.imagePath + data.icon ;
				}
				res += "<img src='" + imageSrc + "' alt='' />" ;
			} else {
				if(data.icon === false) {} else {
					res += cache.tagNodeIcon;
				}
			}
			var nodeTitle = "";
			if(opts.onCustomRender) {
				nodeTitle = opts.onCustomRender.call(tree, this) || "";
			}
			if(!nodeTitle) {
				var tooltip = data.tooltip ? ' title="' + data.tooltip.replace(/\"/g, "&quot;") + '"' : "",
					href = data.href || "javascript:;";
				if(opts.noLink || data.noLink) {
					nodeTitle = '<span style="display:inline-block;" class="' + opts.classNames.title + '"' + tooltip + ">" + data.title + "</span>" ;
				} else {
					nodeTitle = '<a hidefocus="true" onclick="return false;"  href="' + href + '" class="' + opts.classNames.title + '"' + tooltip + ">" + data.title + "</a>";
				}
			}
			res += nodeTitle;
			return res;
		},
		_fixOrder: function() {
			var cl = this.childList;
			if(!cl || !this.ul) {
				return;
			}
			var childLI = this.ul.firstChild;
			for(var i = 0, l = cl.length - 1; i < l; i++) {
				var childNode1 = cl[i];
				var childNode2 = childLI.dtnode;
				if(childNode1 !== childNode2) {
					this.tree.logDebug("_fixOrder: mismatch at index " + i + ": " + childNode1 + " != " + childNode2);
					this.ul.insertBefore(childNode1.li, childNode2.li);
				} else {
					childLI = childLI.nextSibling;
				}
			}
		},
		render: function(useEffects, includeInvisible) { 
			var tree = this.tree,
				parent = this.parent,
				data = this.data,
				opts = tree.options,
				cn = opts.classNames,
				isLastSib = this.isLastSibling(),
				firstTime = false;
			if(!parent && !this.ul) {
				this.li = this.span = null;
				this.ul = document.createElement("ul");
				if(opts.minExpandLevel > 1) {
					this.ul.className = cn.container + " " + cn.noConnector;
				} else {
					this.ul.className = cn.container;
				}
			} else {
				if(parent) {
					if(!this.li) {
						firstTime = true;
						this.li = document.createElement("li");
						this.li.dtnode = this;
						if(data.key && opts.generateIds) {
							this.li.id = opts.idPrefix + data.key;
						}
						this.span = document.createElement("span");
						this.span.className = cn.title;
						this.li.appendChild(this.span);
						if(!parent.ul) {
							parent.ul = document.createElement("ul");
							parent.ul.style.display = "none";
							parent.li.appendChild(parent.ul);
						}
						parent.ul.appendChild(this.li);
					}
					this.span.innerHTML = this._getInnerHtml();					
					var cnList = [];
					cnList.push(cn.node);
					if(data.isFolder) {
						cnList.push(cn.folder);
					}
					if(this.bExpanded) {
						cnList.push(cn.expanded);
					}
					if(this.hasChildren() !== false) {
						cnList.push(cn.hasChildren);
					}
					if(data.isLazy && this.childList === null) {
						cnList.push(cn.lazy);
					}
					if(isLastSib) {
						cnList.push(cn.lastsib);
					}
					if(this.bSelected) {
						cnList.push(cn.selected);
					}
					if(this.hasSubSel) {
						cnList.push(cn.partsel);
					}
					if(tree.activeNode === this) {
						cnList.push(cn.active);
					}
					if(data.addClass) {
						cnList.push(data.addClass);
					}
                    if(data._firstNode){
                        cnList.push("dynatree-first-node");
                        $(this.span).find(".dynatree-expander").addClass("dynatree-expander-first");
                    }
                    if(data.partSelect){
                        cnList.push(cn.partsel);
                    }
					cnList.push(cn.combinedExpanderPrefix + (this.bExpanded ? "e" : "c") + (data.isLazy && this.childList === null ? "d" : "") + (isLastSib ? "l" : ""));
					cnList.push(cn.combinedIconPrefix + (this.bExpanded ? "e" : "c") + (data.isFolder ? "f" : ""));
					this.span.className = cnList.join(" ");
					this.li.className = isLastSib ? cn.lastsib : "";
/*                    if(data.firstNode){
                        this.li.className+="dynatree-first-node";
                    }*/
					/*author:cxm*/
					if(data.disable){
						this.disable();
					}
					if(data._customStyle){
						$(this.span).find("a").attr("style",data._customStyle);
					}
                    if(typeof data.customerClass === "string"){
                        $(this.span).find("a").addClass(data.customerClass);
                    }

					
					
					
					if(firstTime && opts.onCreate) {
						opts.onCreate.call(tree, this, this.span);
					}
					if(opts.onRender) {
						opts.onRender.call(tree, this, this.span);
					}
				}
			}
			
			if(this.li){
				
				 $(this.li).data("nodeData",this.data);  
				
			} 
			if((this.bExpanded || includeInvisible === true) && $.isArray(this.childList)) {
				for(var i = 0, l = this.childList.length; i < l; i++) {
					this.childList[i].render(false, includeInvisible);
				}
				this._fixOrder();
			}
			if(this.ul) {
				var isHidden = (this.ul.style.display === "none");
				var isExpanded = !! this.bExpanded;
				if(useEffects && opts.fx && (isHidden === isExpanded)) {
					var duration = opts.fx.duration || 200;
					$(this.ul).animate(opts.fx, duration);
				} else {
					this.ul.style.display = (this.bExpanded || !parent) ? "" : "none";
				}
			}
		},
		getKeyPath: function(excludeSelf) {
			var path = [];
			this.visitParents(function(node) {
				if(node.parent) {
					path.unshift(node.data.key);
				}
			}, !excludeSelf);
			return "/" + path.join(this.tree.options.keyPathSeparator) ;
		},
		getParent: function() {
			return this.parent;
		},
		getChildren: function() {
			if(this.hasChildren() === undefined) {
				return undefined ;
			}
			return this.childList;
		},
		hasChildren: function() {
			if(this.data.isLazy) {
				if(this.childList === null || this.childList === undefined) {
					return undefined ;
				} else {
					if(this.childList.length === 0) {
						return false;
					} else {
						if(this.childList.length === 1 && this.childList[0].isStatusNode()) {
							return undefined ;
						}
					}
				}
				return true;
			}
			return !!this.childList;
		},
		isFirstSibling: function() {
			var p = this.parent;
			return !p || p.childList[0] === this ;
		},
		isLastSibling: function() {
			var p = this.parent;
			return !p || p.childList[p.childList.length - 1] === this;
		},
		isLoading: function() {
			return !!this._isLoading;
		},
		getPrevSibling: function() {
			if(!this.parent) {
				return null;
			}
			var ac = this.parent.childList;
			for(var i = 1, l = ac.length; i < l; i++) {
				if(ac[i] === this) {
					return ac[i - 1] ;
				}
			}
			return null;
		},
		getNextSibling: function() {
			if(!this.parent) {
				return null ;
			}
			var ac = this.parent.childList;
			for(var i = 0, l = ac.length - 1; i < l; i++) {
				if(ac[i] === this) {
					return ac[i + 1] ;
				}
			}
			return null ;
		},
		isStatusNode: function() {
			return(this.data.isStatusNode === true) ;
		},
		isChildOf: function(otherNode) {
			return(this.parent && this.parent === otherNode);
		},
		isDescendantOf: function(otherNode) {
			if(!otherNode) {
				return false ;
			}
			var p = this.parent;
			while(p) {
				if(p === otherNode) {
					return true ;
				}
				p = p.parent ;
			}
			return false ;
		},
		countChildren: function() {
			var cl = this.childList;
			if(!cl) {
				return 0;
			}
			var n = cl.length;
			for(var i = 0, l = n; i < l; i++) {
				var child = cl[i];
				n += child.countChildren() ;
			}
			return n ;
		},
		sortChildren: function(cmp, deep) {
			var cl = this.childList;
			if(!cl) {
				return ;
			}
			cmp = cmp ||
			function(a, b) {
				var x = a.data.title.toLowerCase(),
					y = b.data.title.toLowerCase();
				return x === y ? 0 : x > y ? 1 : -1
			};
			cl.sort(cmp);
			if(deep) {
				for(var i = 0, l = cl.length; i < l; i++) {
					if(cl[i].childList) {
						cl[i].sortChildren(cmp, "$norender$");
					}
				}
			}
			if(deep !== "$norender$") {
				this.render();
			}
		},
		_setStatusNode: function(data) {
			var firstChild = (this.childList ? this.childList[0] : null);
			if(!data) {
				if(firstChild && firstChild.isStatusNode()) {
					try {
						if(this.ul) {
							this.ul.removeChild(firstChild.li);
							firstChild.li = null;
						}
					} catch(e) {}
					if(this.childList.length === 1) {
						this.childList = [] ;
					} else {
						this.childList.shift();
					}
				}
			} else {
				if(firstChild) {
					data.isStatusNode = true;
					data.key = "_statusNode";
					firstChild.data = data;
					firstChild.render();
				} else {
					data.isStatusNode = true;
					data.key = "_statusNode";
					firstChild = this.addChild(data) ;
				}
			}
		},
		setLazyNodeStatus: function(lts, opts) {
			var tooltip = (opts && opts.tooltip) ? opts.tooltip : null,
				info = (opts && opts.info) ? " (" + opts.info + ")" : "";
			switch(lts) {
			case DTNodeStatus_Ok:
				this._setStatusNode(null);
				$(this.span).removeClass(this.tree.options.classNames.nodeLoading);
				this._isLoading = false;
				if(this.tree.options.autoFocus) {
					if(this === this.tree.tnRoot && this.childList && this.childList.length > 0) {
						this.childList[0].focus();
					} else {
						this.focus();
					}
				}
				break;
			case DTNodeStatus_Loading:
				this._isLoading = true;
				$(this.span).addClass(this.tree.options.classNames.nodeLoading);
				if(!this.parent) {
					this._setStatusNode({
						title: this.tree.options.strings.loading + info,
						tooltip: tooltip,
						addClass: this.tree.options.classNames.nodeWait
					})
				}
				break;
			case DTNodeStatus_Error:
				this._isLoading = false;
				this._setStatusNode({
					title: this.tree.options.strings.loadError + info,
					tooltip: tooltip,
					addClass: this.tree.options.classNames.nodeError
				});
				break;
			default:
				throw "Bad LazyNodeStatus: '" + lts + "'.";
			}
		},
		_parentList: function(includeRoot, includeSelf) {
			var l = [];
			var dtn = includeSelf ? this : this.parent;
			while(dtn) {
				if(includeRoot || dtn.parent) {
					l.unshift(dtn);
				}
				dtn = dtn.parent ;
			}
			return l ;
		},
		getLevel: function() {
			var level = 0;
			var dtn = this.parent;
			while(dtn) {
				level++;
				dtn = dtn.parent;
			}
			return level ;
		},
		_getTypeForOuterNodeEvent: function(event) {
			var cns = this.tree.options.classNames;
			var target = event.target;
			if(target.className.indexOf(cns.node) < 0) {
				return null;
			}
			var eventX = event.pageX - target.offsetLeft;
			var eventY = event.pageY - target.offsetTop;
			for(var i = 0, l = target.childNodes.length; i < l; i++) {
				var cn = target.childNodes[i];
				var x = cn.offsetLeft - target.offsetLeft;
				var y = cn.offsetTop - target.offsetTop;
				var nx = cn.clientWidth,
					ny = cn.clientHeight;
				if(eventX >= x && eventX <= (x + nx) && eventY >= y && eventY <= (y + ny)) {
					if(cn.className == cns.title) {
						return "title";
					} else {
						if(cn.className == cns.expander) {
							return "expander" ;
						} else {
							if(cn.className == cns.checkbox) {
								return "checkbox" ;
							} else {
								if(cn.className == cns.nodeIcon) {
									return "icon";
								}
							}
						}
					}
				}
			}
			return "prefix";
		},
		getEventTargetType: function(event) {
			var tcn = event && event.target ? event.target.className : "",
				cns = this.tree.options.classNames;
			if(tcn === cns.title) {
				return "title" ;
			} else {
				if(tcn.indexOf(cns.expander)!==-1) {
					return "expander" ;
				} else {
					if(tcn === cns.checkbox) {
						return "checkbox" ;
					} else {
						if(tcn === cns.nodeIcon) {
							return "icon" ;
						} else {
							if(tcn === cns.empty || tcn === cns.vline || tcn === cns.connector) {
								return "prefix";
							} else {
								if(tcn.indexOf(cns.node) >= 0) {
									return this._getTypeForOuterNodeEvent(event);
								}
							}
						}
					}
				}
			}
			return null;
		},
		isVisible: function() {
			var parents = this._parentList(true, false);
			for(var i = 0, l = parents.length; i < l; i++) {
				if(!parents[i].bExpanded) {
					return false ;
				}
			}
			return true;
		},
		makeVisible: function() {
			var parents = this._parentList(true, false);
			for(var i = 0, l = parents.length; i < l; i++) {
				parents[i]._expand(true);
			}
		},
		focus: function() {
			this.makeVisible();
			try {
				$(this.span).find(">a").focus();
			} catch(e) {}
		},
		isFocused: function() {
			return(this.tree.tnFocused === this) ;
		},
		_activate: function(flag, fireEvents,reActive) {
			this.tree.logDebug("dtnode._activate(%o, fireEvents=%o) - %o", flag, fireEvents, this);
			var opts = this.tree.options;
			if(this.data.isStatusNode) {
				return;
			}
			if(fireEvents && opts.onQueryActivate && opts.onQueryActivate.call(this.tree, flag, this) === false) {
				return;
			}
			if(flag) {
				if(this.tree.activeNode) {
					// @cxm 节点已激活，是否需要再次触发
 				if(this.tree.activeNode === this&&!reActive) {
						return ;
					} 
					this.tree.activeNode.deactivate() ;
				}
				if(opts.activeVisible) {
					this.makeVisible();
				}
				this.tree.activeNode = this;
				if(opts.persist) {
					$.cookie(opts.cookieId + "-active", this.data.key, opts.cookie);
				}
				this.tree.persistence.activeKey = this.data.key;
				$(this.span).addClass(opts.classNames.active);
				if(fireEvents && opts.onActivate) {
					opts.onActivate.call(this.tree, this) ;
				}
			} else {
				if(this.tree.activeNode === this) {
					if(opts.onQueryActivate && opts.onQueryActivate.call(this.tree, false, this) === false) {
						return;
					}
					$(this.span).removeClass(opts.classNames.active);
					if(opts.persist) {
						$.cookie(opts.cookieId + "-active", "", opts.cookie) ;
					}
					this.tree.persistence.activeKey = null;
					this.tree.activeNode = null;
					if(fireEvents && opts.onDeactivate) {
						opts.onDeactivate.call(this.tree, this);
					}
				}
			}
		},
		activate: function(reActive) {
			this._activate(true, true,reActive) ;
		},
		activateSilently: function() {
			this._activate(true, false);
		},
		deactivate: function() {
			this._activate(false, true);
		},
		isActive: function() {
			return(this.tree.activeNode === this);
		},
		_userActivate: function() {
			var activate = true;
			var expand = false;
			if(this.data.isFolder) {
				switch(this.tree.options.clickFolderMode) {
				case 2:
					activate = false;
					expand = true;
					break;
				case 3:
					activate = expand = true;
					break;
				}
			}
			if(this.parent === null) {
				expand = false;
			}
			
			if(expand) {
				this.toggleExpand();
			//	this.focus()
			}
			if(activate) {
				this.activate(this.tree.options.reactive);
			}
		},
		_setSubSel: function(hasSubSel) {
			if(hasSubSel) {
				this.hasSubSel = true;
				$(this.span).addClass(this.tree.options.classNames.partsel);
			} else {
				this.hasSubSel = false;
				$(this.span).removeClass(this.tree.options.classNames.partsel);
			}
		},
		_updatePartSelectionState: function() {
			var sel;
			var initBSelected=this.bSelected;
			if(!this.hasChildren()) {
				sel = (this.bSelected && !this.data.unselectable && !this.data.isStatusNode);
				this._setSubSel(false);
				return sel;
			}
			var i, l, cl = this.childList,
				allSelected = true,
				allDeselected = true;
			for(i = 0, l = cl.length; i < l; i++) {
				var n = cl[i],
					s = n._updatePartSelectionState();
				if(s !== false) {
					allDeselected = false ;
				}
				if(s !== true) {
					allSelected = false;
				}
			}
			if(allSelected) {
				sel = true;
			} else {
				if(allDeselected) {
					sel = false ;
				} else {
					sel = undefined ;
				}
			}
			this._setSubSel(sel === undefined);
			this.bSelected = (sel === true);
			if(this.tree.options.selectMode==4){
				this.bSelected =initBSelected;
			}
			
			return sel;
		},
		_fixSelectionState: function(flag) {
			var p, i, l;
			if(this.bSelected) {
				this.visit(function(node) {
					node.parent._setSubSel(true);
					if(!node.data.unselectable) {
						node._select(true, false, false);
					}
				});
				p = this.parent;
				while(p) {
					p._setSubSel(true);
					var allChildsSelected = true;
					for(i = 0, l = p.childList.length; i < l; i++) {
						var n = p.childList[i];
						if(!n.bSelected && !n.data.isStatusNode && !n.data.unselectable) {
							allChildsSelected = false;
							break;
						}
					}
					if(allChildsSelected&&!flag) {
						p._select(true, false, false);
					}
					p = p.parent;
				}
			} else {
				this._setSubSel(false);
				this.visit(function(node) {
					node._setSubSel(false);
					node._select(false, false, false) ;
				});
				p = this.parent;
				while(p) {
					p._select(false, false, false);
					var isPartSel = false;
					for(i = 0, l = p.childList.length; i < l; i++) {
						if(p.childList[i].bSelected || p.childList[i].hasSubSel) {
							isPartSel = true;
							break;
						}
					}
					p._setSubSel(isPartSel);
					p = p.parent;
				}
			}
		},
		_select: function(sel, fireEvents, deep) {
			var opts = this.tree.options;
			if(this.data.isStatusNode) {
				return;
			}
			if(this.bSelected === sel) {
				return ;
			}
			if(fireEvents && opts.onQuerySelect && opts.onQuerySelect.call(this.tree, sel, this) === false) {
				return ;
			}
			if(opts.selectMode == 1 && sel) {
				this.tree.visit(function(node) {
					if(node.bSelected) {
						node._select(false, false, false);
						return false;
					}
				})
			}
			this.bSelected = sel;
			if(deep && opts.selectMode === 3) {
				this._fixSelectionState() ;
			}		
			/*添加功能:
			 * selectMode 4 全部子节点选中，不选中父节点
			 * cxm
			 * */		
			if(deep && opts.selectMode === 4) {
				this._fixSelectionState(true);
			}				
			if(sel) {
				if(opts.persist) {
					this.tree.persistence.addSelect(this.data.key);
				}
				$(this.span).addClass(opts.classNames.selected);
			/*	if(deep && opts.selectMode === 3) {
					this._fixSelectionState()
				}*/
				if(fireEvents && opts.onSelect) {
					opts.onSelect.call(this.tree, true, this);
				}
			} else {
				if(opts.persist) {
					this.tree.persistence.clearSelect(this.data.key);
				}
				$(this.span).removeClass(opts.classNames.selected);
	/*			if(deep && opts.selectMode === 3) {
					this._fixSelectionState()
				}*/
				if(fireEvents && opts.onSelect) {
					opts.onSelect.call(this.tree, false, this);
				}
			}
			

			
			
			
		},
		select: function(sel) {
			if(this.data.unselectable) {
				return this.bSelected;
			}
			return this._select(sel !== false, true, true) ;
		},
		toggleSelect: function() {
			return this.select(!this.bSelected);
		},
		isSelected: function() {
			return this.bSelected;
		},
		isLazy: function() {
			return !!this.data.isLazy;
		},
		_loadContent: function() {
			try {
				var opts = this.tree.options;
				this.tree.logDebug("_loadContent: start - %o", this);
				this.setLazyNodeStatus(DTNodeStatus_Loading);
				if(true === opts.onLazyRead.call(this.tree, this)) {
					this.setLazyNodeStatus(DTNodeStatus_Ok);
					this.tree.logDebug("_loadContent: succeeded - %o", this);
				}
			} catch(e) {
				this.tree.logWarning("_loadContent: failed - %o", e);
				this.setLazyNodeStatus(DTNodeStatus_Error, {
					tooltip: "" + e
				})
			}
		},
		_expand: function(bExpand, forceSync) {
			if(this.bExpanded === bExpand) {
				this.tree.logDebug("dtnode._expand(%o) IGNORED - %o", bExpand, this);
				return ;
			}
			this.tree.logDebug("dtnode._expand(%o) - %o", bExpand, this);
			var opts = this.tree.options;
			if(!bExpand && this.getLevel() < opts.minExpandLevel) {
				this.tree.logDebug("dtnode._expand(%o) prevented collapse - %o", bExpand, this);
				return ;
			}
			if(opts.onQueryExpand && opts.onQueryExpand.call(this.tree, bExpand, this) === false) {
				return ;
			}
			this.bExpanded = bExpand;
			if(opts.persist) {
				if(bExpand) {
					this.tree.persistence.addExpand(this.data.key);
				} else {
					this.tree.persistence.clearExpand(this.data.key);
				}
			}
			var allowEffects = !(this.data.isLazy && this.childList === null) && !this._isLoading && !forceSync;			
			this.render(allowEffects);			
			if(this.bExpanded && this.parent && opts.autoCollapse) {
				var parents = this._parentList(false, true);
				for(var i = 0, l = parents.length; i < l; i++) {
					parents[i].collapseSiblings();
				}
			}
			if(opts.activeVisible && this.tree.activeNode && !this.tree.activeNode.isVisible()) {
				this.tree.activeNode.deactivate();
			}
			if(bExpand && this.data.isLazy && this.childList === null && !this._isLoading) {
				this._loadContent();
				return;
			}
			if(opts.onExpand) {
				opts.onExpand.call(this.tree, bExpand, this);
			}
		},
		isExpanded: function() {
			return this.bExpanded;
		},
		expand: function(flag) {
			flag = (flag !== false);
			if(!this.childList && !this.data.isLazy && flag) {
				return ;
			} else {
				if(this.parent === null && !flag) {
					return ;
				}
			}
			this._expand(flag);
		},
		scheduleAction: function(mode, ms) {
			if(this.tree.timer) {
				clearTimeout(this.tree.timer);
				this.tree.logDebug("clearTimeout(%o)", this.tree.timer);
			}
			var self = this;
			switch(mode) {
			case "cancel":
				break;
			case "expand":
				this.tree.timer = setTimeout(function() {
					self.tree.logDebug("setTimeout: trigger expand");
					self.expand(true);
				}, ms);
				break;
			case "activate":
				this.tree.timer = setTimeout(function() {
					self.tree.logDebug("setTimeout: trigger activate");
					self.activate();
				}, ms);
				break;
			default:
				throw "Invalid mode " + mode;
			}
			this.tree.logDebug("setTimeout(%s, %s): %s", mode, ms, this.tree.timer);
		},
		toggleExpand: function() {
			this.expand(!this.bExpanded);
		},
		collapseSiblings: function() {
			if(this.parent === null) {
				return;
			}
			var ac = this.parent.childList;
			for(var i = 0, l = ac.length; i < l; i++) {
				if(ac[i] !== this && ac[i].bExpanded) {
					ac[i]._expand(false) ;
				}
			}
		},
		_onClick: function(event) { 
			var targetType = this.getEventTargetType(event);
			if(targetType === "expander") {
				this.toggleExpand();
				//this.focus()
			} else {
				if(targetType === "checkbox") {
					this.toggleSelect();
					//this.focus()
				} else {					
					this._userActivate();
					var aTag = this.span.getElementsByTagName("a");
					if(aTag[0]) {
					/*	if(!($.browser.msie && parseInt($.browser.version, 10) < 9)) {
							aTag[0].focus();							
						}*/
					} else {
						return true ;
					}
				}
			}
		//	event.preventDefault()
		},
		_onDblClick: function(event) {},
		_onKeydown: function(event) {
			var handled = true,
				sib;
			switch(event.which) {
			case 107:
			case 187:
				if(!this.bExpanded) {
					this.toggleExpand() ;
				}
				break;
			case 109:
			case 189:
				if(this.bExpanded) {
					this.toggleExpand();
				}
				break;
			case 32:
				this._userActivate();
				break;
			case 8:
				if(this.parent) {
					this.parent.focus();
				}
				break;
			case 37:
				if(this.bExpanded) {
					this.toggleExpand();
					this.focus()
				} else {
					if(this.parent && this.parent.parent) {
						this.parent.focus() ;
					}
				}
				break;
			case 39:
				if(!this.bExpanded && (this.childList || this.data.isLazy)) {
					this.toggleExpand();
					this.focus();
				} else {
					if(this.childList) {
						this.childList[0].focus();
					}
				}
				break;
			case 38:
				sib = this.getPrevSibling();
				while(sib && sib.bExpanded && sib.childList) {
					sib = sib.childList[sib.childList.length - 1];
				}
				if(!sib && this.parent && this.parent.parent) {
					sib = this.parent;
				}
				if(sib) {
					sib.focus();
				}
				break;
			case 40:
				if(this.bExpanded && this.childList) {
					sib = this.childList[0];
				} else {
					var parents = this._parentList(false, true);
					for(var i = parents.length - 1; i >= 0; i--) {
						sib = parents[i].getNextSibling();
						if(sib) {
							break;
						}
					}
				}
				if(sib) {
					sib.focus();
				}
				break;
			default:
				handled = false;
			}
			if(handled) {
				event.preventDefault() ;
			}
		},
		_onKeypress: function(event) {},
		_onFocus: function(event) {
			var opts = this.tree.options;
			if(event.type == "blur" || event.type == "focusout") {
				if(opts.onBlur) {
					opts.onBlur.call(this.tree, this) ;
				}
				if(this.tree.tnFocused) {
					$(this.tree.tnFocused.span).removeClass(opts.classNames.focused);
				}
				this.tree.tnFocused = null;
				if(opts.persist) {
					$.cookie(opts.cookieId + "-focus", "", opts.cookie);
				}
			} else {
				if(event.type == "focus" || event.type == "focusin") {
					if(this.tree.tnFocused && this.tree.tnFocused !== this) {
						this.tree.logDebug("dtnode.onFocus: out of sync: curFocus: %o", this.tree.tnFocused);
						$(this.tree.tnFocused.span).removeClass(opts.classNames.focused);
					}
					this.tree.tnFocused = this;
					if(opts.onFocus) {
						opts.onFocus.call(this.tree, this);
					}
					$(this.tree.tnFocused.span).addClass(opts.classNames.focused);
					if(opts.persist) {
						$.cookie(opts.cookieId + "-focus", this.data.key, opts.cookie) ;
					}
				}
			}
		},
		visit: function(fn, includeSelf) {
			var res = true;
			if(includeSelf === true) {
				res = fn(this);
				if(res === false || res == "skip") {
					return res;
				}
			}
			if(this.childList) {
				for(var i = 0, l = this.childList.length; i < l; i++) {
					res = this.childList[i].visit(fn, true);
					if(res === false) {
						break ;
					}
				}
			}
			return res ;
		},
		visitParents: function(fn, includeSelf) {
			if(includeSelf && fn(this) === false) {
				return false;
			}
			var p = this.parent;
			while(p) {
				if(fn(p) === false) {
					return false;
				}
				p = p.parent;
			}
			return true ;
		},
		remove: function() {
			if(this === this.tree.root) {
				throw "Cannot remove system root";
			} 
			this.parent.removeChild(this);
			/*@cxm   如果删除的是最后一个节点,将前一个节点设为最后的节点*/
			 this.parent.render();	 
		},
		removeChild: function(tn) {
			var ac = this.childList;
			if(ac.length == 1) {
				if(tn !== ac[0]) {
					throw "removeChild: invalid child"
				} 
				this.removeChildren();				
				$(this.ul).addClass("tree-hide-ul");//需要处理
				return;
			}
			if(tn === this.tree.activeNode) {
				tn.deactivate();
			}
			if(this.tree.options.persist) {
				if(tn.bSelected) {
					this.tree.persistence.clearSelect(tn.data.key);
				}
				if(tn.bExpanded) {
					this.tree.persistence.clearExpand(tn.data.key);
				}
			}
			tn.removeChildren(true);
            if(this.ul&&tn.li){
                this.ul.removeChild(tn.li);
            }
			for(var i = 0, l = ac.length; i < l; i++) {
				if(ac[i] === tn) {
					this.childList.splice(i, 1);
					break;
				}
			}
		},
		removeChildren: function(isRecursiveCall, retainPersistence) {
			this.tree.logDebug("%s.removeChildren(%o)", this, isRecursiveCall);
			var tree = this.tree;
			var ac = this.childList;
			
			if(ac) {
				for(var i = 0, l = ac.length; i < l; i++) {
					var tn = ac[i];
					if(tn === tree.activeNode && !retainPersistence) {
						tn.deactivate();
					}
					if(this.tree.options.persist && !retainPersistence) {
						if(tn.bSelected) {
							this.tree.persistence.clearSelect(tn.data.key);
						}
						if(tn.bExpanded) {
							this.tree.persistence.clearExpand(tn.data.key);
						}
					}
					tn.removeChildren(true, retainPersistence);
					if(this.ul) {
						$("li", $(this.ul)).remove();
					}
				}
				this.childList = null;
			}
			if(!isRecursiveCall) {
				this._isLoading = false;
				this.render();
			}
		},
		setTitle: function(title) {
			this.fromDict({
				title: title
			})
		},
		reload: function(force) {
			throw "Use reloadChildren() instead";
		},
		reloadChildren: function(callback) {
			if(this.parent === null) {
				throw "Use tree.reload() instead";
			} else {
				if(!this.data.isLazy) {
					throw "node.reloadChildren() requires lazy nodes.";
				}
			}
			if(callback) {
				var self = this;
				var eventType = "nodeLoaded.dynatree." + this.tree.$tree.attr("id") + "." + this.data.key;
				this.tree.$tree.bind(eventType, function(e, node, isOk) {
					self.tree.$tree.unbind(eventType);
					self.tree.logDebug("loaded %o, %o, %o", e, node, isOk);
					if(node !== self) {
						throw "got invalid load event";
					}
					callback.call(self.tree, node, isOk);
				})
			}
			this.removeChildren();
			this._loadContent();
		},
		_loadKeyPath: function(keyPath, callback) {
			var tree = this.tree;
			tree.logDebug("%s._loadKeyPath(%s)", this, keyPath);
			if(keyPath === "") {
				throw "Key path must not be empty";
			}
			var segList = keyPath.split(tree.options.keyPathSeparator);
			if(segList[0] === "") {
				throw "Key path must be relative (don't start with '/')";
			}
			var seg = segList.shift();
			if(this.childList) {
				for(var i = 0, l = this.childList.length; i < l; i++) {
					var child = this.childList[i];
					if(child.data.key === seg) {
						if(segList.length === 0) {
							callback.call(tree, child, "ok");
						} else {
							if(child.data.isLazy && (child.childList === null || child.childList === undefined)) {
								tree.logDebug("%s._loadKeyPath(%s) -> reloading %s...", this, keyPath, child);
								var self = this;
								child.reloadChildren(function(node, isOk) {
									if(isOk) {
										tree.logDebug("%s._loadKeyPath(%s) -> reloaded %s.", node, keyPath, node);
										callback.call(tree, child, "loaded");
										node._loadKeyPath(segList.join(tree.options.keyPathSeparator), callback);
									} else {
										tree.logWarning("%s._loadKeyPath(%s) -> reloadChildren() failed.", self, keyPath);
										callback.call(tree, child, "error");
									}
								})
							} else {
								callback.call(tree, child, "loaded");
								child._loadKeyPath(segList.join(tree.options.keyPathSeparator), callback);
							}
						}
						return ;
					}
				}
			}
			callback.call(tree, undefined, "notfound", seg, segList.length === 0);
			tree.logWarning("Node not found: " + seg);
			return ;
		},
		resetLazy: function() {
			if(this.parent === null) {
				throw "Use tree.reload() instead" ;
			} else {
				if(!this.data.isLazy) {
					throw "node.resetLazy() requires lazy nodes.";
				}
			}
			this.expand(false);
			this.removeChildren();
		},
		_addChildNode: function(dtnode, beforeNode) {
			var tree = this.tree,
				opts = tree.options,
				pers = tree.persistence;
			dtnode.parent = this;
			if(this.childList === null) {
				this.childList = [];
			} else {
				if(!beforeNode) {
					if(this.childList.length > 0) {
						$(this.childList[this.childList.length - 1].span).removeClass(opts.classNames.lastsib);
					}
				}
			}
			if(beforeNode) {
				var iBefore = $.inArray(beforeNode, this.childList);
				if(iBefore < 0) {
					throw "<beforeNode> must be a child of <this>";
				}
				this.childList.splice(iBefore, 0, dtnode);
			} else {
				this.childList.push(dtnode);
			}
			var isInitializing = tree.isInitializing();
			if(opts.persist && pers.cookiesFound && isInitializing) {
				if(pers.activeKey === dtnode.data.key) {
					tree.activeNode = dtnode;
				}
				if(pers.focusedKey === dtnode.data.key) {
					tree.focusNode = dtnode;
				}
				dtnode.bExpanded = ($.inArray(dtnode.data.key, pers.expandedKeyList) >= 0);
				dtnode.bSelected = ($.inArray(dtnode.data.key, pers.selectedKeyList) >= 0)
			} else {
				if(dtnode.data.activate) {
					tree.activeNode = dtnode;
					if(opts.persist) {
						pers.activeKey = dtnode.data.key;
					}
				}
				if(dtnode.data.focus) {
					tree.focusNode = dtnode;
					if(opts.persist) {
						pers.focusedKey = dtnode.data.key;
					}
				}
				dtnode.bExpanded = (dtnode.data.expand === true);
				if(dtnode.bExpanded && opts.persist) {
					pers.addExpand(dtnode.data.key);
				}
				dtnode.bSelected = (dtnode.data.select === true);
				if(dtnode.bSelected && opts.persist) {
					pers.addSelect(dtnode.data.key);
				}
			}
			/*if(opts.minExpandLevel >= dtnode.getLevel()) {
				this.bExpanded = true;
			}*/
			var level =  dtnode.getLevel();
			if(opts.minExpandLevel >= level||opts.defaultExpandLevel>=level) {
				this.bExpanded = true;

			}
			if(dtnode.bSelected && opts.selectMode == 3) {
				var p = this;
				while(p) {
					if(!p.hasSubSel) {
						p._setSubSel(true);
					}
					p = p.parent;
				}
			}
			if(tree.bEnableUpdate) {
				this.render() ;
			}
			return dtnode;
		},
		addChild: function(obj, beforeNode) {
			$(this.ul).removeClass("tree-hide-ul");
			if(typeof(obj) == "string") {
				throw "Invalid data type for " + obj;
			} else {
				if(!obj || obj.length === 0) {
					return;
				} else {
					if(obj instanceof DynaTreeNode) {
						return this._addChildNode(obj, beforeNode);
					}
				}
			}
			if(!obj.length) {
				obj = [obj];
			}
			var prevFlag = this.tree.enableUpdate(false);
			var tnFirst = null;
			for(var i = 0, l = obj.length; i < l; i++) {
				var data = obj[i];
				var dtnode = this._addChildNode(new DynaTreeNode(this, this.tree, data), beforeNode);
				if(!tnFirst) {
					tnFirst = dtnode ;
				}
				if(data.children) {
					dtnode.addChild(data.children, null);
				}
			}
			this.tree.enableUpdate(prevFlag);
			return tnFirst;
		},
		append: function(obj) {
			this.tree.logWarning("node.append() is deprecated (use node.addChild() instead).");
			return this.addChild(obj, null);
		},
		appendAjax: function(ajaxOptions) {
			var self = this;
			this.removeChildren(false, true);
			this.setLazyNodeStatus(DTNodeStatus_Loading);
			if(ajaxOptions.debugLazyDelay) {
				var ms = ajaxOptions.debugLazyDelay;
				ajaxOptions.debugLazyDelay = 0;
				this.tree.logInfo("appendAjax: waiting for debugLazyDelay " + ms);
				setTimeout(function() {
					self.appendAjax(ajaxOptions);
				}, ms);
				return ;
			}
			var orgSuccess = ajaxOptions.success,
				orgError = ajaxOptions.error,
				eventType = "nodeLoaded.dynatree." + this.tree.$tree.attr("id") + "." + this.data.key;
			var options = $.extend({}, this.tree.options.ajaxDefaults, ajaxOptions, {
				success: function(data, textStatus, jqXHR) {
					var prevPhase = self.tree.phase;
					self.tree.phase = "init";
					if(options.postProcess) {
						data = options.postProcess.call(this, data, this.dataType);
					} else {
						if(data && data.hasOwnProperty("d")) {
							data = (typeof data.d) == "string" ? $.parseJSON(data.d) : data.d ;
						}
					}
					if(!$.isArray(data) || data.length !== 0) {
						self.addChild(data, null);
					}
					self.tree.phase = "postInit";
					if(orgSuccess) {
						orgSuccess.call(options, self, data, textStatus);
					}
					self.tree.logDebug("trigger " + eventType);
					self.tree.$tree.trigger(eventType, [self, true]);
					self.tree.phase = prevPhase;
					self.setLazyNodeStatus(DTNodeStatus_Ok);
					if($.isArray(data) && data.length === 0) {
						self.childList = [];
						self.render();
					}
				},
				error: function(jqXHR, textStatus, errorThrown) {
					self.tree.logWarning("appendAjax failed:", textStatus, ":\n", jqXHR, "\n", errorThrown);
					if(orgError) {
						orgError.call(options, self, jqXHR, textStatus, errorThrown);
					}
					self.tree.$tree.trigger(eventType, [self, false]);
					self.setLazyNodeStatus(DTNodeStatus_Error, {
						info: textStatus,
						tooltip: "" + errorThrown
					})
				}
			});
			$.ajax(options);
		},
		move: function(targetNode, mode) {
			var pos;
			if(this === targetNode) {
				return;
			}
			if(!this.parent) {
				throw "Cannot move system root";
			}
			if(mode === undefined || mode == "over") {
				mode = "child" ;
			}
			var prevParent = this.parent;
			var targetParent = (mode === "child") ? targetNode : targetNode.parent;
			if(targetParent.isDescendantOf(this)) {
				throw "Cannot move a node to it's own descendant";
			}
			if(this.parent.childList.length == 1) {
				this.parent.childList = this.parent.data.isLazy ? [] : null;
				this.parent.bExpanded = false;
			} else {
				pos = $.inArray(this, this.parent.childList);
				if(pos < 0) {
					throw "Internal error";
				}
				this.parent.childList.splice(pos, 1);
			}
			if(this.parent.ul) {
				this.parent.ul.removeChild(this.li);
			}
			this.parent = targetParent;
			if(targetParent.hasChildren()) {
				switch(mode) {
				case "child":
					targetParent.childList.push(this);
					break;
				case "before":
					pos = $.inArray(targetNode, targetParent.childList);
					if(pos < 0) {
						throw "Internal error" ;
					}
					targetParent.childList.splice(pos, 0, this);
					break;
				case "after":
					pos = $.inArray(targetNode, targetParent.childList);
					if(pos < 0) {
						throw "Internal error"
					}
					targetParent.childList.splice(pos + 1, 0, this);
					break;
				default:
					throw "Invalid mode " + mode
				}
			} else {
				targetParent.childList = [this]
			}
			if(!targetParent.ul) {
				targetParent.ul = document.createElement("ul");
				targetParent.ul.style.display = "none";
				targetParent.li.appendChild(targetParent.ul)
			}
			if(this.li) {
				targetParent.ul.appendChild(this.li)
			}
			if(this.tree !== targetNode.tree) {
				this.visit(function(node) {
					node.tree = targetNode.tree
				}, null, true);
				throw "Not yet implemented."
			}
            var setFirstNode=function(childList){
              for(var i= 0,len=childList.length;i<len;i++){
                if(i==0){
                    childList[i].data._firstNode=true;
                }else{
                    childList[i].data._firstNode=false;
                }
              }
            }
            this.data._firstNode=false;
			if(!prevParent.isDescendantOf(targetParent)) {
                if(prevParent.parent===null){ //root下 的子节点，说明是一级节点
                    setFirstNode(prevParent.childList);
                };
				prevParent.render();
			}
			if(!targetParent.isDescendantOf(prevParent)) {
                if(prevParent.parent===null){ //root下 的子节点，说明是一级节点
                    setFirstNode(prevParent.childList);
                };
				targetParent.render();
			}
		},
		lastentry: undefined
	};
	var DynaTreeStatus = Class.create();
	DynaTreeStatus._getTreePersistData = function(cookieId, cookieOpts) {
		var ts = new DynaTreeStatus(cookieId, cookieOpts);
		ts.read();
		return ts.toDict()
	};
	getDynaTreePersistData = DynaTreeStatus._getTreePersistData;
	DynaTreeStatus.prototype = {
		initialize: function(cookieId, cookieOpts) {
			if(cookieId === undefined) {
				cookieId = $.ui.dynatree.prototype.options.cookieId
			}
			cookieOpts = $.extend({}, $.ui.dynatree.prototype.options.cookie, cookieOpts);
			this.cookieId = cookieId;
			this.cookieOpts = cookieOpts;
			this.cookiesFound = undefined;
			this.activeKey = null;
			this.focusedKey = null;
			this.expandedKeyList = null;
			this.selectedKeyList = null
		},
		_log: function(msg) {
			Array.prototype.unshift.apply(arguments, ["debug"]);
			_log.apply(this, arguments)
		},
		read: function() {
			this.cookiesFound = false;
			var cookie = $.cookie(this.cookieId + "-active");
			this.activeKey = (cookie === null) ? "" : cookie;
			if(cookie !== null) {
				this.cookiesFound = true
			}
			cookie = $.cookie(this.cookieId + "-focus");
			this.focusedKey = (cookie === null) ? "" : cookie;
			if(cookie !== null) {
				this.cookiesFound = true
			}
			cookie = $.cookie(this.cookieId + "-expand");
			this.expandedKeyList = (cookie === null) ? [] : cookie.split(",");
			if(cookie !== null) {
				this.cookiesFound = true
			}
			cookie = $.cookie(this.cookieId + "-select");
			this.selectedKeyList = (cookie === null) ? [] : cookie.split(",");
			if(cookie !== null) {
				this.cookiesFound = true
			}
		},
		write: function() {
			$.cookie(this.cookieId + "-active", (this.activeKey === null) ? "" : this.activeKey, this.cookieOpts);
			$.cookie(this.cookieId + "-focus", (this.focusedKey === null) ? "" : this.focusedKey, this.cookieOpts);
			$.cookie(this.cookieId + "-expand", (this.expandedKeyList === null) ? "" : this.expandedKeyList.join(","), this.cookieOpts);
			$.cookie(this.cookieId + "-select", (this.selectedKeyList === null) ? "" : this.selectedKeyList.join(","), this.cookieOpts)
		},
		addExpand: function(key) {
			if($.inArray(key, this.expandedKeyList) < 0) {
				this.expandedKeyList.push(key);
				$.cookie(this.cookieId + "-expand", this.expandedKeyList.join(","), this.cookieOpts)
			}
		},
		clearExpand: function(key) {
			var idx = $.inArray(key, this.expandedKeyList);
			if(idx >= 0) {
				this.expandedKeyList.splice(idx, 1);
				$.cookie(this.cookieId + "-expand", this.expandedKeyList.join(","), this.cookieOpts)
			}
		},
		addSelect: function(key) {
			if($.inArray(key, this.selectedKeyList) < 0) {
				this.selectedKeyList.push(key);
				$.cookie(this.cookieId + "-select", this.selectedKeyList.join(","), this.cookieOpts)
			}
		},
		clearSelect: function(key) {
			var idx = $.inArray(key, this.selectedKeyList);
			if(idx >= 0) {
				this.selectedKeyList.splice(idx, 1);
				$.cookie(this.cookieId + "-select", this.selectedKeyList.join(","), this.cookieOpts)
			}
		},
		isReloading: function() {
			return this.cookiesFound === true
		},
		toDict: function() {
			return {
				cookiesFound: this.cookiesFound,
				activeKey: this.activeKey,
				focusedKey: this.activeKey,
				expandedKeyList: this.expandedKeyList,
				selectedKeyList: this.selectedKeyList
			}
		},
		lastentry: undefined
	};
	var DynaTree = Class.create();
	DynaTree.version = "$Version:$";
	DynaTree.prototype = {
		initialize: function($widget) {
			this.phase = "init";
			this.$widget = $widget;
			this.options = $widget.options;
			this.$tree = $widget.element;
			this.timer = null;
			this.divTree = this.$tree.get(0);
			_initDragAndDrop(this)
		},
		_load: function(callback) {
			var $widget = this.$widget;
			var opts = this.options,
				self = this;
			this.bEnableUpdate = true;
			this._nodeCount = 1;
			this.activeNode = null;
			this.focusNode = null;
			if(opts.rootVisible !== undefined) {
				this.logWarning("Option 'rootVisible' is no longer supported.")
			}
			if(opts.minExpandLevel < 1) {
				this.logWarning("Option 'minExpandLevel' must be >= 1.");
				opts.minExpandLevel = 1
			}
			if(opts.classNames !== $.ui.dynatree.prototype.options.classNames) {
				opts.classNames = $.extend({}, $.ui.dynatree.prototype.options.classNames, opts.classNames)
			}
			if(opts.ajaxDefaults !== $.ui.dynatree.prototype.options.ajaxDefaults) {
				opts.ajaxDefaults = $.extend({}, $.ui.dynatree.prototype.options.ajaxDefaults, opts.ajaxDefaults)
			}
			if(opts.dnd !== $.ui.dynatree.prototype.options.dnd) {
				opts.dnd = $.extend({}, $.ui.dynatree.prototype.options.dnd, opts.dnd)
			}
			/*if(!opts.imagePath) {
				
				$("script").each(function() {
					var _rexDtLibName = /.*dynatree[^\/]*\.js$/i;
					if(this.src.search(_rexDtLibName) >= 0) {
						if(this.src.indexOf("/") >= 0) {
							opts.imagePath = this.src.slice(0, this.src.lastIndexOf("/")) + "/skin/"
						} else {
							opts.imagePath = "skin/"
						}
						self.logDebug("Guessing imagePath from '%s': '%s'", this.src, opts.imagePath);
						return false
					}
				})
			}*/
			this.persistence = new DynaTreeStatus(opts.cookieId, opts.cookie);
			if(opts.persist) {
				if(!$.cookie) {
					_log("warn", "Please include jquery.cookie.js to use persistence.")
				}
				this.persistence.read()
			}
			this.logDebug("DynaTree.persistence: %o", this.persistence.toDict());
			this.cache = {
				tagEmpty: "<span class='" + opts.classNames.empty + "'></span>",
				tagVline: "<span class='" + opts.classNames.vline + "'></span>",
				tagExpander: "<span class='" + opts.classNames.expander + "'></span>",
				tagConnector: "<span class='" + opts.classNames.connector + "'></span>",
				tagNodeIcon: "<span class='" + opts.classNames.nodeIcon + "'></span>",
				tagCheckbox: "<span class='" + opts.classNames.checkbox + "'></span>",
				lastentry: undefined
			};
			if(opts.children || (opts.initAjax && opts.initAjax.url) || opts.initId) {
				$(this.divTree).empty()
			}
			var $ulInitialize = this.$tree.find(">ul:first").hide();
			this.tnRoot = new DynaTreeNode(null, this, {});
			this.tnRoot.bExpanded = true;
			this.tnRoot.render();
			this.divTree.appendChild(this.tnRoot.ul);
			var root = this.tnRoot,
				isReloading = (opts.persist && this.persistence.isReloading()),
				isLazy = false,
				prevFlag = this.enableUpdate(false);
			this.logDebug("Dynatree._load(): read tree structure...");
			if(opts.children) {
				root.addChild(opts.children)
			} else {
				if(opts.initAjax && opts.initAjax.url) {
					isLazy = true;
					root.data.isLazy = true;
					this._reloadAjax(callback)
				} else {
					if(opts.initId) {
						this._createFromTag(root, $("#" + opts.initId))
					} else {
						this._createFromTag(root, $ulInitialize);
						$ulInitialize.remove()
					}
				}
			}
			this._checkConsistency();
			if(!isLazy && (opts.selectMode == 3||opts.selectMode == 4)) {
				root._updatePartSelectionState()
			}
			this.logDebug("Dynatree._load(): render nodes...");
			this.enableUpdate(prevFlag);
			this.logDebug("Dynatree._load(): bind events...");
			this.$widget.bind();
			this.logDebug("Dynatree._load(): postInit...");
			this.phase = "postInit";
			if(opts.persist) {
				this.persistence.write()
			}
			if(this.focusNode && this.focusNode.isVisible()) {
				this.logDebug("Focus on init: %o", this.focusNode);
				this.focusNode.focus()
			}
			if(!isLazy) {
				if(opts.onPostInit) {
					opts.onPostInit.call(this, isReloading, false)
				}
				if(callback) {
					callback.call(this, "ok")
				}
			}
			this.phase = "idle"
		},
		_reloadAjax: function(callback) {
			var opts = this.options;
			if(!opts.initAjax || !opts.initAjax.url) {
				throw "tree.reload() requires 'initAjax' mode."
			}
			var pers = this.persistence;
			var ajaxOpts = $.extend({}, opts.initAjax);
			if(ajaxOpts.addActiveKey) {
				ajaxOpts.data.activeKey = pers.activeKey
			}
			if(ajaxOpts.addFocusedKey) {
				ajaxOpts.data.focusedKey = pers.focusedKey
			}
			if(ajaxOpts.addExpandedKeyList) {
				ajaxOpts.data.expandedKeyList = pers.expandedKeyList.join(",")
			}
			if(ajaxOpts.addSelectedKeyList) {
				ajaxOpts.data.selectedKeyList = pers.selectedKeyList.join(",")
			}
			if(ajaxOpts.success) {
				this.logWarning("initAjax: success callback is ignored; use onPostInit instead.")
			}
			if(ajaxOpts.error) {
				this.logWarning("initAjax: error callback is ignored; use onPostInit instead.")
			}
			var isReloading = pers.isReloading();
			ajaxOpts.success = function(dtnode, data, textStatus) {
				if(opts.selectMode == 3) {
					dtnode.tree.tnRoot._updatePartSelectionState()
				}
				if(opts.onPostInit) {
					opts.onPostInit.call(dtnode.tree, isReloading, false)
				}
				if(callback) {
					callback.call(dtnode.tree, "ok")
				}
			};
			ajaxOpts.error = function(dtnode, XMLHttpRequest, textStatus, errorThrown) {
				if(opts.onPostInit) {
					opts.onPostInit.call(dtnode.tree, isReloading, true, XMLHttpRequest, textStatus, errorThrown)
				}
				if(callback) {
					callback.call(dtnode.tree, "error", XMLHttpRequest, textStatus, errorThrown)
				}
			};
			this.logDebug("Dynatree._init(): send Ajax request...");
			this.tnRoot.appendAjax(ajaxOpts)
		},
		toString: function() {
			return "Dynatree '" + this.$tree.attr("id") + "'"
		},
		toDict: function() {
			return this.tnRoot.toDict(true)
		},
		serializeArray: function(stopOnParents) {
			var nodeList = this.getSelectedNodes(stopOnParents),
				name = this.$tree.attr("name") || this.$tree.attr("id"),
				arr = [];
			for(var i = 0, l = nodeList.length; i < l; i++) {
				arr.push({
					name: name,
					value: nodeList[i].data.key
				})
			}
			return arr
		},
		getPersistData: function() {
			return this.persistence.toDict()
		},
		logDebug: function(msg) {
			if(this.options.debugLevel >= 2) {
				Array.prototype.unshift.apply(arguments, ["debug"]);
				_log.apply(this, arguments)
			}
		},
		logInfo: function(msg) {
			if(this.options.debugLevel >= 1) {
				Array.prototype.unshift.apply(arguments, ["info"]);
				_log.apply(this, arguments)
			}
		},
		logWarning: function(msg) {
			Array.prototype.unshift.apply(arguments, ["warn"]);
			_log.apply(this, arguments)
		},
		isInitializing: function() {
			return(this.phase == "init" || this.phase == "postInit")
		},
		isReloading: function() {
			return(this.phase == "init" || this.phase == "postInit") && this.options.persist && this.persistence.cookiesFound
		},
		isUserEvent: function() {
			return(this.phase == "userEvent")
		},
		redraw: function() {
			this.tnRoot.render(false, false)
		},
		renderInvisibleNodes: function() {
			this.tnRoot.render(false, true)
		},
		reload: function(callback) {
			this._load(callback)
		},
		getRoot: function() {
			return this.tnRoot
		},
		enable: function() {
			this.$widget.enable()
		},
		disable: function() {
			this.$widget.disable()
		},
		getNodeByKey: function(key) {
			var el = document.getElementById(this.options.idPrefix + key);
			if(el) {
				return el.dtnode ? el.dtnode : null
			}
			var match = null;
			this.visit(function(node) {
				if(node.data.key == key) {
					match = node;
					return false
				}
			}, true);
			return match
		},
		getActiveNode: function() {
			return this.activeNode
		},
		reactivate: function(setFocus) {
			var node = this.activeNode;
			if(node) {
				this.activeNode = null;
				node.activate();
				if(setFocus) {
					node.focus()
				}
			}
		},
		getSelectedNodes: function(stopOnParents) {
			var nodeList = [];
			this.tnRoot.visit(function(node) {
				if(node.bSelected) {
					nodeList.push(node);
					if(stopOnParents === true) {
						return "skip"
					}
				}
			});
			return nodeList
		},
		activateKey: function(key) {
			var dtnode = (key === null) ? null : this.getNodeByKey(key);
			if(!dtnode) {
				if(this.activeNode) {
					this.activeNode.deactivate()
				}
				this.activeNode = null;
				return null
			}
			dtnode.focus();
			dtnode.activate();
			return dtnode
		},
		loadKeyPath: function(keyPath, callback) {
			var segList = keyPath.split(this.options.keyPathSeparator);
			if(segList[0] === "") {
				segList.shift()
			}
			if(segList[0] == this.tnRoot.data.key) {
				this.logDebug("Removed leading root key.");
				segList.shift()
			}
			keyPath = segList.join(this.options.keyPathSeparator);
			return this.tnRoot._loadKeyPath(keyPath, callback)
		},
		selectKey: function(key, select) {
			var dtnode = this.getNodeByKey(key);
			if(!dtnode) {
				return null
			}
			dtnode.select(select);
			return dtnode
		},
		enableUpdate: function(bEnable) {
			if(this.bEnableUpdate == bEnable) {
				return bEnable
			}
			this.bEnableUpdate = bEnable;
			if(bEnable) {
				this.redraw()
			}
			return !bEnable
		},
		count: function() {
			return this.tnRoot.countChildren()
		},
		visit: function(fn, includeRoot) {
			return this.tnRoot.visit(fn, includeRoot)
		},
		_createFromTag: function(parentTreeNode, $ulParent) {
			var self = this;
			$ulParent.find(">li").each(function() {
				var $li = $(this),
					$liSpan = $li.find(">span:first"),
					$liA = $li.find(">a:first"),
					title, href = null,
					target = null,
					tooltip;
				if($liSpan.length) {
					title = $liSpan.html()
				} else {
					if($liA.length) {
						title = $liA.html();
						href = $liA.attr("href");
						target = $liA.attr("target");
						tooltip = $liA.attr("title")
					} else {
						title = $li.html();
						var iPos = title.search(/<ul/i);
						if(iPos >= 0) {
							title = $.trim(title.substring(0, iPos))
						} else {
							title = $.trim(title)
						}
					}
				}
				var data = {
					title: title,
					tooltip: tooltip,
					isFolder: $li.hasClass("folder"),
					isLazy: $li.hasClass("lazy"),
					expand: $li.hasClass("expanded"),
					select: $li.hasClass("selected"),
					activate: $li.hasClass("active"),
					focus: $li.hasClass("focused"),
					noLink: $li.hasClass("noLink")
				};
				if(href) {
					data.href = href;
					data.target = target
				}
				if($li.attr("title")) {
					data.tooltip = $li.attr("title")
				}
				if($li.attr("id")) {
					data.key = $li.attr("id")
				}
				if($li.attr("data")) {
					var dataAttr = $.trim($li.attr("data"));
					if(dataAttr) {
						if(dataAttr.charAt(0) != "{") {
							dataAttr = "{" + dataAttr + "}"
						}
						try {
							$.extend(data, eval("(" + dataAttr + ")"))
						} catch(e) {
							throw("Error parsing node data: " + e + "\ndata:\n'" + dataAttr + "'")
						}
					}
				}
				var childNode = parentTreeNode.addChild(data);
				var $ul = $li.find(">ul:first");
				if($ul.length) {
					self._createFromTag(childNode, $ul)
				}
			})
		},
		_checkConsistency: function() {},
		_setDndStatus: function(sourceNode, targetNode, helper, hitMode, accept) {
			var $source = sourceNode ? $(sourceNode.span) : null,
				$target = $(targetNode.span);
			if(!this.$dndMarker) {
				this.$dndMarker = $("<div id='dynatree-drop-marker'></div>").hide().css({
					"z-index": 1000
				}).prependTo($(this.divTree).parent())
			}
			if(hitMode === "after" || hitMode === "before" || hitMode === "over") {
				var markerOffset = "0 0";
				switch(hitMode) {
				case "before":
					this.$dndMarker.removeClass("dynatree-drop-after dynatree-drop-over");
					this.$dndMarker.addClass("dynatree-drop-before");
					markerOffset = "0 -8";
					break;
				case "after":
					this.$dndMarker.removeClass("dynatree-drop-before dynatree-drop-over");
					this.$dndMarker.addClass("dynatree-drop-after");
					markerOffset = "0 8";
					break;
				default:
					this.$dndMarker.removeClass("dynatree-drop-after dynatree-drop-before");
					this.$dndMarker.addClass("dynatree-drop-over");
					$target.addClass("dynatree-drop-target");
					markerOffset = "8 0"
				}
				this.$dndMarker.show().position({
					my: "left top",
					at: "left top",
					of: $target,
					offset: markerOffset
				})
			} else {
				$target.removeClass("dynatree-drop-target");
				this.$dndMarker.hide()
			}
			if(hitMode === "after") {
				$target.addClass("dynatree-drop-after")
			} else {
				$target.removeClass("dynatree-drop-after")
			}
			if(hitMode === "before") {
				$target.addClass("dynatree-drop-before")
			} else {
				$target.removeClass("dynatree-drop-before")
			}
			if(accept === true) {
				if($source) {
					$source.addClass("dynatree-drop-accept")
				}
				$target.addClass("dynatree-drop-accept");
				helper.addClass("dynatree-drop-accept")
			} else {
				if($source) {
					$source.removeClass("dynatree-drop-accept")
				}
				$target.removeClass("dynatree-drop-accept");
				helper.removeClass("dynatree-drop-accept")
			}
			if(accept === false) {
				if($source) {
					$source.addClass("dynatree-drop-reject")
				}
				$target.addClass("dynatree-drop-reject");
				helper.addClass("dynatree-drop-reject")
			} else {
				if($source) {
					$source.removeClass("dynatree-drop-reject")
				}
				$target.removeClass("dynatree-drop-reject");
				helper.removeClass("dynatree-drop-reject")
			}
		},
		_onDragEvent: function(eventName, node, otherNode, event, ui, draggable) {
			var opts = this.options,
				dnd = this.options.dnd,
				res = null,
				nodeTag = $(node.span),
				hitMode, enterResponse;
			switch(eventName) {
			case "helper":
				var $helper = $("<div class='dynatree-drag-helper'><span class='dynatree-drag-helper-img' /></div>").append($(event.target).closest("a").clone());
				$("ul.dynatree-container", node.tree.divTree).append($helper);
				$helper.data("dtSourceNode", node);
				res = $helper;
				break;
			case "start":
				if(node.isStatusNode()) {
					res = false
				} else {
					if(dnd.onDragStart) {
						res = dnd.onDragStart(node)
					}
				}
				if(res === false) {
					this.logDebug("tree.onDragStart() cancelled");
					ui.helper.trigger("mouseup");
					ui.helper.hide()
				} else {
					nodeTag.addClass("dynatree-drag-source")
				}
				break;
			case "enter":
				res = dnd.onDragEnter ? dnd.onDragEnter(node, otherNode) : null;
				if(!res) {
					res = false
				} else {
					res = {
						over: ((res === true) || (res === "over") || $.inArray("over", res) >= 0),
						before: ((res === true) || (res === "before") || $.inArray("before", res) >= 0),
						after: ((res === true) || (res === "after") || $.inArray("after", res) >= 0)
					}
				}
				ui.helper.data("enterResponse", res);
				break;
			case "over":
				enterResponse = ui.helper.data("enterResponse");
				hitMode = null;
				if(enterResponse === false) {} else {
					if(typeof enterResponse === "string") {
						hitMode = enterResponse
					} else {
						var nodeOfs = nodeTag.offset();
						var relPos = {
							x: event.pageX - nodeOfs.left,
							y: event.pageY - nodeOfs.top
						};
						var relPos2 = {
							x: relPos.x / nodeTag.width(),
							y: relPos.y / nodeTag.height()
						};
						if(enterResponse.after && relPos2.y > 0.75) {
							hitMode = "after"
						} else {
							if(!enterResponse.over && enterResponse.after && relPos2.y > 0.5) {
								hitMode = "after"
							} else {
								if(enterResponse.before && relPos2.y <= 0.25) {
									hitMode = "before"
								} else {
									if(!enterResponse.over && enterResponse.before && relPos2.y <= 0.5) {
										hitMode = "before"
									} else {
										if(enterResponse.over) {
											hitMode = "over"
										}
									}
								}
							}
						}
						if(dnd.preventVoidMoves) {
							if(node === otherNode) {
								hitMode = null
							} else {
								if(hitMode === "before" && otherNode && node === otherNode.getNextSibling()) {
									hitMode = null
								} else {
									if(hitMode === "after" && otherNode && node === otherNode.getPrevSibling()) {
										hitMode = null
									} else {
										if(hitMode === "over" && otherNode && otherNode.parent === node && otherNode.isLastSibling()) {
											hitMode = null
										}
									}
								}
							}
						}
						ui.helper.data("hitMode", hitMode)
					}
				}
				if(hitMode === "over" && dnd.autoExpandMS && node.hasChildren() !== false && !node.bExpanded) {
					node.scheduleAction("expand", dnd.autoExpandMS)
				}
				if(hitMode && dnd.onDragOver) {
					res = dnd.onDragOver(node, otherNode, hitMode);
					if(res === "over" || res === "before" || res === "after") {
						hitMode = res
					}
				}
				this._setDndStatus(otherNode, node, ui.helper, hitMode, res !== false && hitMode !== null);
				break;
			case "drop":
				var isForbidden = ui.helper.hasClass("dynatree-drop-reject");
				hitMode = ui.helper.data("hitMode");
				if(hitMode && dnd.onDrop && !isForbidden) {
					dnd.onDrop(node, otherNode, hitMode, ui, draggable)
				}
				break;
			case "leave":
				node.scheduleAction("cancel");
				ui.helper.data("enterResponse", null);
				ui.helper.data("hitMode", null);
				this._setDndStatus(otherNode, node, ui.helper, "out", undefined);
				if(dnd.onDragLeave) {
					dnd.onDragLeave(node, otherNode)
				}
				break;
			case "stop":
				nodeTag.removeClass("dynatree-drag-source");
				if(dnd.onDragStop) {
					dnd.onDragStop(node)
				}
				break;
			default:
				throw "Unsupported drag event: " + eventName
			}
			return res
		},
		cancelDrag: function() {
			var dd = $.ui.ddmanager.current;
			if(dd) {
				dd.cancel()
			}
		},
		lastentry: undefined
	};
	$.widget("ui.dynatree", {
		_init: function() {
			if(parseFloat($.ui.version) < 1.8) {
				if(this.options.debugLevel >= 0) {
					_log("warn", "ui.dynatree._init() was called; you should upgrade to jquery.ui.core.js v1.8 or higher.")
				}
				return this._create()
			}
			if(this.options.debugLevel >= 2) {
				_log("debug", "ui.dynatree._init() was called; no current default functionality.")
			}
		},
		_create: function() {
			var opts = this.options;
			if(opts.debugLevel >= 1) {
				logMsg("Dynatree._create(): version='%s', debugLevel=%o.", $.ui.dynatree.version, this.options.debugLevel)
			}
			this.options.event += ".dynatree";
			var divTree = this.element.get(0);
			this.tree = new DynaTree(this);
			this.tree._load();
			this.tree.logDebug("Dynatree._init(): done.")
		},
		bind: function() {
			this.unbind();
			var eventNames = "click.dynatree dblclick.dynatree";
			var timer=null;
			if(this.options.keyboard) {
				eventNames += " keypress.dynatree keydown.dynatree"
			}		
			this.element.bind(eventNames, function(event) {
				var dtnode = $.ui.dynatree.getNode(event.target);
				if(!dtnode) {
					return true
				}
				/*添加disable功能
				 * cxm
				 * */
				if(dtnode.data.disable){
					return;
				} 
				var tree = dtnode.tree;
				var o = tree.options;
				tree.logDebug("event(%s): dtnode: %s", event.type, dtnode);
				var prevPhase = tree.phase;
				tree.phase = "userEvent";					
				try { 
					switch(event.type) {
					case "click":	 
						if(typeof o.onDblClick==="function"&&(dtnode.data.isFolder===true||dtnode.data.isFolder==="true")){						  
	                    	if(dtnode._timer_) {	
								clearTimeout(dtnode._timer_);
								dtnode._timer_ =null;
								//o.onDblClick.call(tree, dtnode, event); 
								
							} else {
								dtnode._timer_=setTimeout(function(){									 
									      dtnode._onClick(event);  
									      
									       dtnode._timer_=null; 
								}, 200);
							}	
	                    	
						} else{
							dtnode._onClick(event);  
						}					
						
						if(typeof o.onClick==="function" ){ o.onClick.call(tree, dtnode, event); }
						break;
						//return (o.onClick && o.onClick.call(tree, dtnode, event) === false) ? false : dtnode._onClick(event);
					case "dblclick":
						
						if(typeof o.onDblClick==="function" ){
							o.onDblClick.call(tree, dtnode, event); 
							}
						dtnode._onDblClick(event);
						break;						
					//	return( && o.onDblClick.call(tree, dtnode, event) === false) ? false : dtnode._onDblClick(event);
					case "keydown":
						return(o.onKeydown && o.onKeydown.call(tree, dtnode, event) === false) ? false : dtnode._onKeydown(event);
					case "keypress":
						return(o.onKeypress && o.onKeypress.call(tree, dtnode, event) === false) ? false : dtnode._onKeypress(event)
					}
				} catch(e) {
					var _ = null;
					tree.logWarning("bind(%o): dtnode: %o, error: %o", event, dtnode, e)
				} finally {
					tree.phase = prevPhase
				}
			});
 
			function __focusHandler(event) {
				event = $.event.fix(event || window.event);
				var dtnode = $.ui.dynatree.getNode(event.target);
				return dtnode ? dtnode._onFocus(event) : false
			}
			var div = this.tree.divTree;
			if(div.addEventListener) {
				div.addEventListener("focus", __focusHandler, true);
				div.addEventListener("blur", __focusHandler, true)
			} else {
				div.onfocusin = div.onfocusout = __focusHandler
			}
	
			
		},
		unbind: function() {
			this.element.unbind(".dynatree")
		},
		enable: function() {
			this.bind();
			$.Widget.prototype.enable.apply(this, arguments)
		},
		disable: function() {
			this.unbind();
			$.Widget.prototype.disable.apply(this, arguments)
		},
		getTree: function() {
			return this.tree
		},
		getRoot: function() {
			return this.tree.getRoot()
		},
		getActiveNode: function() {
			return this.tree.getActiveNode()
		},
		getSelectedNodes: function() {
			return this.tree.getSelectedNodes()
		},
		lastentry: undefined
	});
	if(parseFloat($.ui.version) < 1.8) {
		$.ui.dynatree.getter = "getTree getRoot getActiveNode getSelectedNodes"
	}
	$.ui.dynatree.version = "$Version:$";
	$.ui.dynatree.getNode = function(el) {
		if(el instanceof DynaTreeNode) {
			return el
		}
		if(el.selector !== undefined) {
			el = el[0]
		}
		while(el) {
			if(el.dtnode) {
				return el.dtnode
			}
			el = el.parentNode
		}
		return null
	};
	$.ui.dynatree.getPersistData = DynaTreeStatus._getTreePersistData;
	$.ui.dynatree.prototype.options = {
		title: "Dynatree",
		minExpandLevel: 1,
		imagePath: "",
		children: null,
		initId: null,
		initAjax: null,
		autoFocus: true,
		keyboard: true,
		persist: false,
		autoCollapse: false,
		clickFolderMode: 3,
		activeVisible: true,
		checkbox: false,
		selectMode: 2,
		fx: null,
		 reactive:true,
		noLink: false,
		onClick: null,
		onDblClick: null,
		onKeydown: null,
		onKeypress: null,
		onFocus: null,
		onBlur: null,
		onQueryActivate: null,
		onQuerySelect: null,
		onQueryExpand: null,
		onPostInit: null,
		onActivate: null,
		onDeactivate: null,
		onSelect: null,
		onExpand: null,
		onLazyRead: null,
		onCustomRender: null,
		onCreate: null,
		onRender: null,
		postProcess: null,
		dnd: {
			onDragStart: null,
			onDragStop: null,
			autoExpandMS: 1000,
			preventVoidMoves: true,
			onDragEnter: null,
			onDragOver: null,
			onDrop: null,
			onDragLeave: null
		},
		ajaxDefaults: {
			cache: false,
			timeout: 0,
			dataType: "json"
		},
		strings: {
			loading: "Loading&#8230;",
			loadError: "Load error!"
		},
		generateIds: false,
		idPrefix: "dynatree-id-",
		keyPathSeparator: "/",
		cookieId: "dynatree",
		cookie: {
			expires: null
		},
		classNames: {
			container: "dynatree-container",
			node: "dynatree-node",
			folder: "dynatree-folder",
			empty: "dynatree-empty",
			vline: "dynatree-vline",
			expander: "dynatree-expander",
			connector: "dynatree-connector",
			checkbox: "dynatree-checkbox",
			nodeIcon: "dynatree-icon",
			title: "dynatree-title",
			noConnector: "dynatree-no-connector",
			nodeError: "dynatree-statusnode-error",
			nodeWait: "dynatree-statusnode-wait",
			hidden: "dynatree-hidden",
			combinedExpanderPrefix: "dynatree-exp-",
			combinedIconPrefix: "dynatree-ico-",
			nodeLoading: "dynatree-loading",
			hasChildren: "dynatree-has-children",
			active: "dynatree-active",
			selected: "dynatree-selected",
			expanded: "dynatree-expanded",
			lazy: "dynatree-lazy",
			focused: "dynatree-focused",
			partsel: "dynatree-partsel",
			lastsib: "dynatree-lastsib"
		},
		debugLevel: 0,
		lastentry: undefined
	};
	if(parseFloat($.ui.version) < 1.8) {
		$.ui.dynatree.defaults = $.ui.dynatree.prototype.options
	}
	$.ui.dynatree.nodedatadefaults = {
		title: null,
		key: null,
		isFolder: false,
		isLazy: false,
		tooltip: null,
		href: null,
		icon: false,
		addClass: null,
		noLink: false,
		activate: false,
		focus: false,
		expand: false,
		select: false,
		hideCheckbox: false,
		unselectable: false,
		children: null,
		lastentry: undefined
	};

	function _initDragAndDrop(tree) {
		var dnd = tree.options.dnd || null;
		if(dnd && (dnd.onDragStart || dnd.onDrop)) {
			_registerDnd()
		}
		if(dnd && dnd.onDragStart) {
			tree.$tree.draggable({
				addClasses: false,
				appendTo: "body",
				containment: false,
				delay: 0,
				distance: 4,
				revert: false,
				scroll: true,
				scrollSpeed: 7,
				scrollSensitivity: 10,
				connectToDynatree: true,
				helper: function(event) {
					var sourceNode = $.ui.dynatree.getNode(event.target);
					if(!sourceNode) {
						return "<div></div>"
					}
					return sourceNode.tree._onDragEvent("helper", sourceNode, null, event, null, null)
				},
				start: function(event, ui) {
					var sourceNode = ui.helper.data("dtSourceNode");
					return !!sourceNode
				},
				_last: null
			})
		}
		if(dnd && dnd.onDrop) {
			tree.$tree.droppable({
				addClasses: false,
				tolerance: "intersect",
				greedy: false,
				_last: null
			})
		}
	}
	var didRegisterDnd = false;
	var _registerDnd = function() {
			if(didRegisterDnd) {
				return
			}
			$.ui.plugin.add("draggable", "connectToDynatree", {
				start: function(event, ui) {
					var draggable = $(this).data("draggable"),
						sourceNode = ui.helper.data("dtSourceNode") || null;
					if(sourceNode) {
						draggable.offset.click.top = -2;
						draggable.offset.click.left = +16;
						return sourceNode.tree._onDragEvent("start", sourceNode, null, event, ui, draggable)
					}
				},
				drag: function(event, ui) {
					var draggable = $(this).data("draggable"),
						sourceNode = ui.helper.data("dtSourceNode") || null,
						prevTargetNode = ui.helper.data("dtTargetNode") || null,
						targetNode = $.ui.dynatree.getNode(event.target);
					if(event.target && !targetNode) {
						var isHelper = $(event.target).closest("div.dynatree-drag-helper,#dynatree-drop-marker").length > 0;
						if(isHelper) {
							return
						}
					}
					ui.helper.data("dtTargetNode", targetNode);
					if(prevTargetNode && prevTargetNode !== targetNode) {
						prevTargetNode.tree._onDragEvent("leave", prevTargetNode, sourceNode, event, ui, draggable)
					}
					if(targetNode) {
						if(!targetNode.tree.options.dnd.onDrop) {} else {
							if(targetNode === prevTargetNode) {
								targetNode.tree._onDragEvent("over", targetNode, sourceNode, event, ui, draggable)
							} else {
								targetNode.tree._onDragEvent("enter", targetNode, sourceNode, event, ui, draggable)
							}
						}
					}
				},
				stop: function(event, ui) {
					var draggable = $(this).data("draggable"),
						sourceNode = ui.helper.data("dtSourceNode") || null,
						targetNode = ui.helper.data("dtTargetNode") || null,
						mouseDownEvent = draggable._mouseDownEvent,
						eventType = event.type,
						dropped = (eventType == "mouseup" && event.which == 1);
					if(!dropped) {
						logMsg("Drag was cancelled")
					}
					if(targetNode) {
						if(dropped) {
							targetNode.tree._onDragEvent("drop", targetNode, sourceNode, event, ui, draggable)
						}
						targetNode.tree._onDragEvent("leave", targetNode, sourceNode, event, ui, draggable)
					}
					if(sourceNode) {
						sourceNode.tree._onDragEvent("stop", sourceNode, null, event, ui, draggable)
					}
				}
			});
			didRegisterDnd = true
		}
}(window.comtop.cQuery));

;(function($,win) {
     var C = win.comtop,
         isIE6= C.Browser.isIE6,
         isIEQ=C.Browser.isQM;
	function _overlay() {
        overlayObj.init();
        return  overlayObj;
	}

	var overlayObj= {
        init:function(){
            var dom;
            if (!this.overlayBuild) {
                dom = $(document.createElement("div"));
                dom.addClass("cui_overlay");
                $("body").append(dom);
                this.overlayBuild=true;
                this._dom=dom;
            }
        },
		show : function(opacity) {
			var opa = this._dom.data("opa") || 0;
			opacity = opa + parseInt( opacity * 100 );
            if(isIE6||isIEQ){
                $("html,body").addClass("cui_overlay_ie6");
            }
			this._dom.data("opa", opacity).css("opacity", opacity / 100 ).show();
		},

		hide : function(opacity) {
			var opa = this._dom.data("opa");
			opacity = opa - parseInt( opacity * 100 );
			this._dom.data("opa",  opacity);
			this._dom.css("opacity", opacity / 100 );
			if(opacity <= 0 ) {
				this._dom.hide();
                if(isIE6||isIEQ){
                    $("html,body").removeClass("cui_overlay_ie6");
                }
			}
		}
	};
     if(win.comtop&&win.comtop.UI){
         comtop.UI.Overlay = _overlay;
     }
     win._overlay=_overlay;
})(window.comtop?window.comtop.cQuery:window.jQuery,window);
;(function($, C){
    "use strict";
    var buttonImgPath = '';
    /**
     * @class C.UI.Button
     * @extends C.UI.Base
     * 按钮UI组件<br>
     *
     * 1.通过属性配置能动态生成普通按钮，菜单按钮。<br>
     * 2.按钮能自适应宽度，无需手动设置宽度<br>
     * 3.可灵活的禁用或者启用按钮。<br><br>
     * @author 谭国华
     * @version 1.0
     * @history 2012-10-17 谭国华 新建
     * @demo doc/buttonDoc.html
     */
    C.UI.Button = C.UI.Base.extend({
        options: {
            uitype:'Button',//组件类型，button
            label:'',//按钮显示的文字
            hide:false,//初始化时候是否隐藏,hidden会与标签的默认属性冲突
            disable:false,//初始化时候是否禁用
            icon:'',//按钮的图片
            on_click:null,//点击事件
            menu:null,//下拉菜单
            button_type:"",//菜单的样式
            mark:""
        },
        /**
         * 初始化属性方法
         */
        _init:function(beOptions){
            var opts = this.options;
            this.beOptions = beOptions; //没有格式化前的配置参数
            this.$el = opts.el;
            opts.label = opts.label || this.$el.html() || '按&nbsp;钮';
            opts.menuId = 'button_' + C.guid();
        },
        /**
         * 初始化模板方法
         */
        _create:function(){
            var self = this,opts = self.options;
            this._createDom();

            if(opts.hide){
                this.hide();
            }
            if(opts.disable){
                this.disable(true);
            }
            if(opts.icon){
                this._setIcon(opts.icon);
            }
            if(opts.menu){
                if($.isFunction(opts.menu)){//如果传入的是一个方法就执行方法获得数据
                    opts.menu = opts.menu();
                }
                opts.menu = cui("#" + opts.menuId).menu(opts.menu);//根据传入的数据创建menu对象
                opts.el.children('a').unbind('click');//在menu组件中对于占位符组件默认绑定了click事件，这里解除。
            }
            //绑定点击事件
            opts.el.children('a').on("click.button",function(e){
                self._clickHandler(e,this, e.target);
                e.preventDefault();
            }).on("mouseleave.button",function(e){
                   if(opts.menu){
                       window._cui_button_timer = setTimeout(function(){
                           opts.menu.hide();
                       },100);
                   }
             });
        },
        /**
         * 创建button所有dom元素
         * 并把DOM存入Root属性中
         * @private
         */
        _createDom: function () {
            var opts = this.options,
                $el = this.$el,
                buttonHtml = [];
            //元素结构
            buttonHtml.push('<a class="cui-button ');
            if(C.Browser.isQM){
                buttonHtml.push('QM-cui-button ');
            }
            if(opts.button_type){
                buttonHtml.push(opts.button_type);
            }
            buttonHtml.push('" hidefocus="true" href="#">');
            if(opts.icon){
                buttonHtml.push('<span class="button-icon cui-icon">&nbsp;</span>');
            }
            buttonHtml.push('<span class="button-label">' + opts.label + '</span>');
            if(opts.menu){
                buttonHtml.push('<span class="button-arrow cui-icon">&#xf0dc;</span>');
            }
            buttonHtml.push('</a>');
            $el.html(buttonHtml.join(""));
        },
        /**
         * 换图标
         * @param {string} icon 图片的路径
         */
        _setIcon:function(icon){
            var cIcon = C.icon;
            if (/\./.test(icon)) {
                if(!/\/+/.test(icon)){
                    icon = this._getIconPath('comtop.ui') +'images/button/' + icon;
                }
                this.$el.find('.button-icon').addClass('button-icon-center').html('<img src="' + icon + '" />');
            } else {
                this.$el.find('.button-icon').html(cIcon[icon] || "");
            }
        },
        /**
         * 点击按钮
         * @param {event} e 点击事件
         * @param {dom} eventEl  指向绑定事件的原生DOM对象
         * @param {dom} target 指向事件捕捉到的原生DOM对象
         */
        _clickHandler:function(e, eventEl, target){
            var opts = this.options;
            if(opts.disable || opts.designMode){
                return;
            }
            //e.stopPropagation();
            //显示菜单
            var objMenu = opts.menu;
            objMenu && objMenu.show(this.$el.children('.cui-button'));

            //执行回调函数，为了规避一些方法比创建后声明，这里做了处理
			$(this).trigger("click");
            if(typeof opts.on_click !== 'function'){
                var clickHandle = this._convertTo(this.beOptions.on_click, 'function');
                if(typeof clickHandle === 'function'){
                    clickHandle(e,this, opts.mark);
                }
            }else{
                this.options.on_click && this.options.on_click(e,this, opts.mark);
            }
        },

        /**
         * 获取固定图片的路径,由于js中的图片是参考页面所在位子的，所以要获取js的路径
         * @return iconPath
         */
        _getIconPath:function(keyWord){
            //如果已经存在路径，则不再查找
            if(buttonImgPath){
                return buttonImgPath;
            }
            var $link = $('link');
            var path;
            var reg = new RegExp(keyWord);
            for( var i = 0; i <  $link.length; i++ ){
                path = $link.eq(i).attr('href');
                if( reg.test(path) ){
                    break;
                }
            }
            path = path.substr( 0, path.lastIndexOf('/') );
            buttonImgPath = path = path.substr( 0, path.lastIndexOf('/') + 1 );
            return path;
        },
        /**
         * 动态禁用按钮
         * @param {boolean} flag 是否禁用按钮
         **/
        disable:function(flag){
            if(flag === true){
                //this.options.el 这个元素是框架中定义的。每个继承了都有基类的对象都有，el就是占位符的dom对象
                this.options.disable = true;
                this.options.el.children('.cui-button').addClass('disable-button');
                if(this.options.menu){
                    this.options.menu.hide && this.options.menu.hide();
                }
            }else{
                this.options.disable = false;
                this.options.el.children('.cui-button').removeClass('disable-button');
            }
        },
        /**
         * 动态隐藏按钮
         **/
        hide:function(){
            this.options.el.hide();
            this.options.menu && this.options.menu.hide && this.options.menu.hide();
        },

        /**
         * 修改按钮label
         * @param label {String} 按钮文字
         */
        setLabel:function(label){
            var type = $.type(label),
                opts = this.options;
            if(type === 'number' || type === 'string'){
                opts.label = label;
                opts.el.children('a').children('.button-label').html(label);
            }
        },

        /**
         * 获取label
         * @returns {string} 按钮文字
         */
        getLabel: function(){
            return this.options.label;
        },

        /**
         * 获取button上的menu
         * @returns {CUI} 返回cui组件对象
         */
        getMenu: function(){
            return this.options.menu;
        }
    });
})(window.comtop.cQuery, window.comtop);
;(function(C) {
    "use strict";
    var $ = C.cQuery,
        arrow = {
            "bottom": "&#xf0d7;",
            "top": "&#xf0d8;",
            "left": "&#xf0d9;",
            "right": "&#xf0da;"
        },
        arrowDesc = {
            "top": "&#xf0d7;",
            "bottom": "&#xf0d8;",
            "right": "&#xf0d9;",
            "left": "&#xf0da;"
        };
    C.UI.Borderlayout = C.UI.Base.extend({
        options: {
            uitype: "Borderlayout",
            id: "",
            is_root: true,
            gap: "0px 0px 0px 0px",
            fixed: {
                "top": true,
                "middle": false,
                "left": true,
                "center": false,
                "right": true,
                "bottom": true
            },
            items: [],
            on_sizechange: null
        },
        _init: function() {},
        _create: function() {
            var opt = this.options;
            this.id = C.guid();
            this.el = opt.el;
            if (this.el.parent().prop("tagName") === "BODY") {
                this.body = true;
                this.el.parent().css({
                    "margin": 0,
                    "overflow": "hidden"
                });
            }
            this._setItems();
            this._createDom();
            this._bindHandler();
        },
        /**
         * 设置item属性
         */
        _setItems: function() {
            var items = this.options.items,
                el = this.el,
                items_default = this.items_default = {
                    position: "left",
                    width: -1,
                    height: -1,
                    gap: "0px 0px 0px 0px",
                    resizable: false,
                    min_size: 30,
                    max_size: 200,
                    split_size: 2,
                    is_header: false,
                    header_content: "",
                    header_height: 30,
                    collapsable: false,
                    url: ".",
                    show_expand_icon: false
                };
            if (items.length) {
                return;
            }
            var type_convert = {
                "string": function(a) {
                    return a; },
                "number": C.Tools.fixedNumber,
                "boolean": function(a) {
                    return a === "true";
                }
            };
            this.setattr = true;
            el.children('[position]').each(function() {
                var item = {},
                    att;
                items.push(item);
                for (var v in items_default) {
                    if (items_default.hasOwnProperty(v)) {
                        att = $(this).attr(v);
                        item[v] = att === undefined ?
                            items_default[v] :
                            type_convert[typeof(items_default[v])](att);
                    }
                }
            });
        },
        /**
         * 是否有横向划分布局
         * @param position
         * @returns {boolean}
         * @private
         */
        _isCols: function(position) {
            return position === "left" || position === "center" || position === "right";
        },
        /**
         * 创建dom
         * @private
         */
        _createDom: function() {
            var items = this.options.items,
                el = this.el,
                setattr = this.setattr,
                html = {},
                widths = {},
                heights = {},
                col_height = [],
                fixed = this.options.fixed,
                p_margin = { top: "bottom", bottom: "top", left: "right", right: "left" },
                box_css = this.box_css = {},
                min_size = this.min_size = {},
                max_size = this.max_size = {},
                collapsable = this.collapsable = {},
                items_default = this.items_default,
                ids = {},
                _isCols = this._isCols;

            for (var i = items.length; i--;) {
                var item = items[i],
                    position = item.position;
                item = setattr ? items[i] : $.extend(items_default, items[i]);

                //heights[ (_isCols(position) ? "middle" : position)] = item.height !== -1 ? item.height : "auto";
                if (_isCols(position)) {
                    widths[position] = item.width !== -1 ? item.width : "auto";
                    col_height.push(item.height);
                } else {
                    heights[position] = item.height !== -1 ? item.height : "auto";
                }
                var gap = item.gap.split(" "),
                    len_gap = gap.length;
                switch (len_gap) {
                    case 1:
                        gap[1] = gap[2] = gap[3] = gap[0];
                        break;
                    case 2:
                        gap[2] = gap[0];
                        gap[3] = gap[1];
                        break;
                    case 3:
                        gap[3] = gap[1];
                        break;
                }
                box_css[position] = {
                    "margin-top": parseInt(gap[0], 10),
                    "margin-right": parseInt(gap[1], 10),
                    "margin-bottom": parseInt(gap[2], 10),
                    "margin-left": parseInt(gap[3], 10)
                };
                if (fixed[position]) {
                    min_size[position] = item.min_size;
                    max_size[position] = item.max_size;
                }
                var frag = '<div class="bl_' + position + ' bl_' + position + this.id + '">',
                    move = "",
                    header = "";
                if (position !== "center") {
                    var dir = this._isCols(position) ? "width" : "height";
                    move = '<div class="' + (item.resizable ? 'bl_move' : 'bl_border') + '" style="' + dir + ':' + item.split_size + 'px;">' + ((fixed[position] && item.collapsable && item.show_expand_icon) ? '<a href="javascript:;" class="bl_fold bl_unfold cui-icon">' + arrow[position] + '</a>' : '') + '</div>';
                    box_css[position]["margin-" + p_margin[position]] += item.split_size;
                }
                if (fixed[position] && item.collapsable) {
                    collapsable[position] = item.collapsable;
                }
                if (item.id) {
                    ids[position] = item.id;
                }
                if (item.is_header) {
                    header = '<div class="bl_header" style="height:' + (item.header_height - 1) + 'px;line-height:' + (item.header_height - 1) + 'px;">' + item.header_content + '</div>';
                }
                frag += '<div class="bl_inner" header="' + (item.is_header ? (item.header_height - 1) : 0) + '">' + header + '<div class="bl_box_' + position + ' bl_box' + this.id + '">' + (item.url !== "." ? '<iframe url="' + item.url + '" frameborder="0" class="bl_iframe_page"></iframe>' : '') + '</div></div>';
                html[position] = (frag += move + '</div>');
            }
            var middle = $("<div class='bl_middle bl_middle" + this.id + "'></div>").append(html.left).append(html.center).append(html.right);
            el.append(html.top).append(middle.html() ? middle : "").append(html.bottom).append("<div class='bl_overlay'></div>");
            el.find(".bl_box" + this.id).each(function() {
                var position = this.className.match(/top|left|center|bottom|right/)[0];
                if (ids[position]) {
                    var temp = $("#" + ids[position], el);
                    $(this).wrapInner(temp.css({ "height": "100%" }));
                } else {
                    var temp = el.children('[position=' + position + ']');
                    if (temp.length == 0) {
                        temp = $("<div position='" + position + "'></div>");
                    }
                    $(this).wrapInner(temp.css({ "height": "100%" }));
                }
            });
            el.find(".bl_iframe_page").each(function() {
                $(this).attr("src", $(this).attr("url")).removeAttr("url");
            });
            //middle高度修正
            if (fixed.middle) {
                var max_height = Math.max.apply(null, col_height);
                heights.middle = max_height === -1 ? "auto" : max_height;
            } else {
                heights.middle = "auto";
            }
            this._setLayout(widths, heights);
            this._setBoxLayout();
            //设计模式下
            if (this.options.designMode) {
                el.css("border", "1px solid #aaa");
                if (items.length === 0) {
                    el.height("100%").append("Borderlayout");
                }
            }
        },
        getContent: function(p) {
            return $.grep(this.el.find(".bl_box" + this.id), function(n) {
                var position = n.className.match(/top|left|center|bottom|right/)[0];
                if (p == position) {
                    return true;
                };
            })[0];
        },
        /**
         * 设置布局
         */
        _setLayout: function(widths, heights) {
            var _self = this,
                gap = this.options.gap,
                el = this.el;
            _self.auto_lays = { "width": [], "height": [] };
            var gap_arr = gap.split(" ");
            this.margin_v = parseInt(gap_arr[0], 10) + (gap_arr[2] === undefined ? parseInt(gap_arr[0], 10) : parseInt(gap_arr[2], 10));
            var margin_right = gap_arr[1] === undefined ? parseInt(gap_arr[0], 10) : parseInt(gap_arr[1], 10);
            this.margin_r = margin_right + (gap_arr[3] === undefined ? margin_right : parseInt(gap_arr[3], 10));
            this.scope = {};
            var scope = this.scope = this._getParentLayout();
            widths = this._separateAutoLayout(widths, scope.width, "width");
            heights = this._separateAutoLayout(heights, scope.height, "height");
            this.layout = $.extend(widths, heights);
            this._setPartLayout();
            var client_height = $.client.height(),
                clinet_width = $.client.width();
            $(window).on("resize", function() {
                if (client_height !== $.client.height() || clinet_width !== $.client.width()) {
                    client_height = $.client.height();
                    clinet_width = $.client.width();
                    _self._resizeHandle(true);
                    $(_self).trigger("resize");
                }
            });
            el.addClass("bl_main").css("padding", gap);
        },

        _setPartLayout: function() {
            var layout = this.layout,
                el = this.el;
            for (var v in layout) {
                el.find(".bl_" + v + this.id).eq(0).css((this._isCols(v) ? "width" : "height"), layout[v]);
            }
        },

        _resizeHandle: function(resize) {
            var new_scope = this._getParentLayout();
            this._resetLayout(new_scope, this.scope, resize);
            this.scope.width = new_scope.width;
            this.scope.height = new_scope.height;
        },
        _separateAutoLayout: function(obj, all, dir) {
            var auto_lays = [],
                layout = {},
                fixed = this.options.fixed;
            for (var v in obj) {
                if (obj.hasOwnProperty(v)) {
                    if (!fixed[v]) {
                        this.auto_lays[dir].push(v);
                        auto_lays.push(v);
                        continue;
                    }
                    obj[v] = typeof obj[v] !== "number" ? (dir === "width" ? 500 : 300) : obj[v];
                    all -= obj[v];
                    layout[v] = obj[v];
                }
            }
            for (var i = auto_lays.length; i--;) {
                layout[auto_lays[i]] = all / auto_lays.length;
            }
            return layout;
        },
        /**
         * 获取父元素宽高
         * @returns {{width: (*|number), height: (*|number)}}
         * @private
         */
        _getParentLayout: function() {
            var parent = this.el.parent().css({ "positon": "relative", "overflow": "hidden" }),
                Browser = C.Browser,
                scope = this.scope;
            var layout = document.createElement("div");
            layout.style.width = "100%";
            layout.style.height = "100%";
            layout.style.positon = "absolute";
            layout.style.left = 0;
            layout.style.top = 0;
            parent.append(layout);
            var width = $(layout).width();
            var height = $(layout).height();
            if (height === 0) {
                this.body = true;
            }
            if (this.body) {
                height = Browser.isQM ? (window.innerHeight || document.documentElement.offsetHeight - 4) : $(window).height();
            } else {
                parent.css("overflow", "");
            }
            $(layout).remove();
            parent.css("positon", "");
            return {
                width: scope.fix_width || (width - this.margin_r - 1),
                height: scope.fix_height || (height - this.margin_v)
            };
        },
        /**
         * 设置布局
         * @private
         */
        _setBoxLayout: function() {
            var el = this.el,
                box_height = this.box_height = {},
                box_css = this.box_css;
            for (var v in box_css) {
                if (box_css.hasOwnProperty(v)) {
                    var box = el.find(".bl_box_" + v).eq(0),
                        inner = box.parent();
                    box_height[v] = inner.parent().css("overflow", "hidden").height() - inner.attr("header") - 0 - box_css[v]["margin-top"] - box_css[v]["margin-bottom"];
                    inner.parent().css("overflow", "");
                    inner.css(box_css[v]);
                    box.css("height", box_height[v]);
                }
            }
        },
        /**
         * 重设布局
         * @param new_scope
         * @param old_scope
         * @param resize
         * @private
         */
        _resetLayout: function(new_scope, old_scope, resize) {
            var width = new_scope.width - old_scope.width;
            var height = new_scope.height - old_scope.height;
            if (width) {
                this._setWidthAndHeight(width, "width", resize);
            }
            if (height) {
                this._setWidthAndHeight(height, "height", resize);
            }
        },
        setWidth: function(value) {
            var value2 = C.Browser.isQM ? (value + this.margin_r) : value;
            this.el.css("width", value2);
            this.scope.fix_width = value;
            this._resizeHandle(false);
        },
        setHeight: function(value) {
            var value2 = C.Browser.isQM ? (value + this.margin_v) : value;
            this.el.css("height", value2);
            this.scope.fix_height = value;
            this._resizeHandle(false);
        },
        _setWidthAndHeight: function(value, dir, resize) {
            var el = this.el,
                auto_lays = this.auto_lays[dir],
                lays = auto_lays.length,
                layout = this.layout,
                surplus = value,
                all = 0;
            var i = lays;
            for (; i--;) {
                all += layout[auto_lays[i]];
            }
            for (i = lays; i--;) {
                var change = Math.round(value * layout[auto_lays[i]] / all),
                    lay = el.find(".bl_" + auto_lays[i] + this.id);
                var css = (i === 0 ? surplus : change);
                surplus -= change;
                lay.css(dir, layout[auto_lays[i]] += css);
                if (dir === "height") {
                    this._setBoxHeight(lay, css);
                }
            }
            if (!resize) {
                this._childrenHandler();
            }
        },
        _setBoxHeight: function(lay, change) {
            var box_height = this.box_height;
            lay.find(".bl_box" + this.id).each(function(j, ele) {
                var position = $(ele).attr("class").match(/top|left|center|bottom|right/)[0];
                var height = box_height[position] += change; // = Math.max(box_height[ position ] += change, 0);
                $(ele).css("height", Math.max(height, 0));
                if (!height) {
                    $(ele).hide();
                } else {
                    $(ele).show();
                }
            });
        },
        /**
         * 事件绑定
         */
        _bindHandler: function() {
            var _self = this,
                el = this.el;
            el.find(".bl_top>.bl_move, .bl_bottom>.bl_move").on("mousedown", function(event) {
                _self._drag(event, this, "height");
            });
            el.find(".bl_left>.bl_move, .bl_center>.bl_move, .bl_right>.bl_move").on("mousedown", function(event) {
                _self._drag(event, this, "width");
            });
            el.find(".bl_top .bl_fold, .bl_bottom .bl_fold").on("mousedown", function(event) {
                _self._fold(event, this, "height");
            });
            el.find(".bl_middle .bl_fold").on("mousedown", function(event) {
                _self._fold(event, this, "width");
            });
        },
        /**
         * 拖动大小,非center
         * 要求:未被折叠
         */
        _drag: function(eve, ele, dir) {
            var $ele = $(ele);
            if (!$ele.find(".bl_unfold").length) {
                return;
            }
            eve.stopPropagation();
            eve.preventDefault();
            var x = eve.pageX,
                y = eve.pageY,
                re,
                _self = this,
                layout = this.layout,
                min_size = this.min_size,
                max_size = this.max_size,
                cur = $ele.parent(),
                prev = cur.prev(),
                next = cur.next(),
                middle = cur.parent().not(".bl_main:eq(0)");
            if (prev.length) {
                next = cur;
            } else {
                prev = cur;
            }
            var po_prev = prev.attr("class").match(/top|left|center|bottom|middle|right/)[0],
                po_next = next.attr("class").match(/top|left|center|bottom|middle|right/)[0],
                layout_prev = layout[po_prev],
                layout_next = layout[po_next],
                min_size_prev = min_size[po_prev],
                min_size_next = min_size[po_next],
                max_size_prev = max_size[po_prev],
                max_size_next = max_size[po_next];
            this.el.children(".bl_overlay").show().css("height", this.scope.height).css("cursor", dir === "width" ? "col-resize" : "row-resize").on("mousemove", function(event) {
                event.stopPropagation();
                event.preventDefault();
                var x1 = event.pageX,
                    y1 = event.pageY,
                    change = middle.length ? x1 - x : y1 - y;
                if (change === 0 || change * re > 0) {
                    return;
                }
                re = 0;
                if (max_size_prev !== undefined &&
                    (layout_prev + change > max_size_prev || layout_prev + change < min_size_prev)) {
                    change = change > 0 ? max_size_prev - layout_prev : min_size_prev - layout_prev;
                    re = change;
                }
                if (max_size_next !== undefined &&
                    (layout_next - change > max_size_next || layout_next - change < min_size_next)) {
                    change = change < 0 ? layout_next - max_size_next : layout_next - min_size_next;
                    re = change;
                }
                prev.css(dir, layout_prev += change);
                next.css(dir, layout_next -= change);
                if (dir === "height") {
                    _self._setBoxHeight(prev, change);
                    _self._setBoxHeight(next, -change);
                }
                y = y1;
                x = x1;
                _self._childrenHandler();
            }).on("mouseup mouseout", function(event) {
                event.stopPropagation();
                $(this).hide().off("mousemove");
                (layout[po_prev] = layout[po_prev] === layout_prev ? layout[po_prev] : layout_prev);
                (layout[po_next] = layout[po_next] === layout_next ? layout[po_next] : layout_next);
            });
        },
        /**
         * 折叠
         * 要求:固定,非center
         */
        _fold: function(event, ele, dir) {
            event.stopPropagation();
            if (event.button > 1) {
                return;
            }
            this._foldAction($(ele).parent().parent(), dir);
            $(this).trigger("fold");
        },
        _foldAction: function(ele, dir, flag) {
            var layout = this.layout,
                position = ele.attr("class").match(/top|left|center|bottom|right/)[0],
                size = ele.data("fold"),
                button = ele.children(".bl_move,.bl_border").eq(0).children().eq(0);
            if (this.collapsable[position]) {
                if (flag === true && size !== undefined ||
                    flag === false && size === undefined) {
                    return;
                }
                if (size === undefined) {
                    this._setWidthAndHeight(layout[position], dir);
                    ele.children(".bl_inner").hide();
                    ele.data("fold", layout[position]).css(dir, layout[position] = 0);
                    button.removeClass("bl_unfold").html(arrowDesc[position]);

                    return;
                }
                this._setWidthAndHeight(-size, dir);
                button.addClass("bl_unfold").html(arrow[position]);
                ele.children(".bl_inner").show();
                ele.removeData("fold").css(dir, layout[position] = size).children(".bl_inner");
            }
        },
        _childrenHandler: function() {
            var child_bl = this.el.find('[uitype=Borderlayout]');

            if (child_bl) {
                child_bl.each(function() {
                    window.cui(this)._resizeHandle();
                });
            }
            var on_sizechange = this.options.on_sizechange;
            if (on_sizechange && typeof on_sizechange === "function") {
                on_sizechange();
            }
        },
        setContentURL: function(position, url) {
            var box = this.el.find(".bl_" + position + this.id).eq(0).find(".bl_box" + this.id).eq(0).children().eq(0);
            var iframe = box.find(".bl_iframe_page");
            if (iframe.length) {
                iframe.eq(0).attr("src", url);
            } else {
                box.append('<iframe class="bl_iframe_page" src="' + url + '" frameborder="0"></iframe>');
            }
        },
        setCollapse: function(position, flag) {
            if (this.options.fixed[position]) {
                this._foldAction($(".bl_" + position + this.id), (this._isCols(position) ? "width" : "height"), flag);
            }
        },
        getCollapseState: function(position) {
            return {
                collapsed: !!this.el.find(".bl_" + position + this.id).eq(0).data("fold"),
                contentHeight: this.box_height[position],
                contentWidth: this.el.find(".bl_" + position + this.id).eq(0).width()
            };
        },
        setGap: function(margin) {
            var gap = this.options.gap = margin,
                gap_arr = gap.split(" ");
            this.el.css("padding", gap);
            this.margin_v = parseInt(gap_arr[0], 10) + (gap_arr[2] === undefined ? parseInt(gap_arr[0], 10) : parseInt(gap_arr[2], 10));
            this._resizeHandle();
        },
        setTittle: function(position, title) {
            $(".bl_" + position + this.id).find(".bl_header").eq(0).html(title);
        },
        setCollapsable: function(position, flag) {
            if (this.options.fixed[position]) {
                this.collapsable[position] = flag;
                var fold = $(".bl_" + position).children(".bl_move,.bl_border").eq(0).children(".bl_fold").eq(0);
                if (flag) {
                    fold.show();
                    return;
                }
                fold.hide();
            }
        },
        /**
         * 改变面板的宽高
         */
        changeSize: function(position, size) {
            if (!this.options.fixed[position] || !size) {
                return;
            }
            this.layout[position] = this.layout[position] + size;
            this._setPartLayout();
            this._setBoxLayout();
            this._setWidthAndHeight(-size, this._isCols(position) ? "width" : "height");
        }
    });
})(window.comtop);

/**
 * Calender
 * Date: 2013-01-06
 * Version: 2.1.1
 */
;(function ($, C) {
    var calers = null;//已经打开的日期组件
    C.UI.Calender = C.UI.Base.extend({
        options: {
            uitype: 'Calender',
            name: '',
            //id: '',
            model: 'date',              //功能模式，默认值为 date，值有[date|year|quarter|month|week|all]，
            //分别代表[选择日期|选择年份|选择季度|选择月份|选择周|所有功能]
            //同时也支持自由组合，如'date;year'，则代表只显示日期和年
            isrange: false,             //是否开启范围选择
            trigger: 'click',           //触发事件，默认为click
            value: [],                  //默认日期，存放日期
            defdate: '',                //面板默认日期
            format: '',                 //输出格式，如果model为all，format可为数组 ['yyyy-MM-dd','yyyy年第q季度']
            entering: false,            //文本框是否可以输入
            emptytext: '',              //空文本提示
            readonly: false,            //是否可读
            disable: false,             //是否不可用
            icon: true,                 //是否提供图标点击打开日期组件
            textmode: false,            //是否开启文本模式
            panel: 1,                   //显示供选择的月份版块，默认为1
            panel_increase: true,       //多面板的日期是否是递增的，比如，面板1是2月，则，面板2是3月  TODO此功能还没有完全开发
            zindex: 11000,              //层级控制
            width: '200px',             //输入框宽度
            okbtn: false,               //是否启用okbtn，启用okbtn后，需要点击确定才能让选择的值传至输入框
            clearbtn: true,             //是否启用清空按钮
            mindate: null,              //最小日期
            maxdate: null,              //最大日期
            nocurrent: false,           //最大最小日期，是否包含当天/当月/当年，默认为包含
            iso8601: false,             //是否启用iso8601标准，开启此标准后，每周默认第一天为星期一，每年的第一个星期四所在的周为第一周
            on_before_show: null,       //打开前的回调事件，返回true则继续执行代码，否则则中止
            on_change: null,            //回调函数，在点选日期后执行
            separator: false,           //区间模式下，单日期是否保留间隔符号
            sunday_first: false         //每周的第一天是否是星期天，默认是星期一
        },

        tipPosition: '.C_CR_calInput_bd',  //必须是占位符内的元素

        /**
         * 自定义初始化，数据准备
         * @param {Object} cusOpts 自定义配置参数
         * @private
         */
        _init: function (cusOpts) {
            var self = this,
                opts = self.options;

            if(/GMT/.test(cusOpts.value)){
                cusOpts.value = new Date(cusOpts.value)
            }
            if(cusOpts.value){
                var type = $.type(cusOpts.value);
                switch(type){
                    case 'string':
                        opts.value = /^(?:\{.*\}|\[.*\])$/.test(cusOpts.value) ?
                            $.parseJSON(cusOpts.value.replace(/\\'/g, '#@@#').replace(/'/g, '"').replace(/#@@#/g, '\'')):
                            [cusOpts.value];
                        break;
                    case 'array':
                        opts.value = cusOpts.value;
                        break;
                    default:
                        opts.value = [cusOpts.value];
                }
            }
            if($.type(opts.value)==="string"){
                opts.value=[opts.value]
            }
            if(cusOpts.width){
                if(typeof cusOpts.width === 'string' && /^(\d)+(px|pt|em|PX|PT|EM|%)$/.test(cusOpts.width)){
                    opts.width = cusOpts.width;
                }else {
                    opts.width = cusOpts.width + 'px';
                }
            }
            opts.value = opts.value === null ? [] : opts.value;
            //[最大最小限制规则, 生成的限制日期]
            opts.mindate = [cusOpts.mindate, null];
            opts.maxdate = [cusOpts.maxdate, null];

            //下面的参数不开放配置
            opts.uuid = C.guid();                           //组件内部随机ID
            opts.template = 'calender.html';                //模板名称
            opts.curModel = [];                             //默认当前模型，这四个数据为后面常用，所以存放起来，方便使用
            opts.formatList = {                             //默认格式
                date: 'yyyy-MM-dd',
                year: 'yyyy',
                quarter: 'yyyy-q',
                month: 'yyyy-MM',
                week: 'yyyy-w'
            };
            opts.inputFocusClass = 'C_CR_calInput_focus';   //输入框获焦样式
            opts.inputDisClass = 'C_CR_calInput_rd';        //输入框不可用样式
            opts.inputErrClass = 'C_CR_calInput_err';       //输入框报错样式
            opts.selDate = [];                              //选择的日期
            opts.cache = {                                  //缓存
                yearPop: {},
                selDate: []
            };
            opts.isBuild = false;                           //是否创建组件DOM
            opts.inputEl = null;                            //当前输入框
            opts.tipTxt = null;                             //组件tip文本
            opts.pEl = null;                                //日期层JQ对象
            opts.datePanel = [];                            //日期模式数据
            opts.yearPanel = [];                            //年度模式数据
            opts.monthPanel = [];                           //月份模式数据
            opts.quarterPanel = [];                         //季度模式数据
            opts.timePanel = [];                            //时间模式数据
            opts.weekPanel = [];
            opts.yearPop = {                                //YMer条数据
                forDate: [],
                forYear: [],
                forQuarter: [],
                forMonth: [],
                forWeek: []
            };
            opts.selIndex = 0;                              //当前活动输入框索引号
            opts.activePop = null;                          //当前活动的POP层，用于关闭
            opts.isChangeTag = false;                       //是否执行了标签切换
            opts.tags = [];                                 //显示model
            opts.maskCL = '';
            opts.dblclickTime = null;                       //用于判断dblclick
            opts.defaultDate;                               //面板默认日期位置
            self.$tmp = {};                                 //装放jquery对象

            //根据设置，是否指定默认日期位置
            if(opts.defdate !== ''){
                self._analyzeDefDate();
            }


            //处理model种类
            var tags = opts.model.split(';');
            if(tags.length === 1){
                opts.tags = tags[0] === 'all' ? ['date', 'year', 'quarter', 'month', 'week'] : tags;
            }else{
                opts.tags = tags;
                opts.model = 'all';
            }

            //生成当前功能模式
            var curModel = opts.tags[0];

            opts.curModel = [
                curModel, 'for' + curModel.charAt(0).toUpperCase() + curModel.substring(1),
                curModel + 'Frame', curModel + 'Panel'
            ];

            //初始化格式
            if(opts.model === 'all' && opts.format){
                opts.format = $.parseJSON(opts.format.replace(/\\'/g, '#@@#').replace(/'/g, '"').replace(/#@@#/g, '\''));
                opts.formatList = $.extend(opts.formatList, opts.format);
                opts.format = opts.formatList[opts.curModel[0]];
            }else if(!opts.format){
                opts.format = opts.formatList[opts.curModel[0]];
            }else{
                opts.formatList[opts.curModel[0]] = opts.format;
            }
            //如果格式只是输出时分秒，则确定按钮是必须要显示的
            opts.okbtn = /[y|M|q|w|d]/.test(opts.format) ? opts.okbtn : true;
        },

        /**
         * 自定义操作
         * @private
         */
        _create: function () {
            var self = this,
                opts = self.options;

            opts.inputEl = opts.el.find(':text').bind('click', function(){
                if(opts.readonly || opts.designMode){
                    return;
                }
                $(this).parents('.C_CR_calInput_bd').addClass(opts.inputFocusClass);
                self.show();

                //获焦清空提示文字
                self._setEmptyText(false);

                //获焦时去掉错误认证信息
                self.onValid();
            }).bind('mouseup.calender', function(e){
                e.stopPropagation();
            });

            //获取默认日期
            self._getDefault();
            self.setValue($.extend(true, [], opts.selDate), true);

            //查找空日期的位置
            for(var i = 0; i < opts.cache.selDate.length; i ++){
                if(opts.cache.selDate[i] === null){
                    opts.selIndex = i;
                    break;
                }
            }

            //不可读或不可用处理
            if(opts.disable || opts.readonly){
                opts.el.children('.C_CR_calInput_bd').addClass(opts.inputDisClass);
            }
            if(!opts.entering || opts.disable || opts.readonly){
                if(opts.disable){
                    opts.inputEl.attr('disabled', true);
                }
                if(opts.readonly || !opts.entering){
                    opts.inputEl.attr('readonly', true);
                }
            }

            //如果允许输入
            if(opts.entering){
                self._enter();
                opts.inputEl.on("keyup.calender",function(e){
                    self.hide();
                    if(e.which===13){
                        opts.inputEl.blur(); 
                    }
                });
            }
        },

        /**
         * 手动输入格式化
         * @private
         */
        _enter: function(){
            var self = this,
                opts = self.options,
                format = opts.format,
                fullFormat = opts.format,
                repFormat = function(fm, st){
                    var reg = [/y+/,/M+/,/d+/,/h+/,/m+/,/s+/,/w+/,/q+/];
                    for(var i = 0; i < reg.length; i ++){
                        fm = fm.replace(reg[i], st[i]);
                    }
                    return fm;
                };

            format = repFormat(format, ['9999', '1x', '3z', '2r', '59', '59', '5k', 'q']);
            fullFormat = repFormat(fullFormat, ['yyyy', 'MM', 'dd', 'hh', 'mm', 'ss', 'ww', 'q']);

            opts.inputEl.data('fmOpts', {
                format: opts.format,
                fullFormat: fullFormat,
                isRange: opts.isrange,
                okBtn: opts.okbtn,
                separator: opts.separator
            }).unmaskCL().maskCL(opts.isrange ? format + '~' + format : format);
            
            opts.maskCL = opts.isrange ? format + '~' + format : format;
        },

        /**
         * 解析默认日期位置，用于定制日期面板初始化显示的日期位置
         * @private
         */
        _analyzeDefDate: function(){
            var y, M, d, h, m, s, _today = new Date(),
                self = this, opts = self.options;
            y = opts.defdate.match(/y:(\d*)/);
            M = opts.defdate.match(/M:(\d*)/);
            d = opts.defdate.match(/d:(\d*)/);
            h = opts.defdate.match(/h:(\d*)/);
            m = opts.defdate.match(/m:(\d*)/);
            s = opts.defdate.match(/s:(\d*)/);

            opts.defaultDate = new Date(
                y ? y[1] - 0 : _today.getFullYear(),
                M ? M[1] - 0 - 1 : _today.getMonth(),
                d ? d[1] - 0 : 1,
                h ? h[1] - 0 : _today.getHours(),
                m ? m[1] - 0 : _today.getMinutes(),
                s ? s[1] - 0 : _today.getSeconds()
            );
        },

        /**
         * 获取默认数据，默认数据的来源有两个：options和input
         * @private
         */
        _getDefault: function () {
            var self = this,
                opts = self.options,
                def = [];

            if(opts.value.length !== 0){
                //获取options的默认值
                def = opts.value;
            }else{
                //获取input的默认值
                if(opts.isrange){
                    def = $.trim(opts.inputEl.eq(0).val()).split('~');
                    def = !def.join('') ? [null, null] : def;
                }else{
                    $.each(opts.inputEl, function(i, inp){
                        def.push($.trim($(this).val()));
                    });
                }
            }
            opts.selDate = _contrastDate(_analysis(def, opts.format, opts.iso8601, opts.sunday_first));
        },

        /**
         * 创建数据（DOM界面的数据都来自这里）
         * @param {Array} dataSource
         * @param {Number} index
         * @private
         */
        _buildData: function (dataSource, index) {
            var self = this,
                opts = self.options,
                date, m, tmpTime, i, tmpYear, reLoadYM;

            if(opts.isBuild){
                if(index === undefined){
                    opts[opts.curModel[3]] = [];
                    opts.yearPop[opts.curModel[1]] = [];
                }else{
                    //判断是否需要更新年弹出选择面板的数据
                    reLoadYM = !self._isReady('yearPop', index);
                    opts[opts.curModel[3]][index] = [];
                    if(reLoadYM){
                        opts.yearPop[opts.curModel[1]][index] = [];
                    }
                }
            }

            //根据面板数量创建对应的数据，供创建DOM结构使用
            if((!opts.isBuild && opts.model === 'all') || opts.curModel[0] === 'date'){
                if(index === undefined){
                    for(i = 0; i < opts.panel; i ++){
                        date = dataSource[i] ?
                            new Date(dataSource[i][0], dataSource[i][1], 1):
                            new Date(date.getFullYear(), opts.panel_increase ? date.getMonth() + 1 : date.getMonth(), 1);
                        opts.yearPop.forDate.push(_getPanelYear(date.getFullYear() - 4, 12));
                        opts.datePanel.push(_getPanelDate.call(self, date));
                    }
                }else{
                    date = new Date(dataSource[0][0], dataSource[0][1], 1);
                    reLoadYM && (opts.yearPop.forDate[index] = _getPanelYear(date.getFullYear() - 4, 12));
                    opts.datePanel[index] = _getPanelDate.call(self, date);
                }
            }
            if((!opts.isBuild && opts.model === 'all') || opts.curModel[0] === 'year'){
                if(index === undefined){
                    for(i = 0; i < opts.panel; i ++){
                        tmpYear = dataSource[i] ? dataSource[i][0] :
                        opts.yearPanel[i - 1].data[11] + 14;
                        opts.yearPop.forYear.push(_getPanelYear(tmpYear - 4, 12));
                        opts.yearPanel.push({year:tmpYear, month:null, data:_getPanelYear(tmpYear - 7, 18)});
                    }
                }else{
                    tmpYear = dataSource[0][0];
                    reLoadYM && (opts.yearPop.forYear[index] = _getPanelYear(tmpYear - 4, 12));
                    opts.yearPanel[index] = {year:tmpYear, month:null, data:_getPanelYear(tmpYear - 7, 18)};
                }
            }
            if((!opts.isBuild && opts.model === 'all') || opts.curModel[0] === 'month'){
                if(index === undefined){
                    for(i = 0; i < opts.panel; i ++){
                        tmpYear = dataSource[i] ? dataSource[i][0] :
                        opts.monthPanel[i - 1].year + 1;
                        opts.yearPop.forMonth.push(_getPanelYear(tmpYear - 4, 12));
                        opts.monthPanel.push({year:tmpYear, month:null, data:_getPanelMonth()});
                    }
                }else{
                    tmpYear = dataSource[0][0];
                    reLoadYM && (opts.yearPop.forMonth[index] = _getPanelYear(tmpYear - 4, 12));
                    opts.monthPanel[index] = {year:tmpYear, month:null, data:_getPanelMonth()};
                }
            }
            if((!opts.isBuild && opts.model === 'all') || opts.curModel[0] === 'quarter'){
                if(index === undefined){
                    for(i = 0; i < opts.panel; i ++){
                        tmpYear = dataSource[i] ? dataSource[i][0] :
                        opts.quarterPanel[i - 1].year + 1;
                        opts.yearPop.forQuarter.push(_getPanelYear(tmpYear - 4, 12));
                        opts.quarterPanel.push({year:tmpYear, month:null, quarter: [1,2,3,4]});
                    }
                }else{
                    tmpYear = dataSource[0][0];
                    reLoadYM && (opts.yearPop.forQuarter[index] = _getPanelYear(tmpYear - 4, 12));
                    opts.quarterPanel[index] = {year:tmpYear, month:null, quarter: [1,2,3,4]};
                }
            }
            if((!opts.isBuild && opts.model === 'all') || opts.curModel[0] === 'date'){
                var len;
                opts.timePanel = [];
                len = opts.isrange ? 2 :1;
                for(m = 0; m < len; m ++){
                    tmpTime = opts.cache.selDate[m] ? opts.cache.selDate[m] : 
                        _getDateArray(opts.defaultDate || new Date(), opts.format, opts.iso8601, opts.sunday_first);
                    opts.timePanel.push([tmpTime[5], tmpTime[6], tmpTime[7]]);
                }
            }
            if((!opts.isBuild && opts.model === 'all') || opts.curModel[0] === 'week'){
                var weekData;
                if(index === undefined){
                    for(i = 0; i < opts.panel; i ++){
                        if(dataSource[i]){
                            weekData = C.Date.getOnWeek(new Date(dataSource[i][0],dataSource[i][1] > 0 ? dataSource[i][1] : 1,
                                dataSource[i][2] || 1), opts.iso8601, opts.sunday_first);
                        }
                        tmpYear = dataSource[i] ? weekData.year : opts.weekPanel[i - 1].year + 1;
                        opts.yearPop.forWeek.push(_getPanelYear(tmpYear - 4, 12));
                        opts.weekPanel.push({year:tmpYear, month:null, data:_getPanelWeek(tmpYear,opts.iso8601,opts.sunday_first)});
                    }
                }else{
                    tmpYear = dataSource[0][0];
                    reLoadYM && (opts.yearPop.forWeek[index] = _getPanelYear(tmpYear - 4, 12));
                    opts.weekPanel[index] = {year:tmpYear, month:null, data:_getPanelWeek(tmpYear,opts.iso8601,opts.sunday_first)};
                }
            }
            //缓存最初的yearPop数据
            opts.cache.yearPop = $.extend(true, {},opts.yearPop);
        },

        /**
         * 更新/创建数据参数计算
         * @return {Array}
         * @private
         */
        _buildUpdateDate: function(){
            var self = this,
                opts = self.options,
                min, max,
                y, M, d, h, m, s,
                curDate = opts.defaultDate || new Date(), dataList = [], i, data = [];

            //绕过最大最小区域
            if(opts.model === 'date'){
                min = _getLimitDate.call(self, 'mindate');
                max = _getLimitDate.call(self, 'maxdate');
                min = opts.mindate[0] !== undefined ? (min === null ? 0 : min) : 0;
                curDate = min === 0 ? curDate : min - curDate > 0 ? min : curDate;
                max = opts.maxdate[0] !== undefined ? (max === null ? 0 : max) : 0;
                curDate = max === 0 ? curDate : max - curDate < 0 ? max : curDate;
                curDate = curDate || new Date();
            }
            curDate = _getDateArray(curDate, opts.format, opts.iso8601, opts.sunday_first);
            for(i = 0; i < opts.cache.selDate.length; i ++){
                if(i === 0){
                    data.push(opts.cache.selDate[i] ? opts.cache.selDate[i] : curDate);
                    dataList.push([data[i][2], data[i][3], data[i][4]]);
                }else{
                    if(opts.cache.selDate[i]){
                        data.push(opts.cache.selDate[i]);
                        dataList.push([data[i][2], data[i][3], data[i][4]]);
                    }
                }
            }
            return dataList;
        },

        /**
         * 创建框架DOM结构
         * @private
         */
        _draw: function () {
            var self = this,
                opts = self.options;
            //创建组件数据
            self._buildData(self._buildUpdateDate());
            self._buildTemplate('body', 'calFrame', $.extend(true,{},opts), true);  //32-48mm
            opts.pEl = $('#C_CR_' + opts.uuid);
            //此事件代码解决angular路由转发问题，对于其他没有影响，主要是a标签中没有赋予过事件
            opts.pEl.on("click","a",function(e){
                e.preventDefault();
            })
        },

        /**
         * 创建/更新年子面板
         * @param {String} model 更新的模型名称数组
         * @param {Number} index YMer索引号
         * @private
         */
        _drawYearPop: function(model, index){
            var self = this,
                opts = self.options,
                data,
                $yearPops = opts.pEl.children('.C_CR_YM_wrap').find('div.C_CR_YMer_pop_y');
            //生成数据名
            data = opts.yearPop[model] || [];
            if(typeof index !== 'undefined'){
                self._buildTemplate($yearPops.eq(index), 'yearPopFrame', data[index]);
            }else{
                for(var i = 0; i < data.length; i ++){
                    self._buildTemplate($yearPops.eq(i), 'yearPopFrame', data[i]);
                }
            }
        },

        //====================================================事件处理================================================

        /**
         * 标签切换事件处理
         * @param e
         * @param eventEl
         * @param target
         * @private
         */
        _tagEventHandle: function (e, eventEl, target){
            e.stopPropagation();
            var self = this,
                opts = self.options,
                nodeName = target.nodeName;
            _domPopHandle.call(self);
            if(nodeName === 'A'){
                var $tg = $(target),
                    curModel = $tg.attr('val');
                $tg.parents('ul').find('a').removeClass('C_CR_Tag_cur');
                $tg.addClass('C_CR_Tag_cur');
                opts.curModel = [
                    curModel, 'for' + curModel.charAt(0).toUpperCase() + curModel.substring(1),
                    curModel + 'Frame', curModel + 'Panel'
                ];
                //切换时清空选择
                opts.cache.selDate = [];
                opts.isChangeTag = true;
                self._selectTag(opts.curModel);
            }
        },

        /**
         * binder事件处理
         * @param e
         * @param eventEl
         * @param target
         * @private
         */
        _binderHandler: function (e, eventEl, target){  //328mm
            e.stopPropagation();
            var self = this,
                opts = self.options,
                nodeName = target.nodeName;
            if(opts.readonly || opts.disable){
                return;
            }

            //多次点击同一个触发点，只执行一次show
            if (opts.el.attr('isShow') === 'true') {
                return;
            }
            opts.el.attr('isShow', 'true');

            if(nodeName !== 'INPUT'){
                opts.inputEl.click();
            }
        },

        /**
         * 日期选择部件事件处理
         * @param e
         * @param eventEl
         * @param target
         * @private
         */
        _mainEventHandle: function (e, eventEl, target) {
            e.stopPropagation();
            var self = this,
                opts = self.options,
                $tg = $(target),
                nodeName = $tg[0].nodeName;
            _domPopHandle.call(self);
            if (nodeName !== 'A') {
                return;
            }
            var val = $tg.attr('val').split('|');
            for(var i = 0; i < val.length; i ++){
                val[i] = + val[i];
            }

            if(!self.options.dblclickTime){
                self._cachingDate(val, $tg);
            }
            //如果是带确定按钮的，则支持双击事件
            if(opts.okbtn){
                if(self.options.dblclickTime){
                    clearTimeout(self.options.dblclickTime);
                    self.options.dblclickTime = null;
                    self._export();
                }else{
                    self.options.dblclickTime = setTimeout(function(){
                        self.options.dblclickTime = null;
                    }, 300);
                }
            }
        },

        /**
         * 年月选择部件事件处理
         * @param e
         * @param eventEl
         * @param target
         * @private
         */
        _ymEventHandle: function (e, eventEl, target) {
            e.stopPropagation();
            var self = this,
                opts = self.options,
                $tg = $(target),
                nodeName = $tg[0].nodeName,
                val, popIndex;
            //根据target的不同引流至不同的处理点
            if (nodeName === 'A') {
                val = $tg.attr('val');
                popIndex = + $tg.parents('.C_CR_YMer_item:eq(0)').attr('popIndex');
                switch (val) {
                    case 'prevMonth':
                        _domPopHandle.call(self);
                        opts.curModel[0] === 'date' ?
                            self._selectMonthYear('month', null, null, -1):
                            opts.curModel[0] === 'year' ? self._selectMonthYear('year', null, null, -18) :
                                self._selectMonthYear('year', null, null, -1);
                        break;
                    case 'nextMonth':
                        _domPopHandle.call(self);
                        opts.curModel[0] === 'date' ?
                            self._selectMonthYear('month', null, null, 1) :
                            opts.curModel[0] === 'year' ? self._selectMonthYear('year', null, null, 18) :
                                self._selectMonthYear('year', null, null, 1);
                        break;
                    case 'prevPop':
                        self._changeYear(-12, popIndex);
                        break;
                    case 'nextPop':
                        self._changeYear(12, popIndex);
                        break;
                    case 'closePop':
                        _domPopHandle.call(self);
                        break;
                    default:
                        self._closeYMerPop(true);
                        val = Number(val);
                        if ($tg.attr('panel') === 'y') {
                            self._selectMonthYear('year',val, popIndex);
                        }else{
                            self._selectMonthYear('month',val, popIndex);
                        }
                }
            }else if (nodeName === 'INPUT' || nodeName === 'SPAN') {
                $tg = $tg.children('input').size() ? $tg.children('input') : $tg;
                self._closeYMerPop(false, $tg);
                $tg.blur();
            } else{
                _domPopHandle.call(self);
            }
        },

        /**
         * 时间部件事件处理
         * @param e
         * @param eventEl
         * @param target
         * @private
         */
        _timerEventHandle: function (e, eventEl, target) {
            e.stopPropagation();
            var self = this,
                $tg = $(target),
                nodeName = $tg[0].nodeName,
                val, $pop, popType, $timePop;

            if (nodeName === 'SPAN') {
                val = $tg.attr('val');
                switch (val) {
                    case 'up':
                        self._selectTime($tg, 1);
                        break;
                    case 'down':
                        self._selectTime($tg, -1);
                        break;
                }
                _domPopHandle.call(self);
            } else if (nodeName === 'INPUT') {
                //$tg.blur();
                $tg.eq(0).select();
                switch ($tg.attr('val')){
                    case 'h':
                        $pop = self.$tmp.$timeHour;
                        break;
                    case 'm':
                        $pop = self.$tmp.$timeMin;
                        break;
                    case 's':
                        $pop = self.$tmp.$timeSecond;
                }
                self.$tmp.curTimeTxt = $tg;
                _domPopHandle.call(self, $pop);
            } else if (nodeName === 'A') {
                //如果点击的是上下时间的操作
                if($tg.attr('class') === 'C_CR_Timer_up' || $tg.attr('class') === 'C_CR_Timer_down'){
                    $tg = $tg.children('span');
                    val = $tg.attr('val');
                    switch (val) {
                        case 'up':
                            self._selectTime($tg, 1);
                            break;
                        case 'down':
                            self._selectTime($tg, -1);
                            break;
                    }
                    _domPopHandle.call(self);
                    return;
                }
                //下面是点击面板时的操作
                val = $tg.attr('val');
                if(self.$tmp.curTimeTxt){
                    self.$tmp.curTimeTxt.val(val < 10 ? '0' + val : val);
                }
                _domPopHandle.call(self);
            }
        },

        /**
         * 按钮部件事件处理
         * @param e
         * @param eventEl
         * @param target
         * @private
         */
        _btnEventHandle: function(e, eventEl, target){
            e.stopPropagation();
            var self = this,
                opts = self.options,
                $tg = $(target),
                val = $tg.attr('val'),
                tmpDateArray;
            _domPopHandle.call(self);
            switch (val){
                case 'close':
                    self.hide();
                    break;
                case 'cur':
                    var now = new Date(),
                        dateArray = _getDateArray(now, opts.format, opts.iso8601, opts.sunday_first);
                    if(opts.curModel[0] === 'quarter'){
                        self._cachingDate([dateArray[2], Math.floor(dateArray[3] / 3) + 1, 1], null, 'btn');
                    }else if(opts.curModel[0] === 'week'){
                        self._cachingDate([dateArray[2], C.Date.getOnWeek(new Date(dateArray[0]), opts.iso8601, opts.sunday_first).week], null, 'btn');
                    }else{
                        self._cachingDate([dateArray[2], dateArray[3], dateArray[4]], null, 'btn');
                    }
                    break;
                case 'clear':
                    _domFocusHandle.call(self, null, 'clear', null);
                    opts.selIndex = 0;
                    self.setValue(opts.isrange ? ['',''] : ['']);
                    if(opts.entering && typeof opts.inputEl.data('fmOpts').clearBuffer === 'function'){
                        opts.inputEl.data('fmOpts').clearBuffer(0, opts.inputEl.data('fmOpts').buffer.length);
                    }
                    //清空时，将面板日期返回defdate或当前时间
                    self._update(self._buildUpdateDate());
                    break;
                case 'ok':
                    //如果只输出时分秒，按下确定时，将输出当天选定的时间
                    //if(opts.curModel[0] === 'date'){
                        tmpDateArray = _getDateArray(new Date, opts.format, opts.iso8601, opts.sunday_first);
                        opts.cache.selDate = !!opts.cache.selDate[0] ? opts.cache.selDate :
                            opts.isrange ? [tmpDateArray, tmpDateArray] : [tmpDateArray];
                    //}
                    self._export();
            }
        },

        _bindTimerEvent: function(){
            var self = this,
                opts = self.options;
            opts.pEl.children('.C_CR_Timer_box').find('input').on("input propertychange", function(e){
                var $t = $(this),
                    val = $.trim($t.val());
                if(!/^[0-9]*$/.test(val)){
                    $t.val(val.substr(0, val.length - 1));
                }
                switch ($t.attr('name')){
                    case 'timer_h':
                        if(val - 0 >= 24){
                            $t.val(val.substr(0, val.length - 1));
                        }
                        break;
                    default :
                        if(val - 0 >= 60){
                            $t.val(val.substr(0, val.length - 1));
                        }
                }
            });
        },

        //====================================================功能====================================================
        /**
         * 标签切换
         * @param {Array} model 模型名称数组
         * @private
         */
        _selectTag: function(model) {
            var self = this,
                opts = self.options,
                $main = opts.pEl.children('.C_CR_main_wrap'),
                $load = $main.children('.C_CR_main_loading'),
                $tgWrap = $main.children('.C_CR_main_panel[val='+ model[0] +']'),
                $siblings = $tgWrap.siblings(),
                isBuild = $tgWrap.attr('isBuild') === 'true',
                timeCtrl = [];
            opts.cache.selDate = $.extend(true, [], opts.selDate);
            opts.format = opts.formatList[model[0]];

            //隐藏所有主面板
            $siblings.hide();
            //显示加载等待提示
            $load.show();
            //控制年月选择工具条功能
            if(model[0] !== 'all' && model[0] !== 'date'){
                _domYMerHandle(opts.pEl, 'disMonth');   //年/月/季度模式下月份选择禁用
            }else{
                _domYMerHandle(opts.pEl, 'undo');
            }
            //主面板切换
            if(( !isBuild)){
                self._buildTemplate($tgWrap, model[2], opts);  //16~32MM
                $tgWrap.attr('isBuild', 'true');
            }else if(isBuild && !self._isReady('mainPanel')){
                self._update(self._buildUpdateDate());
            }else{
                _domFocusHandle.call(self, null, 'clear', null);
            }
            $load.hide();
            $tgWrap.show();
            //控制按钮区
            _domBtnHandle.call(self);
            //加载时间区
            if(!opts.isBuild){
                //生成时间
                if(opts.model === 'all' || (model[0] === 'date' && /[h|m|s]/.test(opts.format))){
                    self._buildTemplate(opts.pEl.children('.C_CR_Timer_box'), 'timeFrame', opts);
                    _domTimeInit.call(self);
                    self._bindTimerEvent();
                }
            }
            //时间控制
            _domTimeHandle.call(self);
            if(opts.model === 'all'){
                _domSetWidth(opts);
                _domResetPos(opts);
            }
            //更新YMer的Label
            self._setYM(model[0]);
            self._scanFocus();
            //关闭所有POP
            opts.isBuild && _domPopHandle.call(self);

            //如果允许输入
            if(opts.entering && opts.isChangeTag){
                self._clear();
                self._enter();
                opts.isChangeTag = false;
            }
        },

        /**
         * 切换年/月
         * @param {String} type 类型，是切换年或月'month'/'year'
         * @param {Number} source 原值
         * @param {Number} index 操作对象索引号
         * @param {Number} step 更新幅度
         * @private
         */
        _selectMonthYear: function(type, source, index, step){
            var self = this,
                opts = self.options,
                data, $YMer,
                dataList = [],
                tyIndex = type === 'month' ? 1 : 0;
            $YMer = $('table.C_CR_YMer', opts.pEl);
            if(typeof index !== 'undefined' && index != null){
                getDate(index);
            }else{
                for(var i = 0; i < $YMer.length; i ++){
                    getDate(i);
                }
            }
            self._update(dataList ,index);
            function getDate(i){
                data = $YMer.eq(i).attr('val').split('|');
                data[tyIndex] = typeof step !== 'undefined' ? Number(data[tyIndex]) + step : source;
                dataList.push([Number(data[0]), Number(data[1])]);
            }
        },

        /**
         * 时间设定
         * @param {jQuery} $tg 点击JQ对象
         * @param {Number} step 更新幅度
         * @private
         */
        _selectTime: function($tg, step){
            var val, $opWrap, $input, sumStep;
            $opWrap = $tg.parents('.C_CR_Timer_op').eq(0);
            $input = $opWrap.prev().children('input');
            val = + $.trim($input.val());
            sumStep = val + step;

            if($input.attr('name') === 'timer_h'){
                if(sumStep > 23){
                    sumStep = 0;
                }else if(sumStep < 0){
                    sumStep = 23;
                }
            }else{
                if(sumStep > 59){
                    sumStep = 0;
                }else if(sumStep < 0){
                    sumStep = 59;
                }
            }

            sumStep = String(sumStep);

            $input.val(sumStep.length === 1 ? (0 + sumStep) : sumStep);
        },

        /**
         * 选择日期
         * @param {Array} val 值
         * @param {jQuery} $tg JQ对象
         * @private
         */
        _cachingDate: function (val, $tg, eventSource) {
            var self = this,
                opts = self.options,
                time = null,
                date = null,
                selDate = null;

            if (!opts.isrange) {
                self._clear(opts.okbtn);
            } else {
                (opts.selIndex === 2 || opts.selIndex === 0) && self._clear(opts.okbtn);
            }
            switch (opts.curModel[0]){
                case 'date':
                    time = self._getTime(opts.selIndex);
                    date = new Date(val[0], val[1], val[2], time[0], time[1], time[2]);
                    break;
                case 'year':
                    date = new Date(val[0], 0, 1);
                    break;
                case 'month':
                    date = new Date(val[0], val[1], 1);
                    break;
                case 'quarter':
                    date = new Date(val[0], (val[1] - 1) * 3, 1);
                    break;
                case 'week':
                    date = C.Date.getWeekRange(val[0], val[1], opts.iso8601, opts.sunday_first)[0];
            }
            selDate = _getDateArray(date, opts.format, opts.iso8601, opts.sunday_first);
            opts.cache.selDate[opts.selIndex] = selDate;
            if(opts.isrange){
                opts.selIndex = 0;
                for(var i = 0; i < opts.cache.selDate.length; i ++){
                    if(opts.cache.selDate[i] === null){
                        opts.selIndex = i;
                        break;
                    }else{
                        opts.selIndex ++;
                    }
                }
            }else{
                opts.selIndex ++;
            }

            //获焦
            self._focus([date], 'SEL', $tg);

            //如果开启时分秒，不管okbtn是否为true，都直接选择到时间
            if(!opts.okbtn || (!/[h|m|s]/.test(opts.format) && eventSource === 'btn' && opts.isrange === false) || eventSource === 'dblclick'){
                self._export();
            }
        },

        /**
         * YMer年份板块更换
         * @param {Number} range 切换范围，如，12，是指一次更换12年
         * @param {Number} index YMer索引号
         * @private
         */
        _changeYear: function (range, index) {
            var self = this,
                opts = self.options,
                yearPop = opts.yearPop[opts.curModel[1]],
                tmpYear;
            if(range > 0){
                tmpYear = _getPanelYear(yearPop[index][yearPop[index].length - 1] + 1, range);
            }else if(range < 0){
                tmpYear = _getPanelYear(yearPop[index][0] - 1, range);
            }
            opts.yearPop[opts.curModel[1]][index] = tmpYear;
            self._drawYearPop(opts.curModel[1], index);
        },

        /**
         * 获取时间
         * @param {Number} index 索引
         * @return {Array}
         * @private
         */
        _getTime: function(index){
            var self = this,
                opts = self.options,
                time = [],
                inp = null,
                $tg = $('table.C_CR_Timer', opts.pEl).eq(index);

            inp = $tg.find(':text');
            time.push(
                + inp.eq(0).val()|| 0,
                + inp.eq(1).val()|| 0,
                + inp.eq(2).val()|| 0
            );

            return time;
        },

        //==================UI更新======================

        /**
         * 更新年月日DOM结构
         * @param {Array} dataSource 数据源
         * @param {Number} index 操作对象索引号
         * @private
         */
        _update: function(dataSource, index){
            var self = this,
                opts = self.options,
                updateMark;
            updateMark = opts.pEl.children('.C_CR_main_wrap').children('.C_CR_main_panel[val='+ opts.curModel[0] +']');
            if(typeof index !== 'undefined' && index !== null){
                self._buildData(dataSource, index);
            }else{
                self._buildData(dataSource, undefined);
            }
            self._buildTemplate(updateMark, opts.curModel[2], opts);
            if(opts.model === 'all' || (opts.model === 'date' && /[h|m|s]/.test(opts.format))){
                self._setTime(opts.selDate);
            }

            self._setYM(opts.curModel[0]);
            self._scanFocus();
        },

        /**
         * 设置年月
         * @param {String} model 当前功能模型
         * @private
         */
        _setYM: function(model){
            var self = this,
                opts = self.options,
                data;
            data = opts[model + 'Panel'];
            for(var i = 0, len = data.length; i < len; i ++){
                _domSetYMerLabel(opts.pEl, {
                    year: data[i].year,
                    month: data[i].month != null ? data[i].month + 1 : ''
                }, i);
            }
        },

        /**
         * 设置时间
         * @param {Array} date
         * @private
         */
        _setTime: function(date){
            var self = this,
                opts = self.options,
                $tg, $inp, h, m, s;

            $tg = $('table.C_CR_Timer', opts.pEl);
            for(var i = 0; i < $tg.length; i ++){
                $inp = $tg.eq(i).find(':text');
                if(!date[i]){
                    continue;
                }
                h = date[i][5];
                m = date[i][6];
                s = date[i][7];
                $inp.eq(0).val(h < 10 ? '0' + h : h);
                $inp.eq(1).val(m < 10 ? '0' + m : m);
                $inp.eq(2).val(s < 10 ? '0' + s : s);
            }
        },

        /**
         * 关闭YMerPop
         * @param {Boolean} isCloseAll 是否全部关闭
         * @param {jQuery} $tg  JQ对象
         * @private
         */
        _closeYMerPop: function(isCloseAll, $tg){
            var self = this,
                opts = self.options,
                popType = null,
                popIndex = null,
                $YMItem = $tg ? $tg.parents('.C_CR_YMer_item'): null;

            _domPopHandle.call(self, isCloseAll ? null : $YMItem.children('.C_CR_YMer_pop'), 'ym');

            if($YMItem){
                popType = $YMItem.attr('pop');  //弹出层类型
                popIndex = $YMItem.attr('popIndex');
            }
            if(popType === 'year'){
                if(popIndex !== '' && !self._isReady('yearPop', popIndex)){
                    opts.yearPop = $.extend(true, {}, opts.cache.yearPop);
                    setTimeout(function(){
                        self._drawYearPop(opts.curModel[1], popIndex);
                    },50);
                }
            }
        },

        /**
         * 日期焦点扫描
         * @private
         */
        _scanFocus: function(){
            var self = this,
                opts = self.options,
                index = opts.inputEl.index(self.eventEl),
                focusList = [];
            for(var i = 0; i < opts.cache.selDate.length; i ++){
                opts.cache.selDate[i] && focusList.push(opts.cache.selDate[i][0]);
            }
            self._focus(focusList, 'SEL');
            self._focus([new Date()], 'CUR');
        },

        /**
         * 日期获焦
         * @param {Array} data 日期对象
         * @param {String} type 设焦类型，值分别有“SEL | CUR”，"SEL"是指手动点选择，"CUR'是指当前或从input过来的初始化日期
         * @param {jQuery} $tg
         * @private
         */
        _focus: function(data, type, $tg){
            var self = this,
                opts = self.options,
                dataList = [];

            for(var i = 0; i < data.length; i ++){
                switch (opts.curModel[0]){
                    case 'date':
                        data[i] = [data[i].getFullYear(), data[i].getMonth(), data[i].getDate()];
                        break;
                    case 'year':
                        data[i] = [data[i].getFullYear()];
                        break;
                    case 'month':
                        data[i] = [data[i].getFullYear(), data[i].getMonth()];
                        break;
                    case 'quarter':
                        data[i] = [data[i].getFullYear(), Math.floor(data[i].getMonth() / 3) + 1];
                        break;
                    case 'week':
                        data[i] = [data[i].getFullYear(), C.Date.getOnWeek(data[i], opts.iso8601, opts.sunday_first).week];
                }
                dataList.push(data[i]);
            }
            _domFocusHandle.call(self, $tg, type, dataList);
        },

        _clear: function(clearCache){
            var self = this,
                opts = self.options;
            if(!clearCache){
                opts.inputEl.val('');
                opts.value = opts.isrange ? ['',''] : [''];
                opts.selDate = opts.isrange ? [null,null] : [null];
            }
            opts.cache.selDate = opts.isrange ? [null,null] : [null];
            opts.selIndex = 0;
            //如果是支持手写输入，则清空buffer
            if(opts.entering && opts.inputEl.data('fmOpts').clearBuffer){
                opts.inputEl.data('fmOpts').clearBuffer(0, opts.maskCL.length);
            }
            _domFocusHandle.call(self, null, 'clear', null);
        },

        /**
         * 输出处理
         * @private
         */
        _export: function(){
            var self = this,
                opts = self.options,
                val, time = null, date,
                isClose = true,
                valueReturn;
            if(opts.isrange){
                //比较日期
                opts.cache.selDate = _contrastDate(opts.cache.selDate);
                //更新时间
                freshTime();
                val = [opts.cache.selDate[0] ? opts.cache.selDate[0][1] : '',
                    opts.cache.selDate[1] ? opts.cache.selDate[1][1] : ''];

                for(var i = 0; i < val.length; i ++){
                    if(!val[i]){
                        isClose = false;
                    }
                }
                isClose = opts.okbtn ? true: isClose;
            }else{
                freshTime();
                val = opts.cache.selDate[0] ? opts.cache.selDate[0][1] : '';
            }

            valueReturn = self.setValue(val);
            isClose = typeof valueReturn === 'object' ? isClose : valueReturn;

            if(isClose){
                self.hide();
            }

            function freshTime(){
                var len = opts.cache.selDate.length;
                for(var i = 0; i < len; i ++){
                    if(!opts.cache.selDate[i]){
                        continue;
                    }
                    time = self._getTime(i);
                    date = opts.cache.selDate[i];
                    date = new Date(date[2], date[3], date[4], time[0], time[1], time[2]);
                    date = _getDateArray(date, opts.format, opts.iso8601, opts.sunday_first);
                    opts.cache.selDate[i] = date;
                }
            }
        },

        /**
         * 检查是否需要重新加载DOM
         * @param {String} type
         * @param {Number} index
         * @return {*}
         * @private
         */
        _isReady: function(type, index){
            var self = this,
                opts = self.options,
                curModel = opts.curModel[0],
                isChangeLimit, isLoad, val, dataSource;
            if(type === 'mainPanel'){
                val = opts.cache.selDate;
                dataSource = opts[opts.curModel[3]];
                isChangeLimit = contrastDate(opts.mindate[1], _getLimitDate.call(self, 'mindate'))
                || contrastDate(opts.maxdate[1], _getLimitDate.call(self,'maxdate'));
                for(var n = 0; n < val.length; n ++){
                    if(val[n] === null){
                        isLoad = true;
                        continue;
                    }
                    for(var i = 0; i < dataSource.length; i ++){
                        switch (curModel){
                            case 'date':
                                isLoad = val[n][2] === dataSource[i].year && val[n][3] === dataSource[i].month;
                                break;
                            case 'year':
                                for(var m = 0; m < dataSource[i].data.length; m ++){
                                    if(val[n][2] === dataSource[i].data[m]){
                                        isLoad = true;
                                        break;
                                    }else{
                                        isLoad = false;
                                    }
                                }
                                break;
                            case 'week':
                                var weekData = C.Date.getOnWeek(val[n][0], opts.iso8601, opts.sunday_first);
                                isLoad = weekData.year === dataSource[i].year;
                                break;
                            default:
                                isLoad = val[n][2] === dataSource[i].year;
                        }
                        if(isLoad){
                            break;
                        }
                    }
                    if(!isLoad){
                        break;
                    }
                }
                isLoad = isLoad && !isChangeLimit;
            }else if(type === 'yearPop'){
                val = opts[opts.curModel[3]][index].year;
                dataSource = opts.pEl.children('.C_CR_YM_wrap').
                    find('div.C_CR_YMer_pop_y:eq('+ index +')>table').attr('val') || 'none';
                isLoad = $.trim(dataSource).indexOf(val + '') >= 0;
            }

            return isLoad;
            function contrastDate(aDate, bDate){
                aDate = aDate ? aDate.getTime() : aDate;
                bDate = bDate ? bDate.getTime() : bDate;
                return aDate != bDate;
            }
        },
        /**
         * 空提示文字控制
         * @param isEmpty {Boolean} 是否为空
         * @private
         */
        _setEmptyText: function(isEmpty){
            var self = this,
                opts = self.options;
            if(isEmpty){
                opts.el.find('.C_CR_emptytext').html(opts.emptytext);
            }else{
                opts.el.find('.C_CR_emptytext').html('');
            }
        },

        /**
         * 打开组件
         * @return {Object}
         */
        show: function(){
            var self = this,
                opts = self.options,
                beforeOK = true;
            if(opts.designMode){ return; }
            beforeOK = typeof opts.on_before_show === 'function' ? opts.on_before_show(self, self.getValue()) : true;
            if(!beforeOK || opts.disable){
                opts.inputEl.blur();
                opts.inputEl.parents('.C_CR_calInput_bd').removeClass(opts.inputFocusClass);
                return false;
            }
            //关闭已经打开的日期组件
            calers && calers.hide();
            //第一次打开和非第一次打开的处理
            if(opts.isBuild){
                opts.selDate = _analysis($.extend([], opts.selDate), opts.format,
                      opts.iso8601, opts.sunday_first);
                opts.cache.selDate = $.extend([],opts.selDate);
                //检查面板数据是否符合选择日期显示要求（减少不必要的重新创建DOM）
                //if(!self._isReady('mainPanel')){
                    self._update(self._buildUpdateDate());
                /*}else{
                    self._scanFocus();
                    if(opts.model === 'all' || (opts.model === 'date' && /[h|m|s]/.test(opts.format))){
                        self._setTime(opts.selDate);
                    }
                }*/

                //打开组件
                opts.pEl.show();
            }else{
                self._draw();
                //console.log(this);
                _domTagHandle.call(self, opts.tags, opts.curModel[0]);
                //显示组件
                opts.pEl.show();
                //加载主区数据
                self._selectTag(opts.curModel);
            }
            if(!opts.isBuild || opts.model === 'all'){
                _domSetWidth(opts);
            }
            //设置位置
            _domResetPos(opts);

            //把打开的日期组件设为待关闭组件
            calers = self;

            //设置文档监听
            $(document).unbind('mouseup.calender').one('mouseup.calender', function(e){
                //console.log('document');
                e.stopPropagation();
                calers && calers.hide();
                calers = null;
            });

            return self;
        },

        /**
         * 关闭组件
         * @return {Object}
         */
        hide: function(){
            var self = this,
                opts = self.options;
            if(opts.disable || !opts.pEl){
                return self;
            }
            opts.el.attr('isShow','false');
            //关闭所有打开的窗口
            _domPopHandle.call(self);
            //隐藏组件
            opts.pEl.hide();
            //变更输入框样式
            opts.inputEl.parents('.C_CR_calInput_bd').removeClass(opts.inputFocusClass);
            if(opts.inputEl.val() === ''){
                self._setEmptyText(true);
            }
            //清空聚焦
            _domFocusHandle.call(self, null, 'clear', null);
            calers = null;
            //清空缓存
            opts.cache.selDate = opts.isrange ? [null,null] : [null];
            return self;
        },
        
        /**
         * 设置选择面版值
         * @param {String|Date|Array} value 设置使用值，支持三种格式
         * 值格式例子：'2012-12-12'或 new Date(),  范围模式下的值格式['2012-12-12', '2012-12-15']或 [new Date(), new Date()]
         * @return {Object} 组件对象
         */
        setPanel: function(value){
            var self = this,
                opts = self.options,
                def = [];
            if(value){
                value = $.type(value) === 'number' ? value + '' : value;
                //值为空或undefined时，统一转化为null
                value = value || null;
                //对于单值，统一放到数组
                value = $.type(value) !== 'array' ? [value] : value;

                if(value.length !== 0){
                    def = _analysis($.extend(true,[],value), opts.format, 
                      opts.iso8601, opts.sunday_first);
                }

                opts.selDate = $.extend(true, [], def);
                opts.cache.selDate = $.extend(true, [], def);
            }
             //返回组件对象
            return self;
        },
        /**
         * 设置值
         * @param {String|Date|Array} value 设置使用值，支持三种格式
         * 值格式例子：'2012-12-12'或 new Date(),  范围模式下的值格式['2012-12-12', '2012-12-15']或 [new Date(), new Date()]
         * @param {Boolean} isInit 是否是重置设值，如果
         * @param {String} source 值的来源，目前分为'entering'手动输入，'select'通过面板选择
         * @return {Object} 组件对象
         */
        setValue: function(value, isInit, source){
            var self = this,
                opts = self.options,
                def = [], exp = [],
                expFormat = $.extend({}, opts.formatList),
                isOK = true;

            source = source || 'select';

            if(opts.disable){
                return self;
            }
            value = $.type(value) === 'number' ? value + '' : value;
            //值为空或undefined时，统一转化为null
            value = value || null;
            //对于单值，统一放到数组
            value = $.type(value) !== 'array' ? [value] : value;
            //清空
            opts.value = [];

            //解析
            if(value.length !== 0){
                def = _analysis($.extend(true,[],value), opts.format, 
                    opts.iso8601, opts.sunday_first);

                if(!isInit){
                    //判断日期是否符合要求
                    var max = _getLimitDate.call(self, 'maxdate', true);
                    var min = _getLimitDate.call(self, 'mindate', true);

                    $.each(def, function(i, item){
                        if(item != null){
                            if(max && item[0] - max > 0){
                                //则日期已经超过最大日期，选择失效
                                def[i] = null;
                                _domTipHandle.call(self, '所选日期超出最大日期范围');
                                if(source === 'entering'){
                                    //TODO
                                    self._clear(false);
                                }
                                isOK = false;
                                return true;
                            }
                            if(min && min - item[0] > 0){
                                def[i] = null;
                                _domTipHandle.call(self, '所选日期超出最小日期范围');
                                if(source === 'entering'){
                                    self._clear(false);
                                }
                                isOK = false;
                                return true;
                            }
                        }
                    });
                }

                opts.selDate = $.extend(true, [], def);
                opts.cache.selDate = $.extend(true, [], def);
            }

            opts.selIndex = 0;
            //如果大小限制判断不通过，则跳出
            if(!isOK){
                return false;
            }

            //组织显示文字，并输出
            for(var i = 0; i < def.length; i ++){
                def[i] && opts.selIndex ++;
                opts.value.push(def[i] ? def[i][1] : '');
                exp.push(def[i] ? C.Date.format(def[i][0], expFormat[opts.curModel[0]], opts.iso8601, opts.sunday_first) : '');
            }

            exp = exp.join('~');
            //输出到输入框
            if(/^~$/.test(exp)){
                value = '';
            }else if(/^.*~$/.test(exp)){
                value = opts.separator ? exp : (exp = exp.replace('~',''));
            }else{
                value = exp;
            }
            opts.inputEl.eq(0).val(value);

            //设置空提示
            var isEmpty = false;
            if(opts.isrange){
                isEmpty = exp === '~'? true : false;
            }else{
                isEmpty = exp === '' ? true : false;
            }
            self._setEmptyText(isEmpty);
            //触发对象事件, 如果 isInit 为true，则不触发
            if(isInit){
                self.onValid();
            }else{
                self._triggerHandler('change');
            }
            //执行回调
            if(typeof opts.on_change === 'function' && !isInit){//&& opts.isBuild
                if(opts.designMode){ return; }
                opts.on_change.apply(self, $.extend(true, [],def));
            }

            //清空挂起的所有事件
            clearTimeout(opts.el.data('timeOut') - 0);

            //返回组件对象
            return self;
        },

        /**
         * 返回值
         * @param {String} reType 返回值数据类型，目前支持返回 string | date，默认为string
         * @return {String | Array} 返回值，返回格式 string | [string, string]
         */
        getValue: function(reType){
            var self = this,
                opts = self.options,
                val = [];
            if(opts.disable){
                return '';
            }
            reType = reType ? reType : 'string';
            var len = opts.isrange ? 2 : 1;
            for(var i = 0; i < len; i ++){
                if(!opts.value[i]){
                    val[i] = reType === 'string' ? '' : null;
                    opts.value[i] = reType === 'string' ? '' : null;
                    continue;
                }
                if(reType === 'date'){
                    val[i] = C.Date.parse(opts.value[i], opts.format, opts.iso8601, opts.sunday_first);
                }else{
                    val[i] = opts.value[i];
                }
            }
            return opts.isrange ? val : val[0];
        },
        
        /**
         * 设置最大限度
         * @param date
         */
        setMaxDate: function (date) {
            var opts = this.options;
            if (opts.model !== "date") {
                return;
            }
            switch(typeof date){
                case 'string':
                    if(/\d{4}(\-\d{2}){2}/.test(date)){
                        opts.maxdate[0] = date;
                    }
                    break;
                case 'object':
                    opts.maxdate[0] = C.Date.format(date, 'yyyy-MM-dd hh:mm:ss');
                    break;
            }
        },
        
        /**
         * 设置最小限度
         * @param date
         */
        setMinDate: function (date) {
            var opts = this.options;
            if (opts.model !== "date") {
                return;
            }
            switch(typeof date){
                case 'string':
                    if(/\d{4}(\-\d{2}){2}/.test(date)){
                        opts.mindate[0] = date;
                    }
                    break;
                case 'object':
                    opts.mindate[0] = C.Date.format(date, 'yyyy-MM-dd hh:mm:ss');
                    break;
            }
        },

        /**
         * 获取日期范围
         * @param {String} reType 返回值数据类型，目前支持返回 string | date，默认为date
         * @return {Array | Date | String} 返回格式如下，Date|[Date, Date]|[[Date, Date], [Date, Date]]
         * String | [String, String] | [[String, String], [String, String]]
         */
        getDateRange: function(reType){
            var self = this,
                opts = self.options,
                selDate = $.extend(true, [], opts.selDate),
                range = [], tmp, empty;
            reType = reType ? reType : 'date';
            empty = reType === 'date' ? null : '';
            for(var i = 0; i < selDate.length; i ++){
                if(!(tmp = selDate[i])){
                    range.push([empty, empty]);
                    continue;
                }
                switch (opts.curModel[0]){
                    case 'month':
                        range.push([
                            getFinalValue(new Date(tmp[2],tmp[3],1,0,0,0,0)),
                            getFinalValue(new Date(tmp[2],tmp[3], new Date(tmp[2], tmp[3] + 1, 0).getDate(),23,59,59,0))
                        ]);
                        break;
                    case 'year':
                        range.push([
                            getFinalValue(new Date(tmp[2],0,1,0,0,0,0)),
                            getFinalValue(new Date(tmp[2],11,31,23,59,59,0))
                        ]);
                        break;
                    case 'quarter':
                        range.push([
                            getFinalValue(new Date(tmp[2], tmp[3], 1, 0,0,0,0)),
                            getFinalValue(new Date(tmp[2], tmp[3] + 2, new Date(tmp[2], tmp[3] + 3, 0).getDate(),23,59,59,0))
                        ]);
                        break;
                    case 'week':
                        range.push([
                            getFinalValue(new Date(tmp[2],tmp[3],tmp[4],0,0,0,0)),
                            getFinalValue(new Date(tmp[2],tmp[3],tmp[4] + 6,23,59,59,0))
                        ]);
                        break;
                    default :
                        range.push([
                            getFinalValue(new Date(tmp[0].getTime())),
                            getFinalValue(new Date(tmp[2], tmp[3], tmp[4], 23, 59, 59, 0))
                        ]);
                }
            }
            if(range.length === 1){
                return opts.curModel[0] === 'date' ? range[0][0] : range[0];
            }else{
                return [range[0][0], range[1][1]];
            }
            function getFinalValue(date){
                if(reType === 'date'){
                    return date;
                }else{
                    return C.Date.format(date, 'yyyy-MM-dd hh:mm:ss');
                }
            }
        },

        /**
         * 设置组件宽度
         * @param width
         */
        setWidth:function(width){
            var $wrap = this.options.el.children('div'),
                cusWidth = this.options.width;
            if(width == null || width === undefined || width === '' || typeof width === 'object'){
                return;
            }
            if(typeof width === 'string' && /^(\d)+(px|pt|em|PX|PT|EM|%)$/.test(width)){
                cusWidth = width;
            }else {
                cusWidth = width + 'px';
            }
            $wrap.css({
                width: width
            });
        },

        /**
         * 设置只读
         * @param {Boolean} flag
         */
        setReadonly: function(flag){
            flag = typeof flag === 'undefined' ? true : flag;
            var self = this,
                opts = self.options,
                handle = flag ? 'addClass' : 'removeClass';
            if(flag === opts.readonly){
                return;
            }
            opts.el.children('.C_CR_calInput_bd')[handle](opts.inputDisClass);
            //如果设readonly为false，且entering为true，则，输入框可以输入
            if(!flag){
                opts.entering && opts.inputEl.prop('readonly', false);
            }else{
                opts.inputEl.prop('readonly', true);
            }
            opts.readonly = flag;
        },

        /**
         * 移除组件
         */
        destroy: function(){
            var self = this,
                opts = self.options;
            self._super();
            opts.el.unbind().remove();
            opts.pEl && opts.pEl.remove();
        },

        /**
         * 设置文本模式
         */
        setTextMode: function(){
            var self = this,
                opts = self.options,
                labelValue = self.getLabelValue();
            if(opts.isrange){
                opts.el.eq(0).text(labelValue[0]+'~'+labelValue[1]);
            }else{
                opts.el.eq(0).text(labelValue[0]);
            }
        },

        /**
         * 获取文本模式所需显示文本
         * @return {Array}
         */
        getLabelValue: function(){
            var self = this,
                opts = self.options,
                labelValue = [],
                varType,
                jsonReg = /^(?:\{.*\}|\[.*\])$/;

            if(opts.value === null || opts.value === undefined){
                opts.value = '';
            }

            varType = $.type(opts.value);
            if(varType === 'string'){
                opts.value = jsonReg.test( opts.value ) ?
                    $.parseJSON(opts.value.replace(/\\'/g, '#@@#').replace(/'/g, '"').replace(/#@@#/g, '\'')):
                    [opts.value];
            }else if(varType === 'date'){
               opts.value = [opts.value];
            }
            for(var i = 0; i < opts.value.length; i ++){
                varType = $.type(opts.value[i]);
                if(varType === 'string'){
                    labelValue.push(opts.value[i]);
                }else if(varType === 'date'){
                    labelValue.push(_getDateArray(opts.value[i], opts.format)[1], opts.iso8601, opts.sunday_first);
                }
            }
            return labelValue;
        },

        /**
         * 数据错误回调方法
         * @param {CUI} cuiObj
         * @param {String} msg
         */
        onInValid: function(cuiObj, msg){
            var self = this,
                opts = self.options;
            opts.tipTxt = opts.tipTxt === null ? opts.el.attr('tip') : opts.tipTxt;
            opts.el.attr('tip', msg);
            //设置tip类型，错误
            $(self.tipPosition, opts.el).attr('tipType', 'error');
            opts.el.children('.C_CR_calInput_bd').addClass(opts.inputErrClass);

        },

        /**
         * 数据正确回调方法
         * @param cuiObj
         */
        onValid: function(cuiObj){
            var self = this,
                opts = self.options;
            opts.tipTxt = opts.tipTxt === null ? opts.el.attr('tip') : opts.tipTxt;
            opts.el.attr('tip', opts.tipTxt || '');
            //设置tip类型，正常
            $(self.tipPosition, opts.el).attr('tipType', 'normal');
            opts.el.children('.C_CR_calInput_bd').removeClass(opts.inputErrClass);
        }
    });

    //////////////////////////////////////////////////model//////////////////////////////////////////////////

    /**
     * 数据解析器，根据model的不一样，解析不同的格式
     * @param {Array} val
     * @param {String} format
     * @param {Boolean} iso8601 标准输出
     * @param {Boolean} sundayFirst 一周第一天设为周日
     * @return {*}
     */
    function _analysis (val, format, iso8601, sundayFirst){
        var valType = null;
        for(var i = 0, len = val.length; i < len; i ++){
            valType = $.type(val[i]);
            if(valType === 'string'){
                val[i] = _getDateArray(C.Date.parse(val[i], format, iso8601, sundayFirst), format, iso8601, sundayFirst) || null;
            }else if(valType === 'date'){
                val[i] = _getDateArray(val[i], format, iso8601, sundayFirst) || null;
            }
        }
        return val;
    }

    /**
     * 获取指定月包含的周
     * @param {Date} date 日期对象
     * @param {Boolean} iso8601 按ISO8601标准计算星期，ISO 8601 规定每年的第一周包含这一年的第一个星期四
     * @param {Boolean} sundayFirst 一周第一天为周日
     * @return {Array} 周数组
     * @private
     */
    function _getGirdWeeks(date, iso8601, sundayFirst){
        var week = [], time, checkDate = new Date(date.getTime()),
            day = sundayFirst ? checkDate.getDay() - 1 : (checkDate.getDay() || 7) - 1;

        for(var i = 0; i < 6; i ++){
            week.push([C.Date.getOnWeek(new Date(checkDate.getTime()), iso8601, sundayFirst).week, 0]);
            checkDate.setDate(checkDate.getDate() + (7 - day));
            day = 0;
        }

        return week;
    }

    /**
     * 根据日期和不可用日期列表，生成数据对象
     * @param {Date} date
     * @return {Object}
     * @private
     */
    function _getPanelDate(date){
        var self = this,
            opts = self.options,
            dates = [], dn = 0, wn = 0, dw = [], i, dis, tmpDate,
            firstDay, prevMonthSize, curMonthSize, weeks,
            curYear = date.getFullYear(),
            curMonth = date.getMonth();

        opts.mindate[1] = _getLimitDate.call(self, 'mindate');
        opts.maxdate[1] = _getLimitDate.call(self, 'maxdate');

        //计算当月的第一天是星期几
        firstDay = new Date(curYear, curMonth, 1).getDay();
        //计算上个月的总天数
        prevMonthSize = new Date(curYear, curMonth, 0).getDate();
        //计算本月的总天数
        curMonthSize = new Date(curYear, curMonth + 1, 0).getDate();

        //如果是以周一为开始
        opts.sunday_first || firstDay --;
        if(firstDay < 0){
            firstDay = 6;
        }

        var isPrevYear = curMonth - 1 < 0 ? true : false,
            isNextYear = curMonth + 1 > 11 ? true : false;

        //生成当月前的补缺日期
        for(i = 0; i < firstDay; i ++){
            tmpDate = new Date(isPrevYear ? curYear - 1 : curYear, isPrevYear ? 11 : curMonth - 1, prevMonthSize, 0, 0, 0, 0);
            if(contrastDate(tmpDate, opts.mindate[1], 'mindate') || contrastDate(tmpDate, opts.maxdate[1], 'maxdate')){
                dis = 0;
            }else{
                dis = 1;
            }
            dates.push([prevMonthSize, dis, tmpDate.getFullYear(), tmpDate.getMonth()]);
            prevMonthSize --;
        }
        dates.reverse();

        //生成当月日期
        for(i = 1; i <= curMonthSize; i++){
            tmpDate = new Date(curYear, curMonth, i, 0, 0, 0, 0);
            if(contrastDate(tmpDate, opts.mindate[1], 'mindate') || contrastDate(tmpDate, opts.maxdate[1], 'maxdate')){
                dis = 0;
            }else{
                dis = 1;
            }
            dates.push([i, dis, curYear, curMonth]);
        }

        //生成当月后的补却日期
        for(i = 1; i<= 42 - curMonthSize - firstDay; i ++){
            tmpDate = new Date(isNextYear ? curYear + 1 : curYear, isNextYear ? 0 : curMonth + 1, i, 0, 0, 0, 0);
            if(contrastDate(tmpDate, opts.mindate[1], 'mindate') || contrastDate(tmpDate, opts.maxdate[1], 'maxdate')){
                dis = 0;
            }else{
                dis = 1;
            }
            dates.push([i, dis, tmpDate.getFullYear(), tmpDate.getMonth()]);
        }

        //生成周
        weeks = _getGirdWeeks(date, opts.iso8601, opts.sunday_first);
        for(i = 0; i < 48; i ++){
            if(i != 0 && i % 8 != 0){
                dw.push(dates[dn]);
                dn ++;
            }else{
                dw.push(weeks[wn]);
                wn ++;
            }
        }

        return {
            year:curYear,
            month:curMonth,
            date:dw
        };

        function contrastDate(sDate, cDate, type){
            if(!cDate){
                return false;
            }
            var y = cDate.getFullYear(),
                m = cDate.getMonth(),
                d = cDate.getDate();
            cDate = new Date(y, m, d, 0, 0, 0, 0);
            if(type === 'mindate'){
                return sDate.getTime() < cDate.getTime();
            }else{
                return sDate.getTime() > cDate.getTime();
            }
        }
    }

    /**
     * 获取从指定年份开始，一定范围内的年份数组
     * @param {Number} year 起始年或结束年
     * @param {Number} range 范围，range>0时，year为起始年，range<0时，year为结束年
     * @return {Array}
     * @private
     * @example _getPanelYear(2000, 4);
     *          返回[2000,2001,2002,2003]
     *          _getPanelYear(2000, -4);
     *          返回[1997,1998,1999,2000]
     */
    function _getPanelYear(year, range){
        var arrYear = [];
        if(range > 0){
            for(var i = 0; i < range; i ++){
                arrYear.push(year);
                year ++;
            }
        }else{
            for(var i = 0; i < -range; i ++){
                arrYear.push(year);
                year --;
            }
            arrYear.reverse();
        }

        return arrYear;
    }

    /**
     * 获取指定范围内的月份，默认为12个月
     * @param {Array} range 范围，格式[start, end]，如要取3月至9月，则[2,8]
     * @return {Array}
     * @private
     */
    function _getPanelMonth(range){
        var label = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
            ms = [];
        range = range || [0,11];
        for(var i = range[0]; i <= range[1]; i ++){
            ms.push([i, label[i]]);
        }
        return ms;
    }

    function _getPanelWeek(year, iso8601, sundayFirst){
        var week = [], weekIndex;
        //根据ISO8601规范，计算一年有多少周
        for(var i = 31; i > 0; i --){
            weekIndex = C.Date.getOnWeek(new Date(year, 11, i), iso8601, sundayFirst).week;
            if(weekIndex !== 1){
                break;
            }
        }
        for(i = 1; i <= weekIndex; i ++){
            week.push([i,1]);
        }
        return week;
    }

    /**
     * 将日期对象转成常用数据，以数组返回，返回格式如下[日期对象, 格式化后的日期字符串, year, month, date, hour, minute, second]
     * @param {Date} date
     * @param {String} format
     * @return {Array}
     * @private
     */
    function _getDateArray(date, format, iso8601, sundayFirst){
        if(!date){
            return null;
        }
        var arrDate = [],
            iso = iso8601,
            sunday = sundayFirst;
        arrDate.push(date);
        arrDate.push(C.Date.format(date, format, iso, sunday));
        arrDate.push(date.getFullYear(), date.getMonth(), date.getDate());
        arrDate.push(date.getHours(), date.getMinutes(), date.getSeconds());
        return arrDate;
    }

    /**
     * 对比日期大小，并返回正确排列
     * @param {Array} crDate
     * @private
     */
    function _contrastDate(crDate){
        if(!crDate || crDate.length < 2 || !crDate[0] || !crDate[1]){
            return crDate;
        }
        var tmp;
        if(crDate[0][0] > crDate[1][0]){
            tmp = crDate[1];
            crDate[1] = crDate[0];
            crDate[0] = tmp;
        }
        return crDate;
    }


    /**
     * 获取限制日期数据
     * @param type {String} 日期类型 包含“mindate”、“maxdate”
     * @param hasHMS {Boolean} 是否包含时分秒
     * @returns {*}
     * @private
     */
    function _getLimitDate(type, hasHMS){
        var self = this, opts = self.options, $cui,
            date = opts[type][0], noCurrent = opts.nocurrent;
        hasHMS = typeof hasHMS === 'undefined' ? true : hasHMS;
        if(!date){
            return null;
        }
        var reg = /^([\+\-]{1})([0-9]{1,})([yMd]{1})$/,
            limit = [null, null, null];
        if(typeof date === 'string'){
            //字符串分为三种：1、使用简义代表符，如+1M；2、使用日期字符串，如'2012-10-15'；3、使用jQuery表达式，如'#endTime'
            if(/[\+\-]{1}[0-9]{1,}[yMd]{1}/.test(date)){
                var rules = date.split(','), rule, pos, tmpl = [0,0,0],
                    now = [new Date().getFullYear(), new Date().getMonth(), new Date().getDate()];
                //提取限制数据
                for(var i = 0; i < rules.length; i ++){
                    rule = rules[i].match(reg);
                    pos = 'yMd'.indexOf(rule[3]);
                    limit[pos] += (rule[1] === '+' ? 1 : -1) * (+ rule[2]) + now[pos];
                }
                for(i = 0; i < limit.length; i ++){
                    tmpl[i] = limit[i] === null ? 0 : 1;
                }
                switch (tmpl.join('-')){
                    case '1-0-0':
                        date = type === 'mindate' ? new Date(limit[0], 0, 1) : new Date(limit[0], 11, 31);break;
                    case '1-1-0':
                        date = type === 'mindate' ? new Date(limit[0], limit[1], 1) :
                            new Date(limit[0], limit[1], new Date(limit[0], limit[1] + 1, 0).getDate());
                        break;
                    case '1-1-1':
                        noCurrent && (limit[2] = type === 'mindate' ? limit[2] + 1 : limit[2] - 1);
                        date = new Date(limit[0], limit[1], limit[2]);break;
                    case '0-1-1':
                        noCurrent && (limit[2] = type === 'mindate' ? limit[2] + 1 : limit[2] - 1);
                        date = new Date(now[0], limit[1], limit[2]);break;
                    case '0-0-1':
                        noCurrent && (limit[2] = type === 'mindate' ? limit[2] + 1 : limit[2] - 1);
                        date = new Date(now[0], now[1], limit[2]);break;
                    case '0-1-0':
                        date = type === 'mindate' ? new Date(now[0], limit[1], 1) :
                            new Date(now[0], limit[1], new Date(limit[0], limit[1] + 1, 0).getDate());
                        break;
                    case '1-0-1':
                        noCurrent && (limit[2] = type === 'mindate' ? limit[2] + 1 : limit[2] - 1);
                        date = new Date(limit[0], now[1], limit[2]);
                        break;
                }
                date = type === 'maxdate' ? new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59) :
                    new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
            }else if($cui = $(date).data('uitype')){
                if(!(date = $cui.getValue('date'))){
                    return null;
                }
                noCurrent && date.setDate(type === 'mindate' ? date.getDate() + 1 : date.getDate() - 1);
            }else{
                if(!/^[0-9]{4}\-[0-9]{2}\-[0-9]{2}|[0-9]{4}\-[0-9]{2}|[0-9]{4}|[0-9]{4}\-[0-9]{2}\-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/.test(date)){
                    return null;
                }
                if(/^[0-9]{4}\-[0-9]{2}\-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/.test(date)){
                    date = C.Date.parse(date,'yyyy-MM-dd hh:mm:ss');
                    noCurrent && date.setDate(type === 'mindate' ? date.getDate() + 1 : date.getDate() - 1);
                }
                if(/^[0-9]{4}\-[0-9]{2}\-[0-9]{2}$/.test(date)){
                    date = C.Date.parse(date,'yyyy-MM-dd');
                    noCurrent && date.setDate(type === 'mindate' ? date.getDate() + 1 : date.getDate() - 1);
                    date = type === 'maxdate' ? new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59) :
                        new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
                }
            }

        }else{
            date = $.type(date) === 'date' ? date : null;
            noCurrent && date && date.setDate(type === 'mindate' ? date.getDate() + 1 : date.getDate() - 1);
        }

        return hasHMS ? new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),date.getMinutes(),date.getSeconds(),0,0) :
            new Date(date.getFullYear(), date.getMonth(), date.getDate(),0,0,0,0,0);
    }

    //////////////////////////////////////////////////view//////////////////////////////////////////////////

    /**
     * YMer工具条操作，提供显示，隐藏，只读等操作
     * @param {jQuery} $pEl 组件jquery
     * @param {String} handle 处理方式，值分别有hide|show|disYear|disMonth|dis|unDis
     * @private
     */
    function _domYMerHandle($pEl, handle){
        var $YMer = $pEl.children('.C_CR_YM_wrap');
        if(handle === 'hide'){
            $YMer.hide();
        }else{
            switch (handle){
                case 'disYear':
                    $YMer.find('span.C_CR_YMer_tx_y').parents('td').eq(0).hide().next().hide();
                    break;
                case 'disMonth':
                    $YMer.find('.C_CR_YMer').each(function(a, b){
                        $(b).children('tbody').children('tr').children('td').slice(2).hide();
                    });
                    break;
                case 'dis':
                    $YMer.find('span.C_CR_YMer_tx_wrap').parents('table').find('td').hide();
                    break;
                case 'unDis':
                default:
                    $YMer.find('span.C_CR_YMer_tx_wrap').parents('table').find('td').show();
            }
            $YMer.show();
        }

    }

    /**
     * 设置YMer的Label
     * @param $pEl
     * @param data
     * @param pos
     * @private
     */
    function _domSetYMerLabel($pEl, data, pos){
        var $input = $('table.C_CR_YMer:eq('+ pos +')', $pEl)
            .attr('val', data.year + '|' + (data.month - 1))
            .find('input.C_CR_tx');
        $input.eq(0).val(data.year);
        $input.eq(1).val(data.month);
    }

    /**
     * 处理pop弹出层
     * @param {jQuery} $tg
     * @param {String} type
     * @private
     */
    function _domPopHandle($tg){
        var self = this,
            opts = self.options;
        if(!opts.activePop && !$tg){
            return;
        }
        if(opts.activePop){
            opts.activePop.hide();
        }
        if($tg){
            $tg.show();
            opts.activePop = $tg;
        }
    }

    /**
     * 按钮操控
     * @private
     */
    function _domBtnHandle(){
        var self = this, opts = self.options,
            $btn = opts.pEl.children('.C_CR_OPBar_wrap').children('a').show(),
            $okbtn = $btn.filter('[val^="ok"]'),
            $clearbtn = $btn.filter('[val^="clear"]'),
            $curbtn = $btn.filter('[val^="cur"]'),
            label = {date: '今&nbsp;天', month: '本&nbsp;月', year: '本&nbsp;年', quarter: '本季度', week: '本&nbsp;周'};
        $curbtn.html(label[opts.curModel[0]]);
        opts.okbtn || $okbtn.hide();
        opts.clearbtn || $clearbtn.hide();
    }

    /**
     * 时间条Dom初始化
     * @private
     */
    function _domTimeInit(){
        var self = this,
            opts = self.options,
            $timeWrap = opts.pEl.children('.C_CR_Timer_box'),
            timeCtrl = [/s/.test(opts.format),/m/.test(opts.format),/h/.test(opts.format)];
        //设置时间显示
        if(!timeCtrl[0]){
            opts.pEl.find('td.C_CR_Timer_com_s').hide().prev().hide();
        }
        if(!timeCtrl[1]){
            opts.pEl.find('td.C_CR_Timer_com_m').hide().prev().hide();
        }
        if(!timeCtrl[2]){
            opts.pEl.find('td.C_CR_Timer_com_h').hide().prev().hide();
        }
        self.$tmp.$timeHour = $('div.C_CR_Timer_pop_h', $timeWrap);
        self.$tmp.$timeMin = $('div.C_CR_Timer_pop_m', $timeWrap);
        self.$tmp.$timeSecond = $('div.C_CR_Timer_pop_s', $timeWrap);
    }

    /**
     * 时间条操控
     * @private
     */
    function _domTimeHandle(){
        var self = this, opts = self.options;
        var $timeWrap = opts.pEl.children('.C_CR_Timer_box');
        if(opts.curModel[0] === 'date' && /[h|s|m]/.test(opts.format)){
            $timeWrap.show();
        }else{
            $timeWrap.hide();
        }
    }

    /**
     * 设置标签使用状态
     * @param showTag {Array} 可用标签
     * @param curTag {String} 默认标签
     * @private
     */
    function _domTagHandle(showTag, curTag){
        var self = this,
            opts = self.options,
            $tagA = $('.C_CR_Tag_wrap a', opts.pEl),
            tagVal;
        $tagA.each(function(i, t){
            var $t = $(t);
            $t.hide();
            for(var k = 0, len = showTag.length; k < len; k ++){
                tagVal = $t.attr('val');
                if(tagVal === showTag[k]){
                    $t.show();
                }
                if(tagVal === curTag){
                    $t.addClass('C_CR_Tag_cur');
                }
            }
        });
    }

    /**
     * 获焦操作
     * @param {jQuery} $tg 操作JQ元素
     * @param {String} type 操作方式
     * @param {Array} data 数据
     * @private
     */
    function _domFocusHandle($tg, type, data){
        var self = this,
            opts = self.options,
            model = opts.curModel[0],
            focusClass;

        switch (type){
            case 'CUR':
                focusClass = 'C_CR_main_cur';
                break;
            case 'SEL':
                focusClass = 'C_CR_main_cur_d';
                break;
            case 'clear':
                $('td.C_CR_main_cur_d', opts.pEl).removeClass('C_CR_main_cur_d');
                return;
        }
        if($tg){
            $tg.parent('td').addClass(focusClass);
        }else{
            for(var i = 0; i < data.length; i++){
                if($('#C_CR_' + model + '_' + data[i].join('_') + '_' + opts.uuid,".C_CR_Date").length==2){
                    $('#C_CR_' + model + '_' + data[i].join('_') + '_' + opts.uuid,".C_CR_Date").eq(i).parent('td').addClass(focusClass);
                }else{
                    $('#C_CR_' + model + '_' + data[i].join('_') + '_' + opts.uuid).parent('td').addClass(focusClass);
                }
            }
        }
    }

    /**
     * 提示
     * @param message {String} 提示信息
     * @private
     */
    function _domTipHandle(message){
        var self = this,
            opts = self.options,
            $tip = $('.C_CR_Tip', opts.pEl);
        $tip.text(message).fadeIn('fast');
        setTimeout(function(){
            $tip.fadeOut('fast');
        },1000);
    }

    /**
     * 设置组件宽度
     * @param {Object} opts 配置数据
     * @private
     */
    function _domSetWidth(opts){
        var num = opts.panel;
        var width = 226 * num;
        opts.pEl.css('width', width + 3 * (opts.panel - 1));

        var domWidth = opts.pEl.outerWidth();
        var domHeight = opts.pEl.outerHeight();

        //针对IE6，JCT会在日期背后添加iframe以遮盖select，所以，这里必须对iframe设置高宽
        if(C.Browser.isIE6 || C.Browser.isQM){
            opts.pEl.find('iframe').css({
                width: domWidth,
                height: domHeight
            });
        }
    }

    /**
     * 计算位置
     * @param {Object} opts 配置数据
     * @private
     */
    function _domResetPos(opts){
        var $win = $(window),
            eventEl = opts.el.children('.C_CR_calInput_bd'),
            inpOffset = eventEl.offset(),
            inpHeight = eventEl.outerHeight(),
            inpWidth = eventEl.outerWidth(),
            winWidth = $win.width(),
            winHeight = $win.height(),
            winSL = $win.scrollLeft(),
            winST = $win.scrollTop(),
            domWidth = opts.pEl.outerWidth(),
            domHeight = opts.pEl.outerHeight(),
            docHeight = $(document).height(),
            css = {};

        if(winWidth - (inpOffset.left - winSL) > domWidth){
            css.left = inpOffset.left;
        }else if(inpOffset.left - winSL + inpWidth > domWidth){
            css.left = inpOffset.left + inpWidth - domWidth;
        }else{
            css.left = 0;
        }

        //首先判断下方是否有空间
        if(docHeight - inpOffset.top -inpHeight > domHeight && winHeight - (inpOffset.top - winST) - inpHeight > domHeight){
            css.top = inpOffset.top + inpHeight;
            //再判断上方是否有空间
        }else if(inpOffset.top - winST > domHeight){
            css.top = inpOffset.top - domHeight;
            //如果都没有空间
        }else{
            css.top = winST + (winHeight - domHeight) /2;
            if(winWidth - (inpOffset.left -winSL + inpWidth) > domWidth){
                css.left = inpOffset.left + inpWidth;
            }else if(inpOffset.left - winSL + inpWidth > domWidth){
                css.left = inpOffset.left - inpWidth;
            }else{
                css.left = 0;
            }
        }

        css.left = css.left < 0 ? 0 : css.left;
        css.top = css.top < 0 ? 0 : css.top;

        opts.pEl.css(css);

        if(!opts.isBuild){
            opts.isBuild = true;
        }
    }

    function getPasteEvent() {
        var el = document.createElement('input'),
            name = 'onpaste';
        el.setAttribute(name, '');
        return (typeof el[name] === 'function')?'paste':'input';
    }

    var pasteEventName = getPasteEvent() + ".mask",
        ua = navigator.userAgent,
        iPhone = /iphone/i.test(ua),
        android=/android/i.test(ua),
        caretTimeoutId;
    $.maskCL = {
        //Predefined character definitions
        definitions: {
            '9': "[0-9]",
            '1': "[0-1]",
            '2': "[0-2]",
            '3': "[0-3]",
            '4': "[0-4]",
            '5': "[0-5]",
            '6': "[0-6]",
            '7': "[0-7]",
            '8': "[0-8]",
            'a': "[A-Za-z]",
            '*': "[A-Za-z0-9]",
            'q': "[1-4]",
            'x': "x",
            'r': "r",
            'z': "z",
            'k': "k"
        },
        dataName: "rawMaskFn",
        placeholder: '_'
    };

    $.fn.extend({
        //Helper Function for caretCL positioning
        caretCL: function(begin, end) {
            var range;

            if (this.length === 0 || this.is(":hidden")) {
                return;
            }

            if (typeof begin === 'number') {
                end = (typeof end === 'number') ? end : begin;
                return this.each(function() {
                    if (this.setSelectionRange) {
                        this.setSelectionRange(begin, end);
                    } else if (this.createTextRange) {
                        range = this.createTextRange();
                        range.collapse(true);
                        range.moveEnd('character', end);
                        range.moveStart('character', begin);
                        range.select();
                    }
                });
            } else {
                if (this[0].setSelectionRange) {
                    begin = this[0].selectionStart;
                    end = this[0].selectionEnd;
                } else if (document.selection && document.selection.createRange) {
                    range = document.selection.createRange();
                    begin = 0 - range.duplicate().moveStart('character', -100000);
                    end = begin + range.text.length;
                }
                return { begin: begin, end: end };
            }
        },
        unmaskCL: function() {
            return this.trigger("unmaskCL");
        },
        maskCL: function(mask, settings) {
            var input,
                defs,
                tests,
                partialPosition,
                firstNonMaskPos,
                len;
            if (!mask && this.length > 0) {
                input = $(this[0]);
                return input.data($.maskCL.dataName)();
            }
            settings = $.extend({
                placeholder: $.maskCL.placeholder, // Load default placeholder
                completed: null
            }, settings);

            defs = $.maskCL.definitions;
            tests = [];
            partialPosition = len = mask.length;
            firstNonMaskPos = null;

            $.each(mask.split(""), function(i, c) {
                if (c === '?') {
                    len--;
                    partialPosition = i;
                } else if (defs[c]) {
                    tests.push(new RegExp(defs[c]));
                    if (firstNonMaskPos === null) {
                        firstNonMaskPos = tests.length - 1;
                    }
                } else {
                    tests.push(null);
                }
            });
            return this.trigger("unmaskCL").each(function() {
                var input = $(this),
                    buffer = $.map(
                        mask.split(""),
                        function(c, i) {
                            if (c !== '?') {
                                return defs[c] ? settings.placeholder : c;
                            }
                        }),
                    focusText = input.val();

                function seekNext(pos) {
                    while (++pos < len && !tests[pos]);
                    return pos;
                }

                function seekPrev(pos) {
                    while (--pos >= 0 && !tests[pos]);
                    return pos;
                }

                function shiftL(begin,end) {
                    var i,
                        j;

                    if (begin<0) {
                        return;
                    }

                    for (i = begin, j = seekNext(end); i < len; i++) {
                        if (tests[i]) {
                            //if (j < len && tests[i].test(buffer[j])) {
                            if (j < len && compare(tests[i], buffer[j], i)) {
                                buffer[i] = buffer[j];
                                buffer[j] = settings.placeholder;
                            } else {
                                break;
                            }

                            j = seekNext(j);
                        }
                    }
                    writeBuffer();
                    input.caretCL(Math.max(firstNonMaskPos, begin));
                }

                function shiftR(pos) {
                    var i,
                        c,
                        j,
                        t;

                    for (i = pos, c = settings.placeholder; i < len; i++) {
                        if (tests[i]) {
                            j = seekNext(i);
                            t = buffer[i];
                            buffer[i] = c;
                            //if (j < len && tests[j].test(t)) {
                            if (j < len && compare(tests[j], t, j)) {
                                c = t;
                            } else {
                                break;
                            }
                        }
                    }
                }

                function compare(exp, charValue, i) {
                    var value, k, inputValue, year, month, day, fDay, lDay;
                    switch(exp.toString().replace(/\//g,'')) {
                        //月
                        case 'x':
                            value = input.val().substring(i - 1, i);
                            k = parseFloat(charValue);
                            if (value === '0') {
                                return (k > 0 && k <= 9);
                            } else if (value === '1') {
                                return (k >= 0 && k < 3);
                            }
                            break;
                        //日
                        case 'z':
                            inputValue = input.val();
                            value = inputValue.substring(i - 1, i);
                            k = parseFloat(charValue);
                            k = parseFloat(charValue);
                            if (value === '0') {
                                return (k > 0 && k <= 9);
                            } else if (value === '1' || value === '2'){
                                return (k >= 0 && k <= 9);
                            } else if (value === '3') {
                                return (k >= 0 && k <= 1);
                            }
                            break;
                        //小时
                        case 'r':
                            value = input.val().substring(i - 1, i);
                            k = parseFloat(charValue);
                            if (value === '0' || value === '1') {
                                return (k >= 0 && k <= 9);
                            } else if (value === '2') {
                                return (k >= 0 && k <= 3);
                            }
                            break;
                        //周
                        case 'k':
                            value = input.val().substring(i - 1, i);
                            k = parseFloat(charValue);
                            if (value === '0') {
                                return (k > 0 && k <= 9);
                            }else if (value === '1' || value === '2' || value === '3' || value === '4') {
                                return (k >= 0 && k <= 9);
                            } else if (value === '5') {
                                return (k >= 0 && k <= 3);
                            }
                            break;
                        default:
                            return exp.test(charValue);
                    }
                }

                function keydownEvent(e) {
                    if(input.prop('readonly')){
                        return;
                    }
                    var k = e.which,
                        pos,
                        begin,
                        end;

                    //backspace, delete, and escape get special treatment
                    if (k === 8 || k === 46 || (iPhone && k === 127)) {
                        pos = input.caretCL();
                        begin = pos.begin;
                        end = pos.end;

                        if (end - begin === 0) {
                            begin=k!==46?seekPrev(begin):(end=seekNext(begin-1));
                            end=k===46?seekNext(end):end;
                        }
                        clearBuffer(begin, end);
                        shiftL(begin, end - 1);

                        e.preventDefault();
                    } else if (k === 27) {//escape
                        input.val(focusText);
                        input.caretCL(0, checkVal());
                        e.preventDefault();
                    }
                }

                function keypressEvent(e) {
                    if(input.prop('readonly')){
                        return;
                    }
                    var k = e.which,
                        pos = input.caretCL(),
                        p,
                        c,
                        next;

                    if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {//Ignore
                        return false;
                    } else if (k) {
                        if (pos.end - pos.begin !== 0){
                            clearBuffer(pos.begin, pos.end);
                            shiftL(pos.begin, pos.end-1);
                        }

                        p = seekNext(pos.begin - 1);
                        if (p < len) {
                            c = String.fromCharCode(k);
                            //if (tests[p].test(c)) {

                            if (compare(tests[p], c, p)) {
                                shiftR(p);

                                buffer[p] = c;
                                writeBuffer();
                                next = seekNext(p);

                                if(android){
                                    setTimeout($.proxy($.fn.caret,input,next),0);
                                }else{
                                    input.caretCL(next);
                                }

                                if (settings.completed && next >= len) {
                                    settings.completed.call(input);
                                }
                            }
                        }
                        e.preventDefault();
                    }
                }

                function clearBuffer(start, end) {
                    var i;
                    for (i = start; i < end && i < len; i++) {
                        if (tests[i]) {
                            buffer[i] = settings.placeholder;
                        }
                    }
                }

                function writeBuffer() {input.val(buffer.join('')); }

                function checkVal(allow) {
                    //try to place characters where they belong
                    var test = input.val(),
                        lastMatch = -1,
                        i,
                        pos,
                        c,    
                        fmOpts = input.data('fmOpts');

                    for (i = 0, pos = 0; i < len; i++) {
                        if (tests[i]) {
                            
                            while (pos++ < test.length) {
                            	buffer[i] = settings.placeholder;
                                c = test.charAt(pos - 1);
                                //if (tests[i].test(c)) {
                                if (compare(tests[i], c, i)) {
                                    buffer[i] = c;
                                    lastMatch = i;
                                    break;
                                }
                            }
                            if (pos > test.length) {
                                break;
                            }
                        } else if (buffer[i] === test.charAt(pos) && i !== partialPosition) {
                            pos++;
                            lastMatch = i;
                        }
                    }
                    if (allow) {
                        writeBuffer();
                        input.val(input.val().substring(0, lastMatch + 1));
                    } else if (lastMatch + 1 < partialPosition) {
                        if(lastMatch === (partialPosition - 1) / 2 && fmOpts.isRange){
                            writeBuffer();
                            input.val(input.val().substring(0, fmOpts.separator ? lastMatch + 1 : lastMatch));
                        }else {
                            input.val("");
                            clearBuffer(0, len);
                        }
                    } else {
                        writeBuffer();
                        input.val(input.val().substring(0, lastMatch + 1));
                    }
                    return (partialPosition ? i : firstNonmaskCLPos);
                }

                input.data('fmOpts').buffer = buffer;
                input.data('fmOpts').clearBuffer = clearBuffer;


                input.data($.maskCL.dataName,function(){
                    return $.map(buffer, function(c, i) {
                        return tests[i] && c !== settings.placeholder ? c : null;
                    }).join('');
                });

                //if (!input.attr("readonly")){
                input
                    .one("unmaskCL", function() {
                        input
                            .unbind(".maskCL")
                            .removeData($.maskCL.dataName);
                    })
                    .bind("focus.maskCL", function() {
                        if(input.prop('readonly')){
                            return;
                        }
                        clearTimeout(caretTimeoutId);
                        var pos,
                            date,
                            fmOpts = input.data('fmOpts'),
                            moveCaret;

                        focusText = input.val();

                        if($.trim(focusText) !== ''){
                            if(!fmOpts.isRange){
                                date = C.Date.parse(focusText, fmOpts.format, fmOpts.iso8601, fmOpts.sunday_first);
                                focusText = input.val(C.Date.format(date, fmOpts.fullFormat, fmOpts.iso8601, fmOpts.sunday_first));
                            }else{
                                date = focusText.split('~');
                                if(date[0]){
                                    date[0] = C.Date.parse(date[0], fmOpts.format, fmOpts.iso8601, fmOpts.sunday_first);
                                    focusText = C.Date.format(date[0], fmOpts.fullFormat, fmOpts.iso8601, fmOpts.sunday_first);
                                }
                                if(date[1]){
                                    date[1] = C.Date.parse(date[1], fmOpts.format, fmOpts.iso8601, fmOpts.sunday_first);
                                    focusText += '~' + C.Date.format(date[1], fmOpts.fullFormat, fmOpts.iso8601, fmOpts.sunday_first);
                                }else{
                                    focusText += fmOpts.separator ? '~' : '';// + focusText;
                                }
                                input.val(focusText);
                            }
                        }
                        pos = checkVal(true);

                        caretTimeoutId = setTimeout(function(){
                            writeBuffer();
                            if (pos === mask.length) {
                                input.caretCL(0, pos);
                            } else {
                                input.caretCL(pos);
                            }
                        }, 10);
                    })
                    .bind("blur.maskCL", function() {
                        var fmOpts = input.data('fmOpts'),
                            $t = cui( input.parents('.C_CR_calInput_bd').eq(0).parent() ),
                            date;
                        //解决手动输入与点击选择一起出现的冲突问题
                        $t.options.el.data('timeOut', function(){
                            checkVal();
                            if($t.options.el.attr('isShow') === 'true'){
                                return;
                            }
                            if(input.val() !== ''){
                                if(!fmOpts.isRange){
                                    date = C.Date.parse(input.val(), fmOpts.fullFormat, fmOpts.iso8601, fmOpts.sunday_first);
                                    input.val(C.Date.format(date, fmOpts.format, fmOpts.iso8601, fmOpts.sunday_first));
                                }else{
                                    date = input.val().split('~');
                                    date[0] = C.Date.parse(date[0], fmOpts.fullFormat, fmOpts.iso8601, fmOpts.sunday_first);
                                    date[1] = C.Date.parse(date[1], fmOpts.fullFormat, fmOpts.iso8601, fmOpts.sunday_first);
                                    if(date[0] === null && date[1] !== null){
                                        date[0] = date[1];
                                    }
                                    if(date[0] !== null && date[1] !== null){
                                        if(date[0] - date[1] > 0){
                                            date.reverse();
                                        }
                                        input.val(C.Date.format(date[0], fmOpts.format, fmOpts.iso8601, fmOpts.sunday_first) + '~' +
                                            C.Date.format(date[1], fmOpts.format, fmOpts.iso8601, fmOpts.sunday_first));
                                    }
                                }
                            }
                            $t.setValue(date, false, 'entering');
                        }() );
                    })
                    .bind("keydown.maskCL", keydownEvent)
                    .bind("keypress.maskCL", keypressEvent)
                    .bind(pasteEventName, function() {
                        setTimeout(function() {
                            var pos=checkVal(true);
                            input.caretCL(pos);
                            if (settings.completed && pos === input.val().length){
                                settings.completed.call(input);
                            }
                        }, 0);
                    });
                //}
                checkVal(true); //Perform initial check for existing values
            });
        }
    });
})(window.comtop.cQuery , window.comtop);
;(function($, C) {
    C.UI.ClickInput = C.UI.Base.extend({
        options: {
            uitype: 'ClickInput',     //组件类型
            name: '',                 //组件名
            value: '',                //默认文本值
            emptytext: '',            //当前没有输入时显示的值
            width: '',                //默认宽度
            maxlength: -1,            //最大长度-1为不限制长度
            readonly: false,          //是否只读
            icon: '',                 //图片路径或者样式名
            iconwidth: '',            //图片长度
            enterable: false,         //点击回车是否触发图片点击事件
            editable: false,          //是否可编辑
            textmode: false,          //是否为文本模式
            on_iconclick: null,       //图片点击事件
            on_change: null,          //值改变事件
            on_focus: null,           //获得焦点事件
            on_blur: null,            //丢失焦点事件
            on_keyup: null,           //keyup事件
            on_keydown: null          //keydown事件
        },

        //绑定在元素上的相关值
        relation: "data-relation-value",
        
        tipPosition: '.click_input_base',

        _init: function() {
            var opts = this.options;
            opts.id = C.guid();
            if (opts.name == '') {
                opts.name = C.guid() + "_" + opts.uitype;
            }
        },

        _create: function() {
            var opts = this.options, $input;
            var cIcon = C.icon;
            var icon = opts.icon;
            this.$inputWrap = $('#' + opts.id + '_wrap');
            this.$inputBox = $('#' + opts.id + '_box');
            $input = this.$input = $('#' + opts.id);
            this.$iconspan = $('#' + opts.id + '_icon');
            this.$iconWarp = $('#' + opts.id + '_warp');
            this.$empty = opts.el.find(".cui_clickinput_empty").eq(0).on("click", function () {
                $input.focus();
            });

            if (/\./.test(icon)) {
                this.$iconspan.css("backgroundImage", "url(" + icon + ")");
            } else {
                this.$iconspan.html(cIcon[icon] || "&#xf03a;");
            }
            this.setWidth(opts.width);

            //设置只读
            if (opts.readonly) {
                this.setReadOnly(true);
            }

            if (opts.value == "" && opts.emptytext != "") {
                this.$empty.html(opts.emptytext);
            }

            //设置是否可写
            this.setEditAble(opts.editable);
        },

        /**
         * 设置宽度
         * @param width 宽度
         */
        setWidth: function(width) {
            this.$inputWrap.css({
                width: C.Tools.fixedNumber(width)
            });
        },

        /**
         * 设置值
         * @param value {String | Number} 值
         * @param isInit {Boolean} 是否是清空重置，清空重置不触发change
         */
        setValue: function(value, isInit) {
            var $input = this.$input,
                opts = this.options;

            value = (value == null || value == undefined) ? '' : value;
            if ($.type(value) === "string") {
                $input.removeAttr(this.relation);
                $input.val(value);
            } else if ($.type(value) === "array") {
                value = $.extend([], value);
                if (value.length > 0) {
                    $input.val(value[0]);
                    value.splice(0, 1);
                    $input.attr(this.relation, value.join("|"));
                }
            }

            //是否显示emptyText
            if ((value !== "" && value != null) || ($.type(value) === "array" && value.length > 0)) {
                this.$empty.html("");
            } else if (opts.emptytext !== "") {
                this.$empty.html(opts.emptytext);
            }

            //触发对象change事件
            if(isInit){
                this.onValid();
            }else{
                this._triggerHandler('change');
                this._changeHander();
            }

//            $input.trigger('change');
        },

        /**
         * 获取值
         */
        getValue: function() {
            var $input = this.$input;
            var opts = this.options;
            var value = $.trim($input.val());
            var relation = $input.attr(this.relation);
            var emptyText = opts.emptytext;
            if (value === emptyText) {
                return '';
            } else if (relation) {
                value = value + "|" + relation;
                return value.split("|");
            } else {
                return value;
            }
        },

        /**
         * 只读模式时供扫描器调用，获取组件值
         */
        getLabelValue: function() {
            var value = this.options.value;
            if ($.type(value) === 'string') {
                return value;
            } else if ($.type(value) === 'array') {
                if (value.length > 0) {
                    return value[0];
                } else {
                    return "";
                }
            }
        },

        /**
         * 设置可输入最大字节数
         * @param maxlength
         */
        setMaxLength: function(maxlength) {
            this.options.maxlength = maxlength;
        },

        /**
         * 设置只读，保留兼容
         * @param flag
         */
        setReadOnly: function(flag) {
            this.setReadonly(flag);
        },

        setReadonly: function(flag){
            var opts = this.options;
            var $inputWrap = this.$inputWrap;
            var $input = this.$input;

            opts.readonly = flag;
            if (flag) {
                $input.attr('readonly', true);
                $inputWrap.addClass('input_garybg');
                this._removeEmptyText(true);
            } else {
                if (opts.editable) {
                    $input.attr('readonly', false);
                }
                $inputWrap.removeClass('input_garybg');
                this._removeEmptyText(false);
            }

            this.$iconWarp.css({
                display: flag ? 'none' : 'inline-block'
            });
            flag && this.$inputBox.css("marginRight", 0);
        },

        /**
         * 设置是否可编辑
         * @param flag
         */
        setEditAble: function(flag) {
            var opts = this.options;
            var $input = this.$input;
            if (opts.readonly) return false;
            opts.editable = flag;
            if (flag) {
                $input.attr('readonly', false);
            } else {
                $input.attr('readonly', true);
            }
        },

        /**
         * 值改变事件
         * @param e
         * @private
         */
        _changeHander: function(e) {
            var opts = this.options;
            if (opts.readonly) return false;
            //是否显示emptyText
            if (this.getValue() !== "") {
                this.$empty.html("");
            } 
            //触发对象change事件
            this._triggerHandler('change');
            //执行用户事件回调
            this._customHandler('on_change', e);
        },

        /**
         * 获得焦点事件
         * @param e
         * @private
         */
        _focusHandler: function(e) {
            var opts = this.options;
            //如果输入框不可输入让输入框不能获取焦点
            if (opts.readonly) {
                return false;
            }
            //移除提示
            this._removeEmptyText(true);
            //添加样式
            this.$inputBox.addClass('input_focus');

            this.onValid();
            //执行用户回调
            this._customHandler('on_focus', e);
        },

        /**
         * 失去焦点事件
         * @param e
         * @private
         */
        _blurHandler: function(e) {
            var opts = this.options;
            var $inputBox = this.$inputBox;
            if (opts.readonly) return false;
            //添加提示
            this._removeEmptyText(false);
            //删除样式
            $inputBox.removeClass('input_focus');
            this._textCounter();

            var value = this.getValue();
            switch ($.type(value)){
                case 'string':
                    if(value !== '' && value != null){
                        this._triggerHandler('change');
                    }
                    break;
                case 'array':
                    if(value.length !== 0){
                        this._triggerHandler('change');
                    }
                    break;
            }

            //执行用户回调
            this._customHandler('on_blur', e);
        },

        /**
         * keyup事件
         * @param e
         * @private
         */
        _keyupHandler: function(e) {
            var opts = this.options;
            //var $input = this.$input;
            if (opts.readonly) return false;
            //限制最大输入字节数
            this._textCounter();
            //执行用户回调
            this._customHandler('on_keyup', e);
        },

        /**
         * keydown事件
         * @param e
         * @private
         */
        _keydownHandler: function(e) {
            var opts = this.options;
            if (opts.readonly) return false;
            if (opts.enterable && e.keyCode == 13) {
                this._iconclickHandler(e);
                return false;
            }
            //限制最大输入字节数
            //this._textCounter();
            //执行用户回调
            this._customHandler('on_keydown', e);
        },

        /**
         * 图片点击事件
         * @param e
         * @return {Boolean}
         * @private
         */
        _iconclickHandler: function(e) {
            var opts = this.options;
            if (opts.readonly) return false;
            //执行用户回调
            this._customHandler("on_iconclick", e);
        },

        /**
         * 用户事件
         * @param type 事件类型
         * @param e
         * @private
         */
        _customHandler: function(type, e) {
            var opts = this.options;
            var handler = opts[type];
            if ($.type(handler) == 'string') {
                typeof window[handler] === 'function' && window[handler].call(this, e, this);
            } else {
                typeof handler === 'function' && handler.call(this, e, this);
            }
        },

        /**
         * 显示或者隐藏emptyText
         * @param isHide true/false是否显示
         * @private
         */
        _removeEmptyText: function(isHide) {
            var $input = this.$input;
            var emptyText = this.options.emptytext;
            var inputValue = this.getValue();
            if (emptyText == '' || inputValue.length != 0) return;
            if (isHide) {
                this.$empty.html("");
            } else {
                this.$empty.html(emptyText);
            }
        },

        /**
         * 限制输入长度
         * @return {Boolean}
         * @private
         */
        _textCounter: function() {
            var opts = this.options;
            var value = this.getValue();
            if (typeof value === "object") {
                value = this.$input.val();
            }
            if (opts.maxlength > 0) {
                var currentLen = C.String.getBytesLength(value);
                if (currentLen > opts.maxlength) {
                    this.setValue(C.String.intercept(value, opts.maxlength));
                } else {
                    return false;
                }
            }
            return false;
        },

        /**
         * 验证失败时组件处理方法
         * @param obj
         * @param message
         */
        onInValid: function(obj, message) {
            var self = this,
                opts = self.options;
            self.$inputBox.addClass("click_input_invalid");
            if (opts.tipTxt == null) {
                opts.tipTxt = opts.el.attr("tip") || "";
            }
            opts.el.attr("tip", message);
            //设置tip类型，错误
            $(self.tipPosition, opts.el).attr('tipType', 'error');
        },

        /**
         * 验证成功时组件处理方法
         * @param obj
         */
        onValid: function(obj) {
            var self = this,
                opts = self.options,
                tipID = $(self.tipPosition, opts.el).attr('tipID');
            self.$inputBox.removeClass("click_input_invalid");
            if (opts.tipTxt == null) {
                opts.tipTxt = opts.el.attr("tip") || "";
            }
            if(tipID !== undefined){
                //隐藏提示
                var $cuiTip = cui.tipList[tipID];
                typeof $cuiTip !== 'undefined' && $cuiTip.hide();
            }
            opts.el.attr("tip", opts.tipTxt);
            //设置tip类型，正常
            $(self.tipPosition, opts.el).attr('tipType', 'normal');
        }
    });
})(window.comtop.cQuery, window.comtop);
/**
 * 动态表单
 * update: 2013-03-13 by chaoqun.lin
 */
;(function($, C){
	C.UI.Customform = C.UI.Base.extend({
		options: {
			uitype: 'Customform',
			columnCount: 2,
			datasource: [],
            classname: 'customform'
		},

		_create: function(){
			var datasource = this.options.datasource,
                item,
                type,
				uitype,
                $cui,
                i, len;
            //创建验证对象
            window.validater = window.validater || cui().validate();
            //为了加快渲染速度，只有当CUI全部创建完成后才进行数据绑定和验证绑定
			for (i = 0; i < datasource.length; i++){
				item = datasource[i];
				uitype = item.uitype || item.uiType;
				type = uitype.charAt(0).toLowerCase() + uitype.substring(1);
				cui(item.el)[type](item);
			}
            //数据绑定
            for (i = 0; i < datasource.length; i++){
                item = datasource[i];
                this._bindData($(item.el), item.databind);
            }
            //验证绑定和tip绑定
            if(!C.UI.scan.textmode && !comtop.UI.scan.disable){
                for(i = 0, len = datasource.length; i < len; i ++){
                    item = datasource[i];
                    $cui = $(item.el).data('uitype');
                    if($cui && !$cui.options.textmode && !$cui.options.disable){
                        this._bindValidate($cui.options.el, item.validate);
                        this._bindTip($cui.options.el, item, $cui.tipPosition || $cui.options.el);
                    }
                }
            }
		},
        /**
         * 数据绑定
         * @param $el {jQuery} 组件占位符
         * @param db {String} 绑定数据
         * @private
         */
        _bindData: function($el, db){
            //数据绑定
            if (db) {
                var chain = db.split('.');
                var dataSourceName = chain[0];
                var propName = chain[1];
                var dataSource = window[dataSourceName];
                //如果dataSource不存在，创建空数据
                if(!dataSource){
                    dataSource = window[dataSourceName] = {};
                }
                if(dataSource.nodeName){
                    alert('数据'+ dataSourceName +'与页面的标签ID名相同，请更名;');
                    return false;
                }
                var databinder = cui(dataSource).databind();
                databinder.addBind($el, propName);
            }
        },
        /**
         * 验证绑定
         * @param $el {jQuery} 组件占位符
         * @param vd {Array | String}  验证配置
         * @private
         */
        _bindValidate: function($el, vd){
            if(vd){
                switch ($.type(vd)){
                    case 'array':
                        for(var i = 0; i < vd.length; i ++){
                            if(vd[i].rule){
                                window.validater.add(cui($el), vd[i].type, vd[i].rule);
                            }else{
                                window.validater.add(cui($el), vd[i].type);
                            }
                        }
                        break;
                    case 'string':
                        window.validater.add(cui($el), vd);
                }
            }
        },
        /**
         * 提示绑定
         * @param $el {jQuery} 组件占位符
         * @param opts {Object} 配置参数
         * @param $tipPos {String}  提示绑定位置
         * @private
         */
        _bindTip: function($el, opts, $tipPos){
            $tipPos = $($tipPos, $el);
            if(cui($el).options.textmode != undefined && opts.tip == undefined){
                $el.attr('tip', '');
                opts.tip = '';
            }
            if(opts.tip != undefined){
                $el.attr('tip', opts.tip);
                cui.tip($tipPos, {
                    trigger: opts.trigger,
                    tipEl: $el
                });
            }
        }
	});
})(window.comtop.cQuery, window.comtop);
/**
 * 对话框组件
 * @author chenxuming
 * @since 2013-11-11
 * @require jQuery
 */
(function (win) {
    'use strict';
    if (!win.cui) {
        win.cui = {};
    }
    var C = win.comtop, $ = C && C.cQuery ? C.cQuery : win.jQuery, cui = win.cui,doc=win.document;
    var isIE6 = C.Browser.isIE6,
        isIEQ = C.Browser.isQM;
    var creatEventProxyLay=function(){
        var body = $("body"),obj=body.data("cui_dialog_eventproxylay");
        if(!obj){
            obj= $(doc.createElement("div")).addClass("cui_dialog_eventproxylay").appendTo(body);
            body.data("cui_dialog_eventproxylay",obj);
        }
        return obj;
    };
    var Dialog = function (options) {
        options = options || {};
        this.opt = $.extend(true, {}, this.options, options);
        this._init();
    };
    Dialog.prototype = {
        options: {
            uitype: "Dialog",
            id: "",
            title: "",                     //窗口标题
            modal: true,                   //是否模态窗口
            opacity: 0.5,                  //遮罩层透明度
            canClose: true,                //是否可以关闭
            outClose: false,                //点击窗口以外是否可以关闭（chaoqun.lin 新增）
            width: 350,                    //宽度
            height: 100,                   //高度
            left: "50%",                       //横向位置
            top: "50%",                       //纵向位置
            draggable: true,               //是否可以拖动
            hideContent:false,             // 拖动时是否隐藏内容
            onClose: null,                 //窗口关闭时的回调函数
            beforeClose: null,             //窗口关闭之前执行的函数
            src: "",                     //如果窗口的内容是一个iframe，则使用该配置项
            html: "",                    //弹窗内容，此属性和 iframe只能选其一
            buttons: [],
            page_scroll: true,
            refresh:false,               //当dialog是iframe时，使用cui.dialog 显示是否需要重新请求url
            dragClass: ".dialog-titlebar"
        },
        /**
         * 组件初始化
         * @private
         */
        _init: function () {
            this._preProcessSettings();
            this._buildHTML();
            this._markUp();
            this._setContent();
            this._setUpSize();
            this._bindEvent();
        },
        /**
         *处理left ,top, id
         * @private
         */
        _preProcessSettings: function () {
            var op = this.opt,
                guid = function () {
                    return (900 * Math.random() + 100).toString().replace(".", "");
                };
            if(typeof op.width==="string"){
                op.width =win.parseInt(op.width);
            }
            if(typeof op.height==="string"){
                op.height =win.parseInt(op.height);
            }
            op.id = op.id === "" ? "dialog_" + guid() : op.id;
            op.left = op.left.toString();
            op.top = op.top.toString();
            op.left = op.left.indexOf("%") !== -1 ? op.left : parseInt(op.left, 10) + "px";
            op.top = op.top.indexOf("%") !== -1 ? op.top : parseInt(op.top, 10) + "px";
           if(win.frameElement){ //嵌套在iframe里边的
               var h= op.buttons.length?105:50;
               if(op.height>$(win).height()-h){
                   op.height = $(win).height()-h;
               }

           }
        },
        /**
         * 构建模板
         * @private
         */
        _buildHTML: function () {
            var op = this.opt,
                html = [];
            if (op.modal) {
                if(isIE6){
                    html.push('<iframe id="cui_overlay_iframe_',op.id,'" class="cui_overlay_iframe"></iframe>');
                }
                html.push('<div class="cui_overlay" id="cui_overlay_', op.id, '"></div>');
            }
            html.push('<div class="cui-dialog-container" id="', op.id, '" style="');
            html.push('left:', op.left, '; top:', op.top, ';">');
            if (op.canClose) {
                html.push('<a href="#/" title="关闭" hidefocus="true" class="dialog-close-btn"></a>');
            }
            html.push('<div class="dialog-titlebar"><span class="dialog-title" title="' + op.title.replace(/<.*?>/g, '').replace('"', '＂') + '">');
            html.push(op.title, '</span></div>');
            html.push('<div class="dialog-content" >');
            if (typeof op.html === "string" && op.html !== "") {
                html.push('<div class="dialog-content-inner">');
                html.push(op.html);
                html.push('</div>');
            } else if (typeof op.src === "string" && op.src !== "") {
                html.push('<iframe class="dialog-content-iframe" frameborder="no" border="0" src="about:blank" ></iframe><div class="dialog-iframe-loading"></div>');
            } else {
                html.push('<div class="dialog-content-inner"></div>');
            }
            if ($.isArray(op.buttons) && op.buttons.length > 0) {
                html.push('<div class="dialog-ft">');
                html.push(this._buildButtons());
                html.push('</div>');
            }
            html.push('</div>');

            html.push('</div>');

            $("body").append(html.join(""));

        },
        /**
         * 解析成员变量
         * @private
         */
        _markUp: function () {
            var op = this.opt;
            this._$dialogContainer = $("#" + op.id);
            this._$dialogContent = this._$dialogContainer.find(".dialog-content-inner");
            this._$iframe = this._$dialogContainer.find(".dialog-content-iframe");
            this._$loadingLay = this._$dialogContainer.find(".dialog-iframe-loading");
            this._$buttonContainer = this._$dialogContainer.find(".dialog-ft");
            this._$overlay = $("#cui_overlay_" + op.id);
            this._$iframecover=$("#cui_overlay_iframe_" + op.id);
            this._$mousemoveProxyLay= creatEventProxyLay();
        },
        /**
         * 加载dialog内容，opt.html为dom时或者使用cui("#XXX")时调用
         * @private
         */
        _setContent: function () {
            var op = this.opt;
            if (typeof op.el === "object") {
                this._$dialogContent.prepend($(op.el).show());
            }
            else if (typeof op.html === "object") {
                this._$dialogContent.prepend($(op.html).show());
            }
        },
        /**
         * 设置高度，宽度
         * @private
         */
        _setUpSize: function () {
            var op = this.opt;
            if (op.height) {
                if (this._$iframe.length) {
                    this._$iframe.height(op.height);
                } else {
                    this._$dialogContent.height(op.height);
                }
            }
            if (op.width) {
                this._$dialogContainer.width(op.width);
            }
        },
        /**
         * 绑定事件
         * @private
         * 
         */
        _bindEvent: function () {
            var op = this.opt,
                self = this;
            this._$dialogContainer.delegate("a.cui-btn-generate-by-dg,a.dialog-close-btn", "click", function (e) {
                var target = $(e.target), index = target.attr("proxyIndex");
                //可用按钮
                if (index && index !== "") {
                    if(!op.buttons[index].disable){
                        index = parseInt(index, 10);
                        op.buttons[index].handler.call(self);
                    }
                    return false;
                }
                //关闭按钮
                self.hide();
                return false;

            });

            //窗口以外具备关闭窗口功能
            if(op.outClose && op.canClose){
                //如果不使用modal，则document需要添加关闭监听
                if(!op.modal){
                    $(document).unbind('mouseup.dialog').bind('mouseup.dialog', function(e){
                        var target  = $(e.target).closest(".cui-dialog-container");
                        if(!target.length && $('.cui-dialog-container').is(":visible")){
                            self.hide();
                            return false;
                        }
                    });
                }
                //如果使用modal，只需要在overlay上添加关闭监听
                this._$overlay.bind('click', function(){
                    self.hide();
                    return false;
                });
            }

            if (op.draggable) {
                this._doDrag();
            } else {
                this._$dialogContainer.find(".dialog-titlebar").css("cursor", "default");
            }
        },
        /**
         * 拖动
         * @private
         */
        _doDrag: function () {
            var op = this.opt, flag = false,hide=false, self = this, detal = { top: 0, left: 0 },
                checkBorder = function (pos) {
                    var winHeight = $(win).height(), winWidth = $(win).width(), w = self._dialogContainerOuterWidth,
                        h = self._dialogContainerOuterHeight;
                    if (pos.left + w >= winWidth) {
                        pos.left = winWidth - w;
                    }
                    if (pos.top + h >= winHeight) {
                        pos.top = winHeight - h;
                    }
                },
                offEvent = function (e) {
                    e.stopPropagation();
                    flag = false; hide=false;
                   // $(doc).off("mousemove.dialogDrag").off("mouseup.dialogDrag");
                    self._$mousemoveProxyLay.hide().off();
                    self._showContent(true);
                },
                move = function (e) {
                    if (flag) {
                        var pos = {left: e.clientX - detal.left, top: e.clientY - detal.top,
                            "margin-left": "", "margin-top": "", "bottom": "", "right": ""};
                        pos.left = pos.left < 0 ? 0 : pos.left;
                        pos.top = pos.top < 0 ? 0 : pos.top;
                        checkBorder(pos);
                        self._$dialogContainer.css(pos);
                        op.left = pos.left;
                        op.top = pos.top;
                        if(!hide){
                            self._showContent(false);
                            hide=true;
                        }

                    }
                };
            $(op.dragClass, this._$dialogContainer).on("mousedown.dialogDrag",function (e) {
                var offset = this.getBoundingClientRect();
                detal.top = e.clientY - offset.top;
                detal.left = e.clientX - offset.left;
                flag = true;
                self._$mousemoveProxyLay.show().off().on("mousemove.dialogDrag",function (e) {
                    move(e);
                }).on("mouseup.dialogDrag", offEvent);
              return false;
            }).on("mouseup.dialogDrag", offEvent);

        },
        /**
         * 是否显示内容
         * @param flag {boolean}是否显示
         * @private
         */
        _showContent: function (flag) {
            if (flag) {
                if(this.opt.hideContent){
                    this._$dialogContent.css("visibility","visible");
                    this._$iframe.css("visibility","visible");
                }
            } else {
                if(this.opt.hideContent){
                    this._$dialogContent.css("visibility","hidden");
                    this._$iframe.css("visibility","hidden");
                }
            }
        },
        /**
         * 构建按钮
         * @returns {string}
         * @private
         */
        _buildButtons: function () {
            var op = this.opt,
                bOp = {
                    hide: false,
                    disable: false,
                    handler: function () {},
                    name: "按钮"
                },
                html = [];
            for(var i= 0,len=op.buttons.length;i<len;i++){
                op.buttons[i]=$.extend({}, bOp, op.buttons[i]);
                var button= op.buttons[i], classzz = "cui-button cui-btn-generate-by-dg ";
                classzz += button.disable ? " disable-button " : "";
                classzz += button.hide ? " btn-normal-hide " : "";
                html.push('<a href="#/" hidefocus="true" onclick="return false;" class="', classzz, '" proxyIndex="', i, '">', button.name, '</a>');
            }
            return html.join("");
        },
        /**
         *计算dialog位置
         * @returns {{margin-left: number, margin-top: number}}
         * @private
         */
        _calPosition: function () {
            var op = this.opt;
            return {"margin-left": -op.width / 2, "margin-top": -op.height / 2};
        },
        /**
         * 设置dialog弹出的位置
         * @private
         */
        _setPosition: function () {
            var op = this.opt,container=this._$dialogContainer,pos;
            if (op.left === "50%" && op.top === "50%") {
                container.css(this._calPosition());
            } else if (op.left === "100%" && op.top === "100%") {
                container.css({left: "", top: "", right: 0, bottom: 0});
            }else if(op.left==="50%"&& op.top!=="50%"){
                pos =this._calPosition();
                container.css({"margin-left":pos["margin-left"]});
            }
        },
        /**
         * 显示overlay
         * @private
         */
        _showOverLay: function () {
            if (this._$overlay.length === 0) {
                return;
            }
            if (isIE6 || isIEQ) {
                this._ieQScrollTop=$(doc).scrollTop();
                $(doc).scrollTop(0);
                $("html,body").addClass("cui_overlay_dialog_ie6");
                if(this._$iframecover.length){
                    this._$iframecover.show();
                }
            }
            this._$overlay.css("opacity", this.opt.opacity).show();

        },
        /**
         * 隐藏遮罩层
         * @private
         */
        _hideOverLay: function () {
            if (this._$overlay.length === 0) {
                return;
            }
            if (isIE6 || isIEQ) {
                $("html,body").removeClass("cui_overlay_dialog_ie6");
                if(this._$iframecover.length){
                    this._$iframecover.hide();
                }
                $(doc).scrollTop(this._ieQScrollTop);
            }
            this._$overlay.hide();
        },
        /**
         * 初始化iframe
         * @private
         */
        _initIframeSrc: function () {
            if (this._$iframe.length) {
                if(!this._srcSetted||this.opt.refresh){
                    this._loadIframe(this.opt.src);
                    this._srcSetted = true;
                }
            }
        },
        /**
         * 缓存dialog的width,height
         * @private
         */
        _cacheDialogSize: function () {
            this._dialogContainerOuterWidth = this._$dialogContainer.outerWidth();
            this._dialogContainerOuterHeight = this._$dialogContainer.outerHeight();
        },
        /**
         * 加载iframe
         * @param src   iframe的src
         * @private
         */
        _loadIframe:function(src){
            var self = this;
            this._$loadingLay.height(this._$iframe.height()).show();
            this._$iframe.one("load", function () { this.setAttribute("src",src); });
            this._$iframe.css("visibility","hidden").attr("src", "about:blank");
            setTimeout(function(){
                self._$iframe.css("visibility","visible");
                self._$loadingLay.hide();
            },500);
        },


        /**
         * 显示dialog
         * @param src {String}  url 地址
         * @returns {*}
         */
        show: function (src) {
            if (!this.opt.page_scroll) {
                $("html").addClass("cui-dialog-noscroll");
            }
            this._setPosition();
            this._showOverLay();
            if (!src) {
                this._initIframeSrc();
            } else {
                this.reload(src);
            }
            this._$dialogContainer.show();
/*            if(this._$mousemoveProxyLay){
                this._$mousemoveProxyLay.appendTo(doc.body);
            }*/
            this._cacheDialogSize();
            return this;
        },
        /**
         * 重新加载iframe
         * @param src
         * @returns {*}
         */
        reload: function (src) {
            if (!this._$iframe.length || !src) {
                return this;
            }
            this._loadIframe(src);
            this.opt.src = src;
            return this;
        },
        /**
         * 隐藏dialog
         * @returns {*}
         */
        hide: function () {
            //如果beforeClose是function，且返回true，则执行关闭，否则，中止关闭操作
            if (typeof this.opt.beforeClose === "function") {
                if (this.opt.beforeClose.call(this) === false) {
                    return this;
                }
            }
            this._hideOverLay();
            this._$dialogContainer.hide();
            if (!this.opt.page_scroll) {
                $("html").removeClass("cui-dialog-noscroll");
            }
            if (typeof this.opt.onClose === "function") {
                this.opt.onClose.call(this);
            }
            return this;
        },
        setTitle: function (value) {
            var type = typeof value;
            if (type === "number" || type === "string") {
                this.opt.title = value;
                $("span.dialog-title", this._$dialogContainer).html(value);
            }
            return this;
        },
        /**
         * 设置按钮属性。本方法允许两种传入参数方式
         *  @param index {number}  按钮index
         *  @param setting {number} 按钮设置
         * or 修改所有按钮设置
         * @param setting {Array[setting]} 按钮设置
         */
        setButton: function (index, setting) {
            var paramLength = arguments.length,
                op = this.opt, self = this,
                rebuildButtons = function () {
                    if (self._$buttonContainer.length) {
                        self._$buttonContainer.html(self._buildButtons());
                    }
                };
            if (paramLength === 1 && $.type(index) === "array") {
                $.extend(op.buttons, index);
                rebuildButtons();
            } else if (paramLength === 2 && typeof index === "number") {
                if (index > op.buttons.length) {
                    return;
                }
                $.extend(op.buttons[index], setting);
                rebuildButtons();
            }
            return this;
        },
        /**
         * 设置Dialog高宽
         * @param size {Object} 高宽配置参数 {width: xxxx, height: xxxx}
         * @returns {Dialog}
         */
        setSize: function (size) {
            if ($.type(size) !== "object") {
                return this;
            }
            if (size.width) {
                this.opt.width = size.width;
            }
            if (size.height) {
                this.opt.height = size.height;
            }
            this._setUpSize();
            this._setPosition();
            this._cacheDialogSize();
            return this;
        },
        /**
         * 获取dialog内iframe内部成员变量
         * @param name
         * @returns {*}
         */
        getIframeMember: function (name) {
            if (this._$iframe.length) {
                return this._$iframe.get(0).contentWindow[name];
            } else {
                return null;
            }
        },
        /**
         * 获取dialog内iframe          *
         * @returns iframe
         */
        getIframe: function () {
            if (this._$iframe.length) {
                return this._$iframe.get(0);
            } else {
                return null;
            }
        },
        /**
         *移动dialog
         * @param top
         * @param left
         */
        move:function(top,left){
            var cssObj={};
            if(typeof top ==="number"){
                cssObj.top = top;
                cssObj["margin-top"] = "";
                this.opt.top = top;
            }
            if(typeof left ==="number"){
                cssObj.left = left;
                cssObj["margin-left"] = "";
                this.opt.left = left;
            }
            if($.isEmptyObject(cssObj)){return this;}
            cssObj = $.extend({bottom:"",right:""},cssObj);
            this._$dialogContainer.css(cssObj);
            return this;
        },
        /**
         * 销毁dialog
         *
         */
        destroy: function () {
            this._$dialogContainer.remove();
            this._hideOverLay();

            if (this._$overlay.length) {
                this._$overlay.remove();
            }
            if(this._$iframecover.length){
                this._$iframecover.remove();
            }
            this._$mousemoveProxyLay=this._$iframecover=null;
            this._$dialogContainer =this._$overlay=null;
            this._$dialogContent =this._$iframe=null;
            this._$loadingLay=this._$buttonContainer=null;
            this.opt=null;
        }
    };
    Dialog.prototype.constructor = Dialog;
    /**
     * 兼容cui base代码
     */
    if (C && C.UI && C.cQuery) {
        C.UI.Dialog = Dialog;
        C.cQuery.fn.dialog = function(options){
            var obj = this.data("uitype");
            options = options||{};
            options.html = this.get(0);
            if(typeof obj !== "object"){
                obj = new C.UI.Dialog(options);
                obj.isCUI = true;
                this.data("uitype",obj);
            }
            return obj;
        };
    }
    //export
    /**
     * 用户创建dialog接口
     * @param options {json} dialog配置
     * @returns {Dialog}
     */
    cui.dialog = function (options) {
        var customerId = options.id,
            oldDialog = cui("#"+customerId);
        if(oldDialog instanceof Dialog){
             if(typeof options.title==="string"&&oldDialog.opt.title!==options.title){
                 oldDialog.setTitle(options.title);
             }
             if(typeof options.src==="string"){
                 if(oldDialog.opt.src!==options.src){
                     oldDialog.reload(options.src);
                 }
             }
            return oldDialog;
        }
        var dialog = new Dialog(options);
        if (typeof C === "object" && customerId) {
            dialog.isCUI = true;
            C.cQuery("#" + customerId).data("uitype", dialog);
        }
        return dialog;
    };
    /**
     * 配置默认options
     * @param opts {Object} 配置对象
     */
    cui.dialog.setOpt = function(opts){
        if($.type(opts) !== 'object'){
            return;
        }
        $.extend(Dialog.prototype.options, opts);
    };
})(window);
;(function($, C) {
    C.UI.Input = C.UI.Base.extend({
        options: {
            uitype: 'Input',        //组件类型
            width: '200px',              //默认宽度
            readonly: false,       //是否只读
            maxlength: -1,          //最大长度-1为不限制长度
            byte: true,             //最大长度计算方式，true按字节计算，false按字符计算
            value: '',              //默认文本值
            emptytext: '',          //当前没有输入时显示的值
            name: '',               //组件名
            type: 'text',           //组件类型text/password
            mask: '',               //inputmask模板属性
            fill: '',               //当输入框为空的时候，代替字符，比如，当mask="Money"，在清空输入框的时候，失焦，这时候，自动填充
            maskoptions: {},        //inputmask模板扩展
            textmode: false,        //是否为只读模式
            align: 'left',          //input框的文字对齐
            on_change: null,        //值改变事件
            on_focus: null,         //获得焦点事件
            on_blur: null,          //丢失焦点事件
            on_keyup: null,         //keyup事件
            on_keydown: null,        //keydown事件
            on_keypress: null       //keypress事件
        },

        tipPosition: '.cui_inputCMP_wrap',

        _init: function() {
            var opts = this.options;
            opts.id = 'cui_inputCMP_' + C.guid();
            if (opts.type !== 'password' && opts.type !== 'hidden') {
                opts.type = 'text';
            }
            if (opts.name === '') {
                opts.name = C.guid() + "_" + opts.uitype;
            }
            opts.value = (opts.value === null || opts.value === undefined) ? '' : opts.value;

            //value转义
            opts.value = opts.value.replace(/\"/g, '&quot;').replace(/\'/g, '&#39;');
        },

        /**
         * 初始化方法
         * @private
         */
        _create: function() {
            var self = this,
                opts = self.options, $input;
            $input = this.$input = $('#' + opts.id).css('textAlign', opts.align);
            this.$empty = opts.el.find(".cui_input_empty").eq(0).css("text-align", opts.align).on("mousedown", function () {
                $input.focus();
            });
            //执行模板代码
            if (opts.mask !== '') {
                var settings = $.extend({}, opts.maskoptions, {callback: function() {
                    self._removeEmptyText(false);
                }});
                C.UI.InputMask.doMask(this.$input, opts.mask, settings);
            }

            if (opts.value === "") {
                this.$empty.html(opts.emptytext);
            }
            if (opts.maxlength > -1) {
                opts.byte || this.$input.attr('maxlength', opts.maxlength);
                this.$input.on("keydown", function(e) {
                    var len = opts.byte && self._textCounter();
                    if (len >= self.options.maxlength) {
                        if (!getSelectionText(this) && (e.keyCode != 8 && e.keyCode != 127)) {
                            if (e.preventDefault) {
                                e.preventDefault();
                            } else {
                                e.returnValue = false;
                            }
                        }
                    }
                });
                this._textCounter();

                function getSelectionText(obj) {
                    if (document.selection) { //IE
                        return document.selection.createRange().text;
                    } else {
                        return obj.value.substring(obj.selectionStart,
                            obj.selectionEnd);
                    }
                }
            }

            self.$input.on('blur', function(e){
                self._blurHandler(e);
            });
        },
        /**
         * 设置宽度
         * @param width {String|Number}宽度
         */
        setWidth: function(width) {
            if(typeof width === 'string' && /\d+(\%|px|pt|em)/.test(width)){
                this.options.el.children('div').css({
                    width: width
                });
            }else if(typeof width === 'number'){
                this.options.el.children('div').css({
                    width: width + 'px'
                });
            }
        },

        /**
         * 设置值
         * @param value {String | Number} 值
         * @param isInit {Boolean} 是否是清空重置，清空重置不触发change
         */
        setValue: function(value, isInit) {
            var $input = this.$input,
                opts = this.options;
            value = (value == null || value == undefined) ? '' : value;
            $input.val(value);
            //限制最大输入字节数
            if(opts.maxlength > 0){
                this._textCounter();
            }

            //是否显示emptyText
            if (value !== "") {
                this.$empty.html("");
                //执行模板代码
                if (opts.mask !== '') {
                    var settings = $.extend({}, opts.maskoptions, {callback: function() {
                        this._removeEmptyText(false);
                    }});
                    C.UI.InputMask.doMask(this.$input, opts.mask, settings);
                }
            } else if (opts.emptytext !== '') {
                this.$empty.html(opts.emptytext);
            }

            if(isInit){
                this.onValid();
            }else{
                this._triggerHandler('change');
                $input.change();
            }
        },

        /**
         * 获取值
         */
        getValue: function() {
            var $input = this.$input;
            var opts = this.options;
            var value = $input.val();
            if (opts.mask !== '') {
                return C.UI.InputMask.unMaskValue($input, opts.mask, opts.maskoptions);
            }
            return value;
        },

        /**
         * 设置占位符文字
         * @param txt {String} 文字
         */
        setEmptyText: function(txt){
            var opts = this.options,
                $input = this.$input;
            if(typeof txt !== 'string'){
                return;
            }
            if($.trim(txt) === ''){
                opts.emptytext = '';
            }else{
                opts.emptytext = txt;
            }
            if(this.getValue() === ''){
                this.$empty.html(opts.emptytext);
            }
        },

        /**
         * 设置可输入最大字节数
         * @param maxlength
         */
        setMaxLength: function (maxlength) {
            this.options.maxlength = maxlength;
        },

        /**
         * 设置只读
         * @param flag 是否只读
         */
        setReadOnly: function(flag) {
            var opts = this.options;
            var $input = this.$input;

            opts.readonly = flag;
            $input.attr('readonly', flag);
            if (flag) {
                opts.el.children('div').addClass('cui_inputCMP_readonly');
                this._removeEmptyText(true);
            } else {
                opts.el.children('div').removeClass('cui_inputCMP_readonly');
                this._removeEmptyText(false);
            }
        },
        setReadonly: function(flag) {
            this.setReadOnly(flag);
        },

        /**
         * 输入框获焦
         * @return {*}
         */
        focus: function(){
            var opts = this.options;
            if(!opts.readonly){
                opts.el.find(':text, :password')[0].focus();
            }
            return this;
        },

        /**
         * 值改变事件
         * @param e
         * @private
         */
        _changeHander: function(e) {
            var opts = this.options;
            var $input = this.$input;
            if (opts.readonly) {
                return false;
            }
            //是否显示emptyText
            if (this.getValue() !== "") {
                this.$empty.html("");
            } else if (opts.emptytext !== "") {
                this.$empty.html(opts.emptytext);
            }
            //触发对象change事件
            this._triggerHandler('change');
            //执行用户事件回调
            this._customHandler('on_change', e);

            if(this.getValue() === '' && opts.fill !== ''){
                $input.val(opts.fill);
            }
        },

        /**
         * 获得焦点事件
         * @param e
         * @private
         */
        _focusHandler: function(e) {
            var opts = this.options;
            var self = this;
            //var $input = this.$input;

            if (opts.readonly) {
                //$input.blur();
                return false;
            }
            //移除提示
            self._removeEmptyText(true);

            //添加样式
            opts.el.addClass('cui_inputCMP_focus');

            //获焦时去掉错误认证信息
            self.onValid();

            //值为0的时候，让输入框内容全选
            if(self.getValue() === '0'){
                setTimeout(function(){
                    self.$input[0].select();
                },20);
            }

            //执行用户回调
            self._customHandler('on_focus', e);

        },

        /**
         * 失去焦点事件
         * @param e
         * @private
         */
        _blurHandler: function(e) {
            var opts = this.options;

            if (opts.readonly) {
                return false;
            }
            //添加提示
            this._removeEmptyText(false);
            //删除样式
            opts.el.removeClass('cui_inputCMP_focus');
            this._textCounter();

            //失焦时，如果内容不为空时，触发change
            var value = this.getValue();
            if(value !== '' && value != null){
                this._triggerHandler('change');
            }

            //执行用户回调
            this._customHandler('on_blur', e);
        },

        /**
         * keyup事件
         * @param e
         * @private
         */
        _keyupHandler: function(e) {
            var opts = this.options;
            if (opts.readonly) {return false;}
            //限制最大输入字节数
            //opts.byte && this._textCounter();
            //执行用户回调
            this._customHandler('on_keyup', e);
        },

        /**
         * keydown事件
         * @param e
         * @private
         */
        _keydownHandler: function(e) {
            var opts = this.options;
            if (opts.readonly) {return false;}
            if(e.which===13&&this.getValue()===""){ //空value，按下回车，此时需要阻止change事件触发，否则emptytext不正常
                e.preventDefault();
            };

            //限制最大输入字节数
            //this._textCounter();
            //执行用户回调
            this._customHandler('on_keydown', e);
        },

        /**
         * keypress事件
         * @param e
         * @private
         */
        _keypressHandler: function(e) {
            var opts = this.options;
            if (opts.readonly) return false;
            //限制最大输入字节数
            //this._textCounter();
            //执行用户回调
            /*             if(opts.maxlength>-1){
             var len =C.String.getBytesLength(this.getValue());
             if(len  >= opts.maxlength && e.which > 14 && !e.ctrlKey ) {
             // e.preventDefault();
             }
             }*/
            this._customHandler('on_keypress', e);
        },

        /**
         * 用户事件
         * @param type 事件类型
         * @param e
         * @private
         */
        _customHandler: function(type, e) {
            var opts = this.options;
            var handler = opts[type];
            if ($.type(handler) === 'string') {
                typeof window[handler] === 'function' && window[handler].call(this, e, this);
            } else {
                typeof handler === 'function' && handler.call(this, e, this);
            }
        },

        /**
         * 显示或者隐藏emptyText
         * @param isHide true/false是否显示
         * @private
         */
        _removeEmptyText: function(isHide) {
            var emptyText = this.options.emptytext;
            var inputValue = this.getValue();
            var opts = this.options;
            if (emptyText === '' || inputValue.length !== 0) {
                return;
            }
            if (isHide) {
                this.$empty.html("");
            } else {
                this.$empty.html(opts.emptytext);
            }
        },

        /**
         * 限制输入长度
         * @return {Boolean}
         * @private
         */
        _textCounter: function(isInit) {
            var opts = this.options;
            var value = this.getValue();
            if (opts.maxlength > -1) {
                var currentLen =  this._getStringLength(value);
                if (currentLen > opts.maxlength) {
                    this.$input.val(this._interceptString(value, opts.maxlength));
                    // this.setValue(C.String.intercept(value, opts.maxlength));
                } else {
                    return false;
                }
            }
            return false;
        },
        /**
         * 计算字符串长度
         * @param value {String} 字符串
         * @returns {Number|*}
         * @private
         */
        _getStringLength: function(value){
            var opts = this.options;
            return opts.byte ? C.String.getBytesLength(value) : value.length;
        },
        /**
         * 截取字符串
         * @param value {String} 字符串
         * @param length {Number} 载取长度
         * @returns {*}
         * @private
         */
        _interceptString: function(value, length){
            var opts = this.options;
            return opts.byte ? C.String.intercept(value, length) : C.String.interceptString(value, length);
        },

        /**
         * 验证失败时组件处理方法
         * @param obj
         * @param message
         */
        onInValid: function(obj, message) {
            var self = this,
                opts = self.options;
            opts.el.addClass("cui_inputCMP_error");
            if (opts.tipTxt == null) {
                opts.tipTxt = opts.el.attr("tip") || "";
            }
            opts.el.attr("tip", message);
            //设置tip类型，错误
            $(self.tipPosition, opts.el).attr('tipType', 'error');
        },

        /**
         * 验证成功时组件处理方法
         * @param obj
         */
        onValid: function(obj) {
            var self = this,
                opts = self.options,
                tipID = $(self.tipPosition, opts.el).attr('tipID');
            opts.el.removeClass("cui_inputCMP_error");
            if (opts.tipTxt == null) {
                opts.tipTxt = opts.el.attr("tip") || "";
            }
            if(tipID !== undefined){
                //隐藏提示
                var $cuiTip = cui.tipList[tipID];
                typeof $cuiTip !== 'undefined' && $cuiTip.hide();
            }
            opts.el.attr("tip", opts.tipTxt);
            //设置tip类型，正常
            $(self.tipPosition, opts.el).attr('tipType', 'normal');
        }
    });
})(window.comtop.cQuery, window.comtop);
/**
 * handleMask
 * @author 林超群
 */
;(function ($, C) {
    var _$overlay = null;
    var options = {};

    /**
     * 创建DOM
     * @private
     */
    function _createDOM(){
        var self = cui.handleMask;
        var $wrap = $('#' + options.id);
        //创建梦蒙盖层
        _$overlay = new C.UI.Overlay();
        //创建DOM
        if($wrap.length === 0){
            var style = 'z-index:' + (options.zIndex + 1) + ';';
            $('body').append('<div id="' + options.id + '" class="handlemask_wrap" style="' + style + '"></div>');
            $wrap = $('#' + options.id);
        }
        $wrap.html(options.html);
        $wrap.css({
            visibility: 'hidden',
            display: 'block'
        });
        _resetPos();
        $wrap.css({
            visibility: 'visible',
            display: 'none'
        });
    }

    /**
     * 重新计算位置
     * @private
     */
    function _resetPos(){
        var $wrap = $('#' + options.id);
        $wrap.css({
            margin: '-' + $wrap.height()/2 + 'px 0 0 -' + $wrap.width()/2 + 'px'
        });
    }

    /**
     * 删除
     * @private
     */
    function _removeDom(){
        $('#' + options.id).remove();
        if(options.mask){
            _$overlay.hide(0.5);
        }
        _$overlay._dom.remove();
        _$overlay = undefined;
    }

    /**
     * handleMask入口
     * @param {Object} opts
     * @returns {Function|*|Function|Function}
     */
	cui.handleMask = function (opts){
        opts = $.type(opts) === 'object' ? opts : {};
        //是否已经创建
        if($('#' + options.id).length !== 0){
            _removeDom();
        }
        options = $.extend(true, {
            html: '<div class="handlemask_image_1"></div>',
            mask: true,
            zIndex: 9999999,
            id: 'handleMask_' + C.guid()
        }, opts);
        _createDOM();
        return cui.handleMask;
    };

    /**
     * 显示进度条
     * @returns {*}
     */
    cui.handleMask.show = function(){
        //如果不存在，则创建默认
        if($('div.handlemask_wrap').length === 0){
            cui.handleMask();
        }
        var $wrap = $('#' + options.id);
        if($wrap.attr('isOpen') !== 'true'){
            if(options.mask){
                _$overlay._dom.css('zIndex', options.zIndex)
                    .attr('id', 'ol_' + options.id);
                _$overlay.show(0.5);
            }
            $wrap.show().attr('isOpen', 'true');
        }
        return cui.handleMask;
    };
    /**
     * 隐藏进度条
     * @returns {*}
     */
    cui.handleMask.hide = function(){
        //如果不存在，则跳出
        if($('div.handlemask_wrap').length === 0){
            return;
        }
        var $wrap = $('#' + options.id);
        $wrap.hide().attr('isOpen', 'false');
        if(options.mask){
            _$overlay.hide(0.5);
        }
        return cui.handleMask;
    };
})(window.comtop.cQuery, window.comtop);
;(function($, C){
    C.UI.ListBox = C.UI.Base.extend({
        options:{
            uitype:'ListBox',
            //组件宽度
            width:'200',
            //组件高度
            height:'200',
            //组件名
            name:'listboxName',
            //默认值
            value:'',
            //记录数据集中隐藏列名
            value_field: 'id',
            //记录数据集中显示列名
            label_field: 'text',
            //是否多选
            multi:false,
            //文本模式
            textmode:false,
            //接收数据
            datasource:null,
            //双击触发的方法
            on_dbclick:null,
            //单击触发的方法
            on_click:null,
            //选中改变时触发
            on_select_change:null,
            //添加行时触发
            on_add:null,
            //删除行时触发
            on_remove:null,

            //图标路径
            icon_path:null
        },
        //欲渲染元素
        $el:null,
        //组件根元素
        listbox:null,
        //提交域元素
        hiddenEl:null,
        //是否渲染模板
        //renderTemplate:false,
        //模板变量名
        listTemplateName:'cListBox',
        //主键列名
        valueField:null,
        //显示列名
        labelField:null,
        //加载数据
        //loadData:null,
        //多选时，记录第一次选的元素
        priorElement:null,
        //数据模板名
        rowTemplateName:'cListBoxRow',
        /**
         * @param options  参数配置信息
         * @private
         */
        _init:function(options){
            this.$el = $(this.options.el);
            this._initParams();
            this.$el.addClass('cui');
        },
        _create:function(){
            //如果datasource为function，则执行
            if (typeof this.options.datasource == 'function') {
                this.options.datasource(this, {});
            }
            this.listbox = $('.listbox',this.$el);
            this.hiddenEl = $('[type=hidden]',this.$el);
            this.valueField = this.options.value_field;
            this.labelField = this.options.label_field;
            this._setConfiguration();
            //赋初始值
            this._setDefaultText();
        },
        //初始化参数
        _initParams:function(){
            //解析html模板
            this._analysisHtmlTemplate();
        },
        /**
         * 解析html模板，获取数据源
         */
        _analysisHtmlTemplate:function(){
            var $tag = $('a',this.$el);
            if($tag == null || typeof $tag == 'undefine' || $tag.length < 1){
                return ;
            }
            var valueField = this.options.value_field;
            var labelField = this.options.label_field;
            var dataArray = [];

            $.each($tag,function(index,item){
                var record = {};
                record[labelField] = $.trim($(this).text());
                record[valueField] = $.trim($(this).attr('value'));
                dataArray.push(record);
            });
            this.$el.html("");
            this.options.datasource = dataArray;
        },
        /**
         * 初始化组件
         */
        _setConfiguration:function(){
            this.listbox.width(this.options.width);
            this.listbox.height(this.options.height);
        },


        _selectChangeCallback: function(){
            var selectChange = this.options.on_select_change;

            if($.type(selectChange) === 'string'){
                window[selectChange](this.getSelectedRows());
            }else if($.isFunction(selectChange)){
                selectChange(this.getSelectedRows());
            }
        },
        /**
         * 设置数据
         */
        setDatasource:function(result){
            this.options.datasource = result;
            //if(this.renderTemplate){
            this._renderElement();
            //}
        },
        /**
         * 重新渲染模板元素
         */
        setMulti: function (flag) {
            var opt = this.options;
            if (opt.multi === flag || typeof flag !== 'boolean') {
                return;
            } else {
                opt.multi = flag;
                this.cancelSelected();
            }
        },
        _renderElement:function(){
            var $tr = $(".tr",this.$el);
            //重新加载列表模板
            this._buildTemplate($tr,this.rowTemplateName,this.options);
        },
        /**
         * 赋初始值
         */
        _setDefaultText:function(){
            if(this.options.value){
                var $tr = $(".tr",this.$el);
                var valArray = this.options.multi? this.options.value.split(';'):this.options.value;
                var valueField = this.options.value_field;
                //组件值
                var componentValue = [];
                var datasource = this.options.datasource;
                var self = this;
                $.each(datasource,function(index,value){
                    if(self.options.multi){
                        $.each(valArray,function(i,item){
                            if(item == value[valueField]){
                                $("li[name=" + item +  "]",$tr).addClass('selected');
                                componentValue.push(value[valueField]);
                            }
                        })
                    }else{
                        if(valArray == value[valueField]){
                            $("li[name=" + valArray +  "]",$tr).addClass('selected');
                            componentValue.push(value[valueField]);
                        }
                    }
                });
                this.hiddenEl.val(componentValue.join(';'));
            }
        },
        /**
         * 设置组件宽度
         * @param widthVal
         */
        setWidth:function(widthVal){
            this.listbox.width(widthVal);
        },
        /**
         * 获取指定数据记录
         * 返回指定数据记录
         * @param keyVal  valueField列的记录
         */
        getRecordData:function(keyVal){
            var self = this;
            var recordData = null;
            var datasource = this.options.datasource;
            //遍历数据
            $.each(datasource,function(index,item){
                if(item[self.valueField] == keyVal){
                    recordData = item;
                    return false;
                }
            });
            return recordData;
        },
        /**
         * 供文本模式调用的方法
         */
        getLabelValue:function(){
            if(this.options.value == '' || !this.options.textmode){
                return "";
            }
            var valArray = this.options.value.split(';');
            var valueField = this.options.value_field;
            var labelField = this.options.label_field;
            //组件值
            var componentValue = [];
            $.each(this.options.datasource,function(index,value){
                $.each(valArray,function(i,item){
                    if(item == value[valueField]){
                        componentValue.push(value[labelField]);
                    }
                })
            });
            return componentValue.join(';');

        },
        /**
         * 删除指定数据
         * return 返回删除的数据值
         */
        deleteRecordData:function(keyVal){
            var self = this;
            var recordData = null;
            var data = this.options.datasource;
            var componentArray = [];

            if(this.hiddenEl.val() != ''){
                componentArray = this.hiddenEl.val().split(';')
            }

            //遍历数据
            $.each(data,function(index,item){
                if(item[self.valueField] == keyVal){
                    recordData = item;
                    data.splice(index,1);
                    componentArray.pop(keyVal);
                    return false;
                }
            });
            this.hiddenEl.val(componentArray.join(';'));
            return recordData;
        },
        /**
         * 获取组件值
         * 返回组件值
         */
        getValue:function(){
            //原来:return this.hiddenEl.val()
            var value_field = this.options.value_field;
            var rowList = [];
            var SelectedRows = this.getSelectedRows();
            SelectedRows = SelectedRows === null ? [] : (this.options.multi ? SelectedRows : [SelectedRows]);

            $.each(SelectedRows, function(index, item) {
                rowList.push(item[value_field]);
            });
            return rowList.join(';');
        },
        /**
         * 获得数据显示列值
         */
        getText:function(){
            var self = this;
            var rowList = [];
            var SelectedRows = this.getSelectedRows();
            SelectedRows = SelectedRows === null ? [] : (this.options.multi ? SelectedRows : [SelectedRows]);
            $.each(SelectedRows, function(index, item) {
                rowList.push(item[self.labelField]);
            });
            return rowList.join(';');
        },
        /**
         * 设置组件值
         * @param arrayVal string 每个数用;分隔
         */
        setValue:function(value){
            //将一些数值转为数组
            var strValue = value + '';
            //如果为多选
            var arrayValue = strValue.split(';');

            if(!this.options.multi && arrayValue.length > 1){
                //如果设置成单选，则不能设多值
                return ;
            }
            //组件值
            var componentValue = [];
            //取消所有行
            this.cancelSelected();
            //高亮显示所选数组
            $(".td",this.$el).each(function(index,item){
                if($.inArray($(this).attr('name'),arrayValue) >= 0){
                    componentValue.push($(this).attr('name'));
                    $(this).addClass('selected');
                }
            });
            this.hiddenEl.val(componentValue.join(';'));
        },
        /**
         * 添加数据对象
         * @param rowList
         */
        addRows:function(rowList){
            var appendDataList = [];
            var self = this;
            var bFlag = true;

            if(rowList == null || rowList.length <1){
                return ;
            }

            var rowArray = rowList;
            if($.isPlainObject(rowList)){
                rowArray = [];
                rowArray.push(rowList);
            }
            if(this.options.datasource != null){
                //获取非重复数据
                $.each(rowArray,function(index,item){
                    bFlag = true;
                    $.each(self.options.datasource,function(i,val){
                        if(val[self.valueField] === item[self.valueField]){
                            bFlag = false;
                            return false;
                        }
                    })
                    if(bFlag){
                        appendDataList.push(item);
                    }
                });
                if(appendDataList.length < 1){
                    return ;
                }
            }else{
                appendDataList = rowArray;
                self.options.datasource = [];
            }
            var opt = $.extend({},this.options);
            //转为展示数据
            opt.datasource = appendDataList;
            //加载数据
            this.options.datasource = this.options.datasource.concat(appendDataList);
            //渲染添加数据模板
            this._buildTemplate($('.tr',this.$el),this.rowTemplateName,opt,true);

            var add = this.options.on_add;

            if($.type(add) === 'string'){
                window[add](appendDataList);
            }else if($.isFunction(add)){
                //传入增加的数据
                add(appendDataList)
            }
        },
        /**
         * 移除行
         * @param keyVal id值
         */
        removeRow:function(keyVal){
            var self = this;
            var removeData = null;
            var $current = $('li[name=' + keyVal + ']',this.$el);

            if($current){
                removeData = this.deleteRecordData(keyVal);
                $current.remove();
            }

            var remove = this.options.on_remove;

            if($.type(remove) === 'string'){
                window[remove]([removeData]);
            }else if($.isFunction(remove)){
                //传入删除的数据
                remove([removeData]);
            }
            return removeData;
        },
        /**
         * 移除选中行
         */
        removeSelectedRows:function(){
            var removedList = [];
            var self = this;

            $(".selected",this.$el).each(function(index,item){
                removedList.push(self.deleteRecordData($(this).attr('name')));
                $(this).remove();
            });

            var remove = this.options.on_remove;

            if($.type(remove) === 'string'){
                window[remove](removedList);
            }else if($.isFunction(remove)){
                //传入删除的数据
                remove(removedList);
            }
            return removedList;
        },
        /**
         * 移除所有行并清除所有数据
         * @return 移除的数据集合
         */
        removeAllRows:function(){
            var removedList = [];
            var self = this;
            var resultData ;
            var data = this.options.datasource;

            $(".td",this.$el).remove();
            if(data != null && data.length > 0){
                removedList = data.splice(0,data.length);
            }
            //清除隐藏域的值
            this.hiddenEl.val('');

            var remove = this.options.on_remove;

            if($.type(remove) === 'string'){
                window[remove](removedList);
            }else if($.isFunction(remove)){
                //传入删除的数据
                remove(removedList);
            }
            return removedList;
        },
        /**
         * 获取某行数据
         * @param index 行号，首行为0或者是组件值
         * return 行数据
         */
        getRow:function(index){
            var size = this.getRowSize();
            var recordData = null;

            if(index < size){
                var rowVal = $('.td',this.$el).eq(index).attr('name');
                recordData = this.getRecordData(rowVal);
            }
            return recordData;
        },
        /**
         * 获取所有选中行记录集合
         * return 所有选中数据数组
         */
        getSelectedRows:function(){
            var selectList = this.options.multi?[]:null;
            var self = this;

            $(".selected",this.$el).each(function(index,item){
                if(self.options.multi){
                    selectList.push(self.getRecordData($(this).attr('name')));
                }else{
                    selectList = self.getRecordData($(this).attr('name'));
                }
            });
            return selectList;
        },
        /**
         * 选中指定行
         * @param index  行号
         */
        selectRow:function(index){
            var componentArray = [];

            if(this.hiddenEl.val() != ''){
                componentArray = this.hiddenEl.val().split(';')
            }

            if(index >=0 && index < this.getRowSize()){
                $('.td',this.$el).eq(index).addClass('selected');
                componentArray.push($('.td',this.$el).eq(index).attr('name'));
                this.hiddenEl.val(componentArray.join(';'));
            }

            this._selectChangeCallback();
        },
        /**
         * 选中所有行
         */
        selectAllRows:function(){
            if(!this.options.multi){
                //如果不是多选，则不能选中所有行
                return ;
            }
            var componentArray = [];

            $(".td",this.$el).each(function(index,item){
                $(this).addClass('selected');
                componentArray.push($(this).attr('name'));
            });
            this.hiddenEl.val(componentArray.join(';'));

            this._selectChangeCallback();
        },
        /**
         * 取消所有选中行
         */
        cancelSelected:function(){
            $(".selected",this.$el).each(function(index,item){
                $(this).removeClass('selected');
            });
            this.hiddenEl.val('');

            this._selectChangeCallback();
        },
        /**
         * 获取所有行数据
         */
        getAllRows:function(){
            return this.options.datasource;
        },
        /**
         * 移动行
         * @param srcIndex 原序号
         * @param targetIndex 移动的目标序号
         */
        moveRow:function(srcIndex,targetIndex){
            var size = this.getRowSize();

            if(srcIndex >= 0 && srcIndex < size && targetIndex >= 0 && targetIndex < size && srcIndex != targetIndex){
                var rowEl = $('.td',this.$el);
                if(srcIndex < targetIndex){
                    rowEl.eq(targetIndex).after(rowEl.eq(srcIndex));
                }else{
                    rowEl.eq(targetIndex).before(rowEl.eq(srcIndex));
                }
                this.options.datasource.splice(targetIndex,0,this.options.datasource.splice(srcIndex,1)[0]);
            }
        },
        /**
         * 向上移动选中的行
         */
        moveUp: function() {
            var selectedRows=this.getSelectedRows();
            var size = this.getRowSize();
            var index ;

            for(var i=0,j=selectedRows.length; i < j;i++){
                index=this._getRowIndexByName(selectedRows[i][this.valueField]);
                if(index==0){break;}
                this.moveRow(index,index-1);
            }
        },
        /**
         * 向下移动选中行
         */
        moveDown: function() {
            var selectedRows=this.getSelectedRows();
            var rowSize = this.getRowSize();
            var index ;

            for(var i=selectedRows.length-1;i>=0;i--){
                index=this._getRowIndexByName(selectedRows[i][this.valueField]);
                if(index == (rowSize-1) ){break;}
                this.moveRow(index,index+1);
            }
        },
        /**
         * 获得行数
         */
        getRowSize:function(){
            return $('.td',this.$el).length;
        },
        /**
         * 获取数据记录
         */
        _getRowDataByKey:function(keyVal){
            var self = this,data = this.options.datasource;
            var resultRecord = null;
            $.each(data,function(index,item){
                if(item && item[self.valueField] == keyVal){
                    resultRecord = item;
                    return false;
                }
            });
            return resultRecord;
        },
        /*
         * 根据name获取行号
         */
        _getRowIndexByName:function(rowName){
            var index = $('li',this.$el).index($('li[name=' + rowName + ']',this.$el));
            return index;
        },
        /**
         * 单击行触发事件
         * @param event
         * @param element
         * @private
         */
        _rowClick:function(event,element,target){
            var select = 'selected';
            var $element = $(element);
            var componentArray = [];

            if(this.hiddenEl.val() != ''){
                componentArray = this.hiddenEl.val().split(';')
            }
            //如果是选中，则恢复为未选状态
            if($element.hasClass(select)){
                this.priorElement = null;
                $element.removeClass(select);
                var name = $element.attr('name');
                for(var i=0,j=componentArray; i<j;i++){
                    if(componentArray[i] == $element.attr('name')){
                        componentArray.splice(i,1);
                        break;
                    }
                }
            }else if(!this.options.multi){
                //单选处理
                $(".selected",this.$el).each(function(index,item){
                    $(this).removeClass('selected');
                });
                this.hiddenEl.val('');

                $element.addClass(select);
                componentArray = [];
                componentArray.push($element.attr('name'));
            }else if(this.options.multi && event.shiftKey){
                //多选处理
                if(this.priorElement == null){
                    this.priorElement = $element.attr('name');
                    componentArray.push(this.priorElement);
                }else{
                    var currenIndex = this._getRowIndexByName($element.attr('name'));
                    var preIndex = this._getRowIndexByName(this.priorElement);
                    var rowEl = $('.td',this.$el);

                    $(".selected",this.$el).each(function(index,item){
                        $(this).removeClass('selected');
                    });
                    this.hiddenEl.val('');

                    for(var i = Math.min(currenIndex, preIndex),j = Math.max(currenIndex, preIndex); i <= j; i++) {
                        rowEl.eq(i).addClass(select);
                        componentArray.push(rowEl.eq(i).attr('name'));
                    }
                }
                $element.addClass(select);
            }else{
                this.priorElement = $element.attr('name');
                componentArray.push(this.priorElement);
                //多选处理
                $element.addClass(select);
            }
            this.hiddenEl.val(componentArray.join(';'));

            var click = this.options.on_click;
            if($.type(click) === 'string'){
                var name = $(element).attr('name');
                window[click](this._getRowDataByKey(name));
            }else if($.isFunction(click)){
                var name = $(element).attr('name');
                click(this._getRowDataByKey(name));
            }

            this._selectChangeCallback();
        },
        /**
         * 双击行触发事件
         * @param event
         * @param element
         */
        _rowDblClick:function(event,element,target){
            var dbclick = this.options.on_dbclick;

            if($.type(dbclick) === 'string'){
                var name = $(element).attr('name');
                window[dbclick](this._getRowDataByKey(name));
            }else if($.isFunction(dbclick)){
                var name = $(element).attr('name');
                dbclick(this._getRowDataByKey(name));
            }
        },
        /**
         * 鼠标移入
         * @param event
         * @param element
         * @private
         */
        _trhoverin:function(event,element,target){
            var hc = 'hover';
            $(element).addClass(hc);
        },
        /**
         * 鼠标移除
         * @param event
         * @param element
         * @private
         */
        _trhoverout:function(event,element,target){
            var hc = 'hover';
            $(element).removeClass(hc);
        },
        //el元素缓存数据
        _setCacheData:function(key,value){
            //将数据缓存至el元素中
            this.$el.data(key,value);
        },
        //el元素获取缓存数据
        _getCacheData:function(key){
            return this.$el.data(key);
        },
        //el元素移除缓存数据
        _removeCacheData:function(key){
            this.$el.removeData(key);
        }
    });
})(window.comtop.cQuery, window.comtop);
/*
 Masked Input plugin for jQuery
 Copyright (c) 2007-@Year Josh Bush (digitalbush.com)
 Licensed under the MIT license (http://digitalbush.com/projects/masked-input-plugin/#license)
 Version: @version
 */
;(function($, C) {

    C.UI.InputMask = {
        // 日期时间模版包含秒
        Datetimes: '9999-1m-td 2h:59:59',
        // 时间模板
        Times: '2h:59:59',
        // 时间模板
        Time: '2h:59',
        // 日期时间模版不包含秒
        Datetime: '9999-1m-td 2h:59',
        /*Datetime: '9999-1m-td 2h:59',  */
        // 日期模板
        Date: '9999-1m-td',
        // 正整数字模板， {小数精确位数， 货币符号， 分隔符号}
        // precision == null，则表示不限制小数位数， precision === 0，则表示不保留小数
        Int: {precision:0, prefix:'', separator:','},
        // 小数数字模板
        Dec: {precision:null, prefix:'', separator:','},
        // 数字模板
        Num: {precision:0, prefix:'', separator:''},
        // 金额模板
        Money: {precision:2, prefix:'', separator:',',negative:false},
        // 数字模板，此属性可能已经在使用，为了向下兼容，保留此模板，但是不建议使用；使用此模板，会调用旧的处理方法
        Integer: {precision:0, prefix:''},


        //Predefined character definitions
        definitions: {
            '9': "[0-9]",
            'a': "[A-Za-z]",
            '*': "[A-Za-z0-9]",
            'd': 'd',
            'm': 'm',
            'h': 'h',
            't': 't',
            //'w': 'w',
            '1': "[0-1]",
            '2': "[0-2]",
            '3': "[0-3]",
            '4': "[0-4]",
            '5': "[0-5]",
            '6': "[0-6]",
            '7': "[0-7]",
            '8': "[0-8]"
        },
        dataName:"rawMaskFn",


        /**
         * 格式化
         * @params element {jQuery | String | HTMLElement} 元素
         * @params mask {String} 格式化方式
         * @params settings {Object} 设置
         */
        doMask: function(element, mask, settings) {
            var maskLC = mask.toLocaleLowerCase();
            var $el = $(element);
            switch (maskLC){
                case 'int':
                case 'num':
                case 'dec':
                case 'money':
                    var inputMaskModel;
                    //合并配置
                    inputMaskModel = $.extend(true, {}, this[mask], settings);
                    //正整数和数字不能配置precision
                    if(maskLC === 'int' || maskLC === 'num'){
                        inputMaskModel.precision = 0;
                    }

                    //将格式化规则写入当前元素的data内
                    $el.data('inputMaskModel', inputMaskModel);

                    $el.numberFormat(mask, inputMaskModel);
                    break;
                //向下兼容，保留
                case 'integer':
                    $el.scrapNumFormat(this[mask].precision, this[mask].prefix);
                    break;
                case 'custom':
                    if (settings && settings.model){
                        $el.mask(settings.model, settings);
                    }
                    break;
                default:
                    if(this[mask]){
                        $el.mask(this[mask], settings);
                    }
            }
        },

        /**
         * 获取非格式化的值
         * @params element {jQuery | String | HTMLElement} 元素
         * @params mask {String} 格式化方式
         * @params settings {Object} 设置
         */
        unMaskValue: function(element, mask, settings) {
            function inDefinitions(model_i, definitions) {
                var flag = false;
                $.each(definitions, function(key, value) {
                    if (model_i == key) {
                        flag = true;
                    }
                });
                return flag;
            }

            var maskLC = mask.toLocaleLowerCase();
            var $el = $(element);
            switch (maskLC){
                case 'int':
                case 'num':
                case 'dec':
                case 'money':
                    //获取格式化规则
                    var inputMaskModel = $.extend(true, {}, this[mask], settings);
                    var regTxt = $.trim(inputMaskModel.prefix + inputMaskModel.separator);
                    var valTxt = $.trim($el.val());
                    if(valTxt !== ''){
                        if(regTxt === ''){
                            //返回数值必须去掉.00这类数据
                            return valTxt.replace(/(?:\.(?:0+)?|(\.[1-9]+)0+)$/,'$1');
                        }else{
                            var reg = new RegExp('[' + regTxt + ']','g');
                            return $el.val().replace(reg, '').replace(/(?:\.(?:0+)?|(\.[1-9]+)0+)$/,'$1');
                        }
                    }else{
                        return '';
                    }
                    break;
                //向下兼容，保留
                case 'integer':
                    return $(element).val().replace(/,/g, '');
                case 'custom':
                    return $(element).mask();
                default:
                    return $(element).val();
            }
        }
    };

    var pasteEventName = (C.Browser.isIE ? 'paste' : 'input') + ".mask";
    var iPhone = (window.orientation != undefined);

    $.fn.extend({
        //Helper Function for Caret positioning
        caret: function(begin, end) {
            if (this.length == 0) return;
            if (typeof begin == 'number') {
                end = (typeof end == 'number') ? end : begin;
                $("#test").val(begin + ":" + end);
                return this.each(function() {
                    if (this.setSelectionRange) {
                        this.setSelectionRange(begin, end);
                    } else if (this.createTextRange) {
                        var range = this.createTextRange();
                        range.collapse(true);
                        range.moveEnd('character', end);
                        range.moveStart('character', begin);
                        range.select();
                    }
                });
            } else {
                if (this[0].setSelectionRange) {
                    begin = this[0].selectionStart;
                    end = this[0].selectionEnd;
                } else if (document.selection && document.selection.createRange) {
                    var range = document.selection.createRange();
                    begin = 0 - range.duplicate().moveStart('character', -100000);
                    end = begin + range.text.length;
                }
                return { begin: begin, end: end };
            }
        },

        /**
         * 解除事件绑定
         * @returns {*}
         */
        unmask: function() { return this.trigger("unmask"); },


        mask: function(mask, settings) {
            if (!mask && this.length > 0) {
                var input = $(this[0]);
                return input.data(C.UI.InputMask.dataName)();
            }
            settings = $.extend({
                placeholder: "_",
                completed: null
            }, settings);

            var defs = C.UI.InputMask.definitions;
            var tests = [];
            var partialPosition = mask.length;
            var firstNonMaskPos = null;
            var len = mask.length;

            $.each(mask.split(""), function(i, c) {
                if (c == '?') {
                    len--;
                    partialPosition = i;
                } else if (defs[c]) {
                    tests.push(defs[c]);
                    if(firstNonMaskPos==null)
                        firstNonMaskPos =  tests.length - 1;
                } else {
                    tests.push(null);
                }
            });

            return this.trigger("unmask").each(function() {
                var input = $(this);
                var buffer = $.map(mask.split(""), function(c, i) { if (c != '?') return defs[c] ? settings.placeholder : c });
                var focusText = input.val();

                function seekNext(pos) {
                    while (++pos <= len && !tests[pos]);
                    return pos;
                }
                function seekPrev(pos) {
                    while (--pos >= 0 && !tests[pos]);
                    return pos;
                }

                function compare(exp, charValue, i) {
                    switch(exp) {
                        case 'm':
                            var value = input.val().substring(i - 1, i);
                            var k = parseFloat(charValue);
                            if (value === '0') {
                                return (k > 0 && k <= 9);
                            } else if (value === '1') {
                                return (k >= 0 && k < 3);
                            }
                            break;
                        case 'd':
                            var inputValue = input.val();
                            var value = inputValue.substring(i - 1, i);
                            var year = inputValue.substring(0, 4);
                            var month = inputValue.substring(5, 7);
                            var day = new Date(year, month, 0).getDate();
                            var fDay = (day + "").split("")[0];
                            var lDay = (day + "").split("")[1];
                            var k = parseFloat(charValue);
                            if (value < fDay) {
                                if (value === 0) {
                                    return (k > 0 && k <= 9);
                                } else {
                                    return (k >= 0 && k <= 9);
                                }
                            } else {
                                return (k >= 0 && k <= lDay);
                            }
                            break;
                        case 'h':
                            var value = input.val().substring(i - 1, i);
                            var k = parseFloat(charValue);
                            if (value === '0' || value === '1') {
                                return (k >= 0 && k <= 9);
                            } else if (value === '2') {
                                return (k >= 0 && k <= 3);
                            }
                            break;
                        /*case 'w':
                         var value = input.val().substring(i - 1, i);
                         if(isNaN(value - 0)){
                         return false;
                         }
                         var k = parseFloat(charValue);
                         if (value === '0' || value === '1') {
                         return (k >= 0 && k <= 9);
                         } else if (value === '5') {
                         return (k >= 0 && k <= 3);
                         }
                         break;*/
                        case 't':
                            var inputValue = input.val();
                            var year = inputValue.substring(0, 4);
                            var month = inputValue.substring(5, 7);
                            var day = new Date(year, month, 0).getDate();
                            var fDay = (day + "").split("")[0];
                            var k = parseFloat(charValue);
                            return k >= 0 && k <= fDay;
                            break;
                        default:
                            return new RegExp(exp).test(charValue);
                    }
                }

                function shiftL(begin,end) {
                    if(begin<0)
                        return;
                    for (var i = begin,j = seekNext(end); i < len; i++) {
                        if (tests[i]) {
                            if (j < len && compare(tests[i], buffer[j], i)) {
                                buffer[i] = buffer[j];
                                buffer[j] = settings.placeholder;
                            } else
                                break;
                            j = seekNext(j);
                        }
                    }
                    writeBuffer();
                    var temp = firstNonMaskPos > begin ? firstNonMaskPos : begin;
                    input.caret(temp);
                }

                function shiftR(pos) {
                    for (var i = pos, c = settings.placeholder; i < len; i++) {
                        if (tests[i]) {
                            var j = seekNext(i);
                            var t = buffer[i];
                            buffer[i] = c;
                            if (j < len && compare(tests[j], t, j))
                                c = t;
                            else
                                break;
                        }
                    }
                }

                function keydownEvent(e) {
                    var k=e.which;
                    //backspace, delete, and escape get special treatment
                    if(k == 8 || k == 46 || (iPhone && k == 127)){
                        var pos = input.caret(),
                            begin = pos.begin,
                            end = pos.end;

                        if(end-begin==0){
                            begin=k!=46?seekPrev(begin):(end=seekNext(begin-1));
                            end=k==46?seekNext(end):end;
                        }
                        clearBuffer(begin, end);
                        shiftL(begin,end-1);

                        return false;
                    } else if (k == 27) {//escape
                        input.val(focusText);
                        input.caret(0, checkVal());
                        return false;
                    }
                }

                function keypressEvent(e) {
                    var k = e.which,
                        pos = input.caret();
                    if (e.ctrlKey || e.altKey || e.metaKey || k<32) {//Ignore
                        return true;
                    } else if (k) {
                        if(pos.end-pos.begin!=0){
                            clearBuffer(pos.begin, pos.end);
                            shiftL(pos.begin, pos.end-1);
                        }

                        var p = seekNext(pos.begin - 1);
                        if (p < len) {
                            var c = String.fromCharCode(k);
                            if (compare(tests[p], c, p)) {
                                shiftR(p);
                                buffer[p] = c;
                                writeBuffer();
                                var next = seekNext(p);
                                input.caret(next);
                                if (settings.completed && next >= len)
                                    settings.completed.call(input);
                            }
                        }
                        return false;
                    }
                }

                function clearBuffer(start, end) {
                    for (var i = start; i < end && i < len; i++) {
                        if (tests[i])
                            buffer[i] = settings.placeholder;
                    }
                }

                function writeBuffer() {
                    return input.val(buffer.join('')).val();
                }

                function checkVal(allow) {
                    //try to place characters where they belong
                    var test = input.val();
                    var lastMatch = -1;
                    for (var i = 0, pos = 0; i < len; i++) {
                        if (tests[i]) {
                            buffer[i] = settings.placeholder;
                            while (pos++ < test.length) {
                                var c = test.charAt(pos - 1);
                                if (compare(tests[i], c, i) !== false) {
                                    buffer[i] = c;
                                    lastMatch = i;
                                    break;
                                }
                            }
                            if (pos > test.length){
                                break;
                            }
                        } else if (buffer[i] == test.charAt(pos) && i!=partialPosition) {
                            pos++;
                            lastMatch = i;
                        }
                    }
                    if (!allow && lastMatch + 1 < partialPosition) {
                        input.val("");
                        clearBuffer(0, len);
                    } else if (allow || lastMatch + 1 >= partialPosition) {
                        writeBuffer();
                        if (!allow) input.val(input.val().substring(0, lastMatch + 1));
                    }
                    return (partialPosition ? i : firstNonMaskPos);
                }

                input.data(C.UI.InputMask.dataName,function(){
                    return $.map(buffer, function(c, i) {
                        return tests[i]&&c!=settings.placeholder ? c : null;
                    }).join('');
                });

                if (!input.attr("readonly"))
                    input
                        .one("unmask", function() {
                            input
                                .unbind(".mask")
                                .removeData(C.UI.InputMask.dataName);
                        })
                        .bind("focus.mask", function() {
                            focusText = input.val();
                            var pos = checkVal();
                            writeBuffer();
                            var moveCaret=function(){
                                if (pos == mask.length)
                                    input.caret(0, pos);
                                else
                                    input.caret(pos);
                            };
                            (C.Browser.isIE ? moveCaret:function(){setTimeout(moveCaret,0)})();
                        })
                        .bind("blur.mask", function() {
                            checkVal();
                            if (input.val() != focusText)
                                input.change();

                            //判断是否有回调函数，存在则执行。
                            if (settings.callback) {
                                settings.callback();
                            }
                        })
                        .bind("keydown.mask", keydownEvent)
                        .bind("keypress.mask", keypressEvent)
                        .bind(pasteEventName, function() {
                            setTimeout(function() { input.caret(checkVal(true)); }, 0);
                        });

                checkVal(); //Perform initial check for existing values
            });
        },

        /**
         * 旧版格式控制，已经弃用，因向下兼容需要，保留
         * @param n
         * @param prefix
         */
        scrapNumFormat: function(n, prefix) {
            var $el = this, oldValue = $el.val();

            var formatNum = function(num, n, prefix){
                var numStr = num.toString(),
                    pointIndex = numStr.indexOf('.'),
                    beforePoint,
                    afterPoint;
                if(pointIndex < 0){
                    beforePoint = numStr;
                    afterPoint = '';
                }else{
                    beforePoint = numStr.substring(0, pointIndex);
                    if(typeof n == 'undefined'){
                        afterPoint = numStr.substring(pointIndex);
                    }else{
                        afterPoint = numStr.substring(pointIndex, pointIndex + n + 1);
                    }
                }
                var re = /(-?\d+)(\d{3})/;
                while(re.test(beforePoint)){
                    beforePoint = beforePoint.replace(re,"$1,$2");
                }

                return prefix ? prefix + beforePoint + afterPoint : beforePoint + afterPoint;

            };

            var checkInput = function(){
                var val = $el.val();
                if(!val.match(/^[\+\-]?\d*?\.?\d*?$/)){
                    $el.val(oldValue);
                } else {
                    oldValue = val;
                }
            };

            var doBlur = function() {
                $el.val(formatNum($el.val(), n, prefix));
            };

            var doFocus = function() {
                var value = $el.val();
                if(prefix){
                    value = value.replace(prefix, '');
                }
                value = value.replace(/,/g, '');
                $el.val(value);
                checkInput();
            };

            if (!$el.attr("readonly")) {
                $el.one('unmask', function() {
                    $el.unbind(".mask");
                })
                    .bind('keyup.mask', checkInput)
                    .bind(pasteEventName, checkInput)
                    .bind('blur.mask', doBlur)
                    .bind('focus.mask', doFocus);
            }

        },

        /**
         * 数字类格式控制
         * @param mask {String} 格式名称
         * @param masker {Object} 格式配置参数
         */
        numberFormat: function(mask, masker){
            var $el = this, oldValue = $el.val();
            if(!/^[-\d\.]*$/.test(oldValue)){
                $el.val('');
                oldValue = '';
                return;
            }

            var formatNum = function(num, precision, prefix, separator){
                var numStr = num.toString(),
                    pointIndex, beforePoint, afterPoint,
                    re = /(-?\d+)(\d{3})/;
                //金额四舍五入，采用字符操作
                if(mask === 'Money' && precision !== null && precision !== 'null'){
                    numStr = C.Number.round(numStr, precision - 0) || numStr;
                }

                //如果组件使用了emptyText，且设置了mask，这里需要过滤，中文的时候直接返回中文
                if(typeof C.Number.round(numStr) === 'undefined'){
                    return numStr;
                }

                pointIndex = numStr.indexOf('.');
                if(pointIndex < 0){
                    beforePoint = numStr;
                    afterPoint = '';
                }else{
                    beforePoint = numStr.substring(0, pointIndex);
                    switch (precision){
                        case 'null':
                        case null:
                            afterPoint = numStr.substring(pointIndex);
                            break;
                        case '0':
                            afterPoint = '';
                            break;
                        default:
                            afterPoint = numStr.substring(pointIndex, pointIndex + precision + 1);
                    }
                }

                //分隔符替换
                if(!!separator || separator !== ''){
                    while(re.test(beforePoint)){
                        beforePoint = beforePoint.replace(re,'$1' + separator + '$2');
                    }
                }
                //追加0值小数
                if(precision > 0){
                    if(/\./.test(afterPoint)){
                        precision = precision - (afterPoint.length - 1);
                    }
                    for (var i = 0; i < precision; i++) {
                        afterPoint += '0';
                    }
                    if(!/\./.test(afterPoint)){
                        afterPoint = '.' + afterPoint;
                    }
                }

                return prefix ? prefix + beforePoint + afterPoint : beforePoint + afterPoint;

            };
            var regList = {
                intReg: /^[\+\-]?([1-9]\d*|0)?$/,
                numReg: /^\d*$/,
                decReg:    /^[\+\-]?([1-9]\d*\.?\d*?|0\.\d*?|0)?$/,
                moneyReg : /^[\+\-]?([1-9]\d*\.?\d*?|0\.\d*?|0)?$/
            };
            if(masker.negative === false && mask === "Money"){ //money can not be negative
                regList.moneyReg=/^([1-9]\d*\.?\d*?|0\.\d*?|0)?$/;
            }
            var checkInput = function(){
                var val = $el.val();
                if(!regList[mask.toLocaleLowerCase() + 'Reg'].test(val)){
                    $el.val(oldValue);
                } else {
                    oldValue = val;
                }
            };

            var doBlur = function() {
                var val = $el.val();
                //$el.data("orgValue", val);//缓存原始值
                if($.trim(val) === ''){
                    return;
                }

                var formatVal = formatNum(val, masker.precision, masker.prefix, masker.separator);
                if(/^[\-\+]$/.test(val)){
                    formatVal = '';
                }
                $el.val(formatVal);
            };

            var doFocus = function() {
                if($el.prop('readonly')){
                    return;
                }
                //获焦后，读取的是已经被格式化后的数据
                var value = $.trim($el.val()) === '' ? '' : $.trim($el.val()); //($el.data("orgValue") || '');
                if(masker.prefix){
                    value = value.replace(masker.prefix, '');
                }

                //去掉逗号和.00
                value = value.replace(/,/g, '').replace(/(?:\.(?:0+)?|(\.[1-9]+)0+)$/,'$1');

                if($.trim(value) === ''){
                    $el.val('');
                }else{
                    $el.val(value);
                }

                if(C.Browser.isIE){
                    var rng = $el.get(0).createTextRange();
                    rng.move("textedit");
                    rng.select();
                }
                checkInput();
            };
            if(oldValue !== ''){
                doBlur();
            }

            //if (!$el.attr("readonly")) {
                $el.one('unmask', function() {
                    $el.unbind(".mask");
                }).unbind(".mask")
                    .bind('keyup.mask', checkInput)
                    .bind(pasteEventName, checkInput)
                    .bind('blur.mask', doBlur)
                    .bind('focus.mask', doFocus);
            //}
        }
    });

    // $.mask不允许对外公开，但旧版本已经对外公开，这里保留兼容
    $.mask = {};
    $.mask.definitions = C.UI.InputMask.definitions;
})(window.comtop.cQuery, window.comtop);
;(function($, C){
    /**
     * @class C.UI.Button
     * @extends C.UI.Base
     * 菜单UI组件<br>
     *
     * 1.通过属性配置能生成菜单。<br>
     * 2.通过配置可设置按钮的宽度。<br>
     * 3.配置数据源获取数据。<br>
     * 4.通过配置显示菜单。<br>
     * 5.动态添加或删除菜单。<br>
     * 6.动态禁用菜单项。<br>
     * 7.动态设置菜单项的名称。<br>
     * @author 谭国华
     * @version 1.0
     * @history 2012-10-19 谭国华 新建
     * @demo demo/menuDemo.html
     */
    C.UI.Menu = C.UI.Base.extend({
        options: {
            uitype: 'Menu',//组件类型，menu
            trigger: 'click',//组件触发的方式，click|| hover
            width: '',//菜单的宽度
            on_click: null,//点击事件
            datasource: null//菜单的数据源
        },
        _init: function(){
            var self = this;
            self.objMenu = null;//下拉菜单的对象
            self.objItemMap = {};//缓存item的对象，在响应点击事件的时候用到。
            self.hideTimeout = null;//鼠标移开el时候的timeout
        },
        
        /**
         * 初始化模板方法
         */
        _create:function(){
        	var self = this;
        	var el = this.options.el;
        	var trigger = self.options.trigger;
        	
        	el.bind(trigger, function(e){
        		e.stopPropagation();
        		self.show();
        	});
        	el.bind('mouseout',function(e){
        		self.hideTimeout = setTimeout(function(){
            		self.hide();
            	},100);
        	});
        	el.bind('mouseover',function(e){
        		clearTimeout(self.hideTimeout);
        	});
        	
        },
        /**
         * 加载模板
         * @param {dom} $parent  要用到的父节点
         * @param {dom} datasource 数据源
         */
        _loadTemplate:function($parent, datasource){
        	var menuDom = this._buildTemplateStr('menuDom', datasource);
        	menuDom = this._bindTplEvent(menuDom);
        	var $menuDom = $(menuDom);
        	$parent.append($menuDom);
        	var $children = $menuDom.find('li');
        	for (var i = 0; i < datasource.length; i ++) {
        		var item = datasource[i];
        		this.objItemMap[item.id] 	= item;//缓存item的对象，在响应点击事件的时候用到。
        		if(item.disabled){
					this._disable($("#" + item.id));
        		}
        		if (item.items) {
        			var $child = $children.eq(i);
        			$child.find('a').addClass('menu_item_a_background');
        			this._loadTemplate($child, item.items);
        		}
        	}
        	return $menuDom;
        },
        /**
         * 加载菜单
         */
        _loadMenu:function(){
        	if(this.objMenu == null){
        		var opts = this.options;
        		if($.isFunction(opts.datasource)){//如果传入的是一个方法就执行方法获得数据
        			opts.datasource = opts.datasource();
            	}
        		this.setDatasource(opts.datasource);
        		
        	}
        },
        /**
         * 设置数据源的方法
         */
        setDatasource:function(datasource){
        	if(datasource){
        		var opts = this.options;
	        	this.objMenu = this._loadTemplate($('body'), datasource);
	        	var self = this;
	        	this.objMenu.bind('mouseover',function(e){
	        		self.hideTimeout && clearTimeout(self.hideTimeout);
                    if(typeof  window._cui_button_timer!=="undefined"){
                        clearTimeout(window._cui_button_timer);
                    }
	        	});
	        	this.objMenu.bind('mouseout',function(e){
	        		self.hideTimeout = setTimeout(function(){
	        			self.objMenu.hide();
	        		},100);
	        	});
        	}
        },
        /**
         * 鼠标移过菜单响应方法,显示子菜单
         * @param {event} e mouseover事件
         * @param {dom} eventEl  指向绑定事件的原生DOM对象
         * @param {dom} target 指向事件捕捉到的原生DOM对象
         */
        _mouseoverHandler:function(e, eventEl, target){
        	if($('#' + eventEl.id).attr('disabled'))return;
        	if (eventEl.mouseTimeout) {
        		clearTimeout(eventEl.mouseTimeout);
        	}
        	var $subMenu = $(eventEl).children('.menu_box');
        	$(eventEl).parent().children().css('zIndex',1);
        	$(eventEl).css('zIndex',2);
        	if($subMenu){
        		$subMenu.show();
        		this._setItemPosition($subMenu,eventEl);
    			this._setItemsWidth($subMenu.children('.menu'),this.options.width);
        		this._setIframe($subMenu);
        	}
        },
        /**
         * 鼠标移开菜单响应方法，隐藏子菜单
         * @param {event} e mouseout事件
         * @param {dom} eventEl  指向绑定事件的原生DOM对象
         * @param {dom} target 指向事件捕捉到的原生DOM对象
         */
        _mouseoutHandler:function(e, eventEl, target){
        	if($('#' + eventEl.id).attr('disabled'))return;
        	var $subMenu = $(eventEl).children('.menu_box');
        	eventEl.mouseTimeout = setTimeout(function(){
        		$subMenu.hide();
        	},100);
        },
        /**
         * 点击菜单响应方法
         * @param {event} e click事件
         * @param {dom} eventEl  指向绑定事件的原生DOM对象
         * @param {dom} target 指向事件捕捉到的原生DOM对象
         */
        _clickHandler:function(e, eventEl, target){
        	if($('#' + eventEl.id).attr('disabled'))return;
        	e.stopPropagation();
        	if(C.Browser.isIE6 || (C.Browser.isIE && C.Browser.isQM)){
        		var $item = $('#' + eventEl.id);
        		while($item[0].tagName != 'BODY'){
        			if($item[0].tagName == 'DIV'){
        				$item.hide();
        			}
        			$item = $item.parent();
        		}
    		}
        	this.hide();
        	//执行回调函数
        	this.options.on_click && this.options.on_click(this.objItemMap[eventEl.id]);//objItemMap在载入menu的时候缓存了。
        },
        /**
         * 设置子菜单的显示位置，做了碰边处理
         */
        _setItemPosition:function($subMenu,eventEl){
        	var $menuBox = $subMenu;
        	$subMenu = $subMenu.children(".menu");
        	var cssObj = {};
        	var $event = $(eventEl);
        	var itemOffestPosition = $event.offset();
        	var elHeight = $event.outerHeight();
        	var elWidth = $event.outerWidth();
        	var subMenuHeight = $subMenu.outerHeight();
        	var subMenuWidth = $subMenu.outerWidth();
        	var winHeight= $(window).height();
        	var winWidth= $(window).width();
        	//如果右边位置不够位置显示，而左边够位置显示，就显示在左边。小于10是避免临界滚动条占位。
        	if(winWidth - (itemOffestPosition.left + elWidth + subMenuWidth) < 10 && (itemOffestPosition.left - elWidth) > 0){
        		cssObj.left = 0 -  subMenuWidth + 4;//加4是规范要实现重叠的效果
        		cssObj.right = "auto";
        	}else{//显示在右边
        		cssObj.left = "auto";
        		cssObj.right = 4;
        	}
        	//如果下边位置不够位置显示，而左边够位置显示，就显示在上边。
    		if(winHeight - (itemOffestPosition.top + elHeight + subMenuHeight) < 10 && (itemOffestPosition.top - subMenuHeight) > 0){
    			cssObj.bottom = 0 + subMenuHeight - 4;//-4是减掉ul的padding和border
    			cssObj.top =  "auto";
    		}else{//显示在下边
    			cssObj.bottom =  "auto";
    			cssObj.top =  -1;
    		}
    		$menuBox.css(cssObj);
        },
        /**
         * 设置菜单的位置
         * @param {dom} el 作为位置参考的元素
         */
        _setPosition:function(el){
        	var elOffestPosition = $(el).offset();
        	var elHeight = $(el).outerHeight();
        	var elWidth = $(el).outerWidth();
        	var winHeight= $(window).height();
        	var winWidth= $(window).width();
        	var menuHeight = this.objMenu.children('.menu').outerHeight();
        	var menuWidth = this.objMenu.children('.menu').outerWidth();
        	var menuTop;
        	var menuLeft;
        	//如果下边位置不够位置显示，而左边够位置显示，就显示在上边。
        	if(winHeight - (elOffestPosition.top + elHeight + menuHeight) < 0 && (elOffestPosition.top  - menuHeight) > 0){
        		menuTop = elOffestPosition.top - menuHeight;
        	}else{//显示在下边
        		menuTop = elOffestPosition.top + elHeight;
        	}
        	//如果右边位置不够位置显示，而左边够位置显示，就显示在左边。
        	if(winWidth - (elOffestPosition.left + menuWidth) < 0 && (elOffestPosition.left + elWidth - menuWidth) > 0){
        		menuLeft = elOffestPosition.left  + elWidth - menuWidth;
        	}else{//显示在右边
        		menuLeft = elOffestPosition.left;
        	}
        	this.objMenu.css({
        		left:menuLeft,
        		top:menuTop
        	});
        },
        /**
         * 设置菜单项宽度,自适应宽度，因为万恶的ie6不能用minWidth属性，所以只能自己实现
         * @param {dom} el 作为宽度参考的元素
         */
        _setItemsWidth:function($ul, menuWidth){
        	var $liArray = $ul.children('li');
        	var maxWidth = 0;
        	for(var i = 0; i < $liArray.length; i++){
        		var width = $liArray.eq(i).children('a').children('span').outerWidth();
        		if(width > maxWidth){
        			maxWidth = width;
        		}
        	}
        	if(menuWidth > maxWidth){
        		maxWidth = menuWidth;
        	}else{
        		maxWidth = maxWidth + 10;
        	}
        	$ul.width(maxWidth);
        },
        /**
         * 设置菜单iframe项宽高，为万恶的ie6而设的
         * @param {dom} $menu menu元素
         */
        _setIframe:function($menu){
        	if(C.Browser.isIE6){
        		$menu.children('iframe').css({
        			width:$menu.find('.menu_item').width(),
        			height:$menu.find('.menu').height()
        		});
        	}
        },
        /**
         * 设置菜单宽度
         * @param {dom} el 作为宽度参考的元素
         */
        _setWidth:function(el){
        	var menuWidth;
        	if(this.options.width){
        		menuWidth = parseInt(this.options.width,10);
        	}else{
        		menuWidth = $(el).outerWidth() - 2;
        	}
        	this.options.width = menuWidth;
    		this._setItemsWidth(this.objMenu.children('.menu'),menuWidth);
        },
        /**
         * 禁用菜单,把事件移除，字体置灰
         * @param {dom} $menuItem 要禁用的item的元素
         */
        _disable:function($menuItem){
            var $a = $menuItem.children('a');
    		$a.attr('cui_href', $a.attr('href')).attr('href', 'javascript:;').css('cursor','default')
                .children('span').addClass('menu_item_disable');
    		$menuItem.attr('disabled', true);
        },
        /**
         * 启用菜单
         * @param {dom} $menuItem 要启用的item的元素
         */
        _enable:function($menuItem){
            var $a = $menuItem.children('a');
            $a.attr('href', $a.attr('cui_href')).removeAttr('cui_href').css('cursor','pointer')
                .children('span').removeClass('menu_item_disable');
        	$menuItem.attr('disabled', false);
        },
        /**
         * 显示菜单
         */
        show:function(el){
        	this._loadMenu();
        	this.objMenu.show();
        	if(!el){
        		el = this.options.el;
        	}
        	this._setWidth(el);
    		this._setPosition(el);
        	this._setIframe(this.objMenu);
        	var self = this;
        },
        /**
         * 隐藏菜单
         */
        hide:function(){
        	this.objMenu && this.objMenu.hide();
        },
        /**
         * 禁用或启用单个菜单
         * @param {string} itemId 要禁用的item的元素的id
         * @param {boolean} flag 标记是否禁用
         */
        disable:function(itemId,flag){
        	this._loadMenu();
        	var $menuItem = $("#" + itemId);
        	 if(flag == true){
        		 this._disable($menuItem);
             }else{
            	 this._enable($menuItem);
             }
        },
        /**
         * 设置菜单的label
         */
        setLabel:function(itemId,label){
        	this._loadMenu();
        	var menuItem = $("#" + itemId);
        	menuItem.children('a').children('span').html(label);
        }
    })
})(window.comtop.cQuery, window.comtop);

/**
 * 多功能导航
 * 可实现单级和多级菜单,多级下类似属性菜单.
 * @author 王伟
 * @since 2013-3-37
 */
(function(C) {
    'use strict';
    var $ = C.cQuery;
    C.UI.MultiNav = C.UI.Base.extend({
        options: {
            uitype            : "MultiNav",
            unfold            : false,         //多级导航有效,是否全部展开子菜单
            initchecked       : [],           //默认选中的菜单,数组[0, 1]表示第1个子菜单下的第2个子菜单被初始选中
            datasource        : [],           //菜单数组,数组格式json
            target            : "_self",      //菜单链接的target属性,支持iframe的name属性.
            foldercheckable   : false,          //多级导航有效,有子菜单的父菜单是否可以被选中.
            on_click          : null
        },
        /**
         * 初始化数据
         * @private
         */
        _init: function () {
            this.pos = -1;
        },
        /**
         * 初始化函数
         * @private
         */
        _create : function() {
            this.root = this.options.root = this.options.el.children(".multinav").eq(0);
            this._setDatasource(this.options.datasource);
        },
        /**
         * 初始选中定位
         */
        _initcheck : function(curr) {
            var thisObj = this.root;
            //根据 options.initchecked 选定需要初始选中菜单的dom树位置
            for(var i = 0, j = curr.length; i < j; i++) {
                thisObj = thisObj.children("li").eq(curr[i]);
                var thisObjA = thisObj.find("a").eq(0);
                //根据设置的class判断是否有子菜单.
                if( thisObjA.hasClass("multinav-fold") ) {
                    if(i === j - 1 && this.options.foldercheckable) {
                        thisObjA.addClass("multinav-checked");
                        this.pos = thisObjA.attr("pos");
                    }
                    thisObjA.addClass("multinav-unfold").data("unfold", true);
                    //定位到子菜单的父元素 ul 并使其显示.
                    thisObj = thisObj.children("ul").eq(0);
                    thisObj.addClass("multinav-ul-unfold");
                } else {
                    //没有子菜单,直接选中
                    thisObjA.addClass("multinav-checked");
                    this.pos = thisObjA.attr("pos");
                    break;
                }
            }
        },
        /**
         * 为数据 options.datasource{json} 中含有"bind"属性的菜单绑定相关事件
         */
        _bindEvents : function() {
            var self = this;
            var data = null;
            this.root.on("mouseover", function (event) {
                //消除冒泡
                event.stopPropagation();
                if (event.type=="click") {
                    self.options.on_click && self.options.on_click.call(this,event,event.target,data);
                };
                var currA = $(event.target),
                    pos = currA.attr("pos");
                if (!pos) {
                    currA = currA.parent();
                    pos = currA.attr("pos");
                    if (!pos) {
                        return;
                    }
                }
                data = self._getCheckedData(pos);
                var bind = data.bind,
                    eventType = event.type;
                if (typeof bind !== "object") {
                    return;
                }
                var handler = bind["on_" + eventType];
                if (typeof handler === "function") {
                    event.target = currA[0];
                    handler(event, currA[0], data);
                }
            });
            this.root.on("mouseout dblclick click", function (event) {
                //消除冒泡
                event.stopPropagation();
                var currA = $(event.target),
                    pos = currA.attr("pos");
                if (!pos) {
                    currA = currA.parent();
                    pos = currA.attr("pos");
                    if (!pos) {
                        return;
                    }
                }
                var eventType = event.type,
                    bind = data.bind;
                if (typeof bind !== "object") {
                    return;
                }
                var handler = bind["on_" + eventType];
                if (typeof handler === "function") {
                    event.target = currA[0];
                    handler(event, currA[0], data);
                }
                return false;
            });
        },

        _setDatasource: function(data) {
            this.setDatasource(data, undefined);
            this._bindEvents();
            this._initcheck(this.options.initchecked);
            var self = this;
            this.root.on("mousedown", function (event) {
                event.stopPropagation();
                self._mousedown(event.target);
            });
        },
        /**
         * 根据菜单数据json生成dom
         */
        setDatasource: function(data, opt){
            //配置项覆盖
            this.pos = -1;
            var options = opt ? $.extend(this.options, opt) : this.options;
            function bindEvent (events) {
                return new Function(events);
            }
            function loadTemplate(obj, pos) {
                var frag = $(document.createDocumentFragment());
                for(var i = 0, j = obj.length ; i < j; i++){
                    var cObj = obj[i],
                        li = $(document.createElement("li")),
                        a = $(document.createElement("a"));
                    a.attr("hidefocus", "true");
                    li.append(a);
                    if(cObj.onclick){
                        a.click(bindEvent(cObj.onclick));
                    }
                    if(cObj.ondblclick){
                        a.dblclick(bindEvent(cObj.ondblclick));
                    }
                    if(cObj.onmouseover){
                        a.mouseover(bindEvent(cObj.onmouseover));
                    }
                    if(cObj.onmouseout){
                        a.mouseout(bindEvent(cObj.onmouseout));
                    }
                    //其他属性设置
                    if(cObj.title) {
                        a.attr("title", cObj.title);
                    }
                    a.attr("pos", pos + i);
                    //有事件句柄 需要设置 pos属性
                    if(cObj.bind) {
                        a.attr("ev", "1");
                    }
                    //链接
                    if( typeof cObj.href === "string" ) {
                        a.attr("href", cObj.href);
                        a.attr("target", cObj.target || options.target);
                    } else {
                        a.attr("href", "javascript:;");
                    }
                    //含有子菜单,递归.
                    if(typeof cObj.children === "object") {
                        a.addClass("multinav-fold").append('<span class="multinav-fold-icon cui-icon">&#xf0da;</span><span class="multinav-unfold-icon cui-icon">&#xf0d7;</span>' + cObj.name);
                        var ul = $("<ul></ul>");
                        ul.append( loadTemplate(cObj.children, pos + i + "-") );
                        li.append(ul);
                    } else {
                        a.html(cObj.name);
                    }
                    frag.append(li);
                }
                return frag;
            }
            this.options.datasource = data;
            options.root.html( loadTemplate(data, "") );
            if(options.unfold) {
                this.allUnfold();
            }
            if(opt && opt.initchecked) {
                this._initcheck(opt.initchecked);
            }
        },
        /**
         * 全部展开
         */
        allUnfold : function() {
            this.root.find("ul").addClass("multinav-ul-unfold").show().end().find(".multinav-fold").addClass("multinav-unfold").data("unfold", true);
        },
        /**
         * 全部收缩
         */
        allFold : function() {
            this.root.find("ul").removeClass("multinav-ul-unfold").hide().end().find(".multinav-fold").removeClass("multinav-unfold").data("unfold", false);
        },
        /**
         * 为每个菜单绑定点击事件
         */
        _mousedown : function(target) {
            //查找a标签
            var currA = $(target);
            currA     = currA.prop("tagName") === "A" ? currA : currA.parent();
            //是否有子目录,这个属性在模版中设定
            var pos = currA.attr("pos");
            if( currA.hasClass("multinav-fold") ) {
                //判断当前是否是展开状态
                var unfold = currA.data("unfold");
                unfold     = unfold === undefined ? this.options.unfold : unfold;
                if(unfold) {
                    //收缩动画
                    currA.data("unfold", false).removeClass("multinav-unfold").next("ul").hide();
                } else {
                    //展开动画
                    currA.data("unfold", true).addClass("multinav-unfold").next("ul").show();
                }
                //如果可展开菜单(有子菜单的菜单)可被选中,执行如下
                if(this.options.foldercheckable){
                    this.root.find(".multinav-checked").removeClass("multinav-checked");
                    currA.addClass("multinav-checked");
                    this.pos = pos;
                }
            } else {
                //选中菜单.
                this.root.find(".multinav-checked").removeClass("multinav-checked");
                currA.addClass("multinav-checked");
                this.pos = pos;
            }
        },
        /**
         * 获取当前pos的datat
         * @param pos
         * @returns {*}
         * @private
         */
        _getCheckedData: function (pos) {
            if(pos === -1) {
                return null;
            }
            var data = this.options.datasource;
            pos = pos.split("-");
            var len = pos.length;
            for (var i = 0; i < len - 1; i++) {
                data = data[parseInt(pos[i], 10)].children;
            }
            data = data[parseInt(pos[i], 10)];
            return data;
        },
        /**
         * 获取当前被选中的值的数据
         * @returns {*}
         */
        getCheckedData : function () {
            var data = this._getCheckedData(this.pos);
            if (data === null || data.children !== undefined && !this.options.foldercheckable) {
                return null;
            }
            return data;
        }
    });
})(window.comtop);
/**
 * 对话框组件
 * @author chenxuming
 * @since 2013-11-11
 * @require jQuery
 */
(function ($, win) {
    'use strict';
    var C = win.comtop;
    if (!win.cui) {
        win.cui = {};
    }
    var msgOBJ = function () { },
        cui = win.cui,
        isIE6=C.Browser.isIE6,
        isIEQ=C.Browser.isQM,doc=win.document;
    msgOBJ.prototype = {
        /**
         * 构建模板
         * @returns {string}
         */
        _template: function () {
            var op = this.options,extendClass =op.boxType==="message"?op.boxType+"-"+op.messageType:op.boxType;

            var html = ['<div class="msg-box cui-msg-extend-',extendClass,'"'];
            html.push(' id="' + this.buildId + '" style="');
            if (op.width) {
                html.push('width:' + op.width + 'px;');
            }
            if (op.height) {
                html.push('height:' + op.height + 'px;');
            }
            html.push('">');
            if (op.canClose === true) {
                html.push('<a href="#/" hidefocus="true" title="关闭" class="msgbox-close-btn cui-icon"><span class="msgbox-close-btn-span"></span></a>');
            }
            html.push('<div class="msgbox-titlebar">');
            html.push('<span class="msgbox-title" title="' + op.title.replace(/<.*?>/g, '').replace('"', '＂') + '">' + op.title + '</span>');
            html.push('</div>');
            html.push('<div class="msgbox-content">');
            html.push('<div class="box-icon cui-icon ' + op.iconCls + '">', op.fontIcon ,'</div>');
            html.push('<div class="box-msg">');
            html.push(op.msg, '</div>');
            if ($.isArray(op.buttons)) {
                html.push('<div class="msgbox-ft">');
                this._buildButtons(html);
                html.push('</div>');
            }
            html.push('</div>');
            html.push('</div>');
            return html.join('');
        },
        /**
         *构建button 模板
         * @param html {array} 模板数组
         */
        _buildButtons: function (html) {
            var op = this.options;
            for (var i = 0, len = op.buttons.length; i < len; i++) {
                var proxyIndex = "",buttonClazz="btn-normal ";
                if (typeof op.buttons[i].handler === "function") {
                    proxyIndex += i;
                }
                if(op.buttons[i].focus === true){
                    op._buttonFocusIndex = i; // 按钮focus的index,多次设置后边的覆盖前面的
                }
                if(op.buttons[i]._ok_){
                    buttonClazz+=" btn-normal-ok";
                }
                else if(op.buttons[i]._cancel_){
                    buttonClazz+=" btn-normal-cancel";
                }
                html.push('<a proxyIndex="' + proxyIndex + '" class="cui-button '+buttonClazz+'" href="#/">');
                html.push('<span class="button-icon">&nbsp;</span>');
                html.push(op.buttons[i].name + '</a>');
            }
        },

        /**
         * 设置样式
         * @private
         */
        _addClass: function () {
            var op = this.options,
                container = this.$container;
            if (op.position === "rb") {
                container.addClass("msg-box-rb");
                if(!isIE6&&isIEQ){
                    container.css({"bottom":"",top:$(doc).scrollTop()+$(win).height()-container.outerHeight()});
                }
            } else if (op.position === "center") {
                container.addClass("msg-box-center").css({
                    "margin-left": -container.width() / 2,
                    "margin-top": -container.height() / 2
                });
            } else if (op.position === "custom") {
                if(typeof op.customPos.left==="undefined"){
                    op.customPos.left="50%";
                    op.customPos["margin-left"]= -container.width() / 2;
                }
                if(typeof op.customPos.top==="undefined"){
                    op.customPos.top="50%";
                    op.customPos["margin-top"]= -container.height() / 2;
                }
                container.addClass("msg-box-custom").css(op.customPos);
            }
        },

        /**
         * 显示 overlay
         * @private
         */
        _showOverlay: function () {
            if(isIE6||isIEQ){
                this._ieQScrollTop=$(doc).scrollTop();
                $(doc).scrollTop(0);  // 此处ie6会自动设置为0
                $("html,body").addClass("cui_overlay_ie6");
                if(this._$iframecover){
                    this._$iframecover.show();
                }
            }
            this.$overlay.show();
        },
        /**
         * 隐藏 overlay
         * @private
         */
        _hideOverlay: function () {
            if(isIE6||isIEQ){
                $("html,body").removeClass("cui_overlay_ie6");
                if(this._$iframecover){
                    this._$iframecover.hide();
                }
                if(this.options.scrollBack === true){
                    $(doc).scrollTop(this._ieQScrollTop);
                }
               // $(doc).scrollTop(this._ieQScrollTop);  //循环调用msgbox会出现滚动条闪动，去掉
            }
            this.$overlay.hide();
        },
        /**
         *动画显示
         */
        _doAnimate: function () {
            var msgboxContainer = this.$container,
                innerHeight = msgboxContainer.height();
            msgboxContainer.height(0).animate({height: innerHeight, opacity: 'show'}, 350);
        },
        /**
         * 绑定事件
         * @returns {boolean}
         * @private
         */
        _bindEvent: function () {
            var op = this.options, self = this;
            this.$container.delegate("a.btn-normal,span.msgbox-close-btn-span", "click", function (e) {
                var target = $(e.target), index = target.attr("proxyIndex");
                self.hide();
                if (index && index !== "") {
                    index = parseInt(index, 10);
                    op.buttons[index].handler.call(null);
                }
                return false;
            });
            if (op.dragAble) {
                this._doDrag();
            }
            if(typeof op._buttonFocusIndex === "number"){
                this.$container.find(".btn-normal").eq(op._buttonFocusIndex).focus();
            }
            return false;
        },
        /**
         * 拖动处理函数
         * @private
         */
        _doDrag: function () {
            var op = this.options,
                flag = false,
                self = this,
                detal = {
                    top: 0,
                    left: 0
                },
                w = this.$container.outerWidth(),
                h = this.$container.outerHeight(),
                checkBorder = function (pos) {
                    var winHeight = $(win).height(),
                        winWidth = $(win).width();
                    if (pos.left + w >= winWidth) {
                        pos.left = winWidth - w;
                    }
                    if (pos.top + h >= winHeight) {
                        pos.top = winHeight - h;
                    }
                },
                offEvent = function () {
                    flag = false;
                    $(doc).off("mousemove.msgBoxdrag").off("mouseup.msgBoxdrag");
                    self._disableSelect(false);
                },
                move = function (e) {
                    if (flag) {
                        var pos = {left: e.clientX - detal.left, top: e.clientY - detal.top};
                        pos.left = pos.left < 0 ? 0 : pos.left;
                        pos.top = pos.top < 0 ? 0 : pos.top;
                        checkBorder(pos);
                        self._setPosition(pos);
                    }
                };
            $(op.dragClass,this.$container).on("mousedown.msgBoxdrag",function (e) {
                var offset = this.getBoundingClientRect();
                detal.top = e.clientY - offset.top;
                detal.left = e.clientX - offset.left;
                flag = true;
                $(doc).on("mousemove.msgBoxdrag",function (e) {
                    move(e);
                }).on("mouseup.msgBoxdrag", function () {
                        offEvent();
                    });
                self._disableSelect(true);
            }).on("mouseup.msgBoxdrag", offEvent);
            /*                .on("mouseleave.msgBoxdrag",function(){
             offEvent();
             });*/
        },
        /**
         *禁用文本选择
         * @param flag  {boolean} 是否禁用选择
         */
        _disableSelect: function (flag) {
            if (flag) {
                $(doc.body).addClass("cui-userselectnone");
                $(doc).on("selectstart", function (e) {
                    return false;
                });
            } else {
                $(doc.body).removeClass("cui-userselectnone");
                $(doc).off("selectstart");
            }
        },
        /**
         * 设置位置
         * @param pos {left:xxx,top:xxx}
         */
        _setPosition: function (pos) {
            var op = this.options;
            pos = $.extend({
                top: "",
                left: "",
                right: "",
                "margin-left": "",
                "margin-top": "",
                bottom: ""
            }, pos);
            this.$container.css(pos);
        },
        /**
         * 通用配置
         */
        _commonOptions: {
            msg: "",                                  //消息
            modal: true,                              //是否为模态
            canClose: true,                           //是否可关闭
            autoClose: false,                         //是否自动关闭
            animate: false,                           //是否动画显示
            position: "center",                       //消息框显示位置
            customPos: {},                              //自定义位置
            opacity: 0.5,                            //透明度
            title: "",                              //消息框的标题
            width: 330,                               //宽度
            height: 0,                               //高度
            onClose: null,                            //消息框关闭时的回调函数
            dragAble: true,
            scrollBack:false,                         // 是否需要滚动回来
            dragClass: ".msgbox-titlebar"
        },

        /**
         * 包装options
         * @param msg {string} 提示消息
         * @param onClose {function} 关闭回调
         * @param options  {json}
         * @returns {合并后options}
         */
        wrapOptions: function (msg, onClose, options) {
            var op = options || {};
            op.msg = msg;
            op.onClose = onClose;
            return op;
        },
        /**
         *合并options
         * @param defaultOp 默认设置
         * @param options 用户设置
         * @returns 合并后的设置
         */
        setOptions: function (defaultOp, options) {
            var cusOptions = $.extend({}, this._commonOptions, defaultOp, options || {});
            this.options = cusOptions;
            return  cusOptions;
        },
        /**
         * 显示msgbox
         */
        show: function () {
            var op = this.options;
            this._addClass();
            if (op.modal) {
                this._showOverlay();
            }
            if (op.animate && !isIEQ) {
                this._doAnimate();
            } else {
                this.$container.show();
            }
            if (typeof op.autoClose === "number") {
                var self = this;
                win.setTimeout(function () {
                    self.hide();
                }, op.autoClose);
            }
            this._bindEvent();
        },
        /**
         * 隐藏msgbox
         */
        hide: function () {
            var op = this.options;
            if (op.modal) {
                this._hideOverlay();
            }
            this.$container.hide();
            if (typeof op.onClose === "function") {
                op.onClose.call(null);
            }
        },

        /**
         * 生成html
         */
        buildHtml: function () {
            var id = (900 * Math.random() + 100).toString().replace(".", ""), op = this.options;
            var docFragment = doc.createDocumentFragment();
            this.buildId = id;
            if (op.modal) {
                this.$overlay = $(doc.createElement("div")).addClass("cui_overlay").css("opacity",op.opacity);
                if(isIE6){
                    this._$iframecover=$(doc.createElement("iframe")).addClass("cui_overlay_iframe");
                    $(docFragment).append(this._$iframecover);
                }
                $(docFragment).append(this.$overlay);
            }
            $(docFragment).append(this._template());
            if(this.options.boxType==="message"){
                $(doc.body).prepend(docFragment);
            }else{
                $(doc.body).append(docFragment);
            }
            this.$container = $("#" + this.buildId);
        },
        /**
         * 重置html
         */
        reBuildHtml: function () {
            var op = this.options;
            this.$container.unbind().replaceWith(this._template());
            this.$container = $("#" + this.buildId);
            if(op.boxType!=="message"){ //避免和dialog冲突,放到最后
                if(this._$iframecover){
                    this._$iframecover.appendTo(doc.body);
                }
                if(this.$overlay){
                    this.$overlay.appendTo(doc.body);
                }
                this.$container.appendTo(doc.body);
            }
        }
    };


    /**
     * 根据弹出类型设置class样式
     * @param type
     * @param op
     */
    var setIconClass = function (type, op) {
            var iconClsMap={"alert":"box-icon-alert","success":"box-icon-success",
                   "confirm":"box-icon-confirm","error":"box-icon-error",
                   "warn":"box-icon-warn" };
            op.iconCls = iconClsMap[type]||"box-icon-alert";
        },
        /**
         * 创建msgbox object
         */
        createObj = function (msg, onClose, options, defaultOptions, type) {
            var msgObj = null;
            if (!cui[type].builded) {
                msgObj = new msgOBJ();
                options = msgObj.wrapOptions(msg, onClose, options);
                options.boxType=type;
                msgObj.setOptions(defaultOptions, options);
                msgObj.buildHtml();
                cui[type].builded = msgObj;
            } else {
                msgObj = cui[type].builded;
                options = msgObj.wrapOptions(msg, onClose, options);
                options.boxType=type;
                msgObj.setOptions(defaultOptions, options);
                msgObj.reBuildHtml();
            }
            msgObj.show();
        };

    /**
     * cui.message可以独立于alert/warn等设置
     * @type {{modal: boolean, canClose: boolean, autoClose: number, animate: boolean, width: number, position: string, title: string, dragAble: boolean, buttons: null}}
     * @private
     */
    var _messageOptions = {
        modal: false,
        canClose: false,
        autoClose: 1500,
        animate: true,
        width: 180,
        position: "rb",
        title: "提示",
        dragAble: false,
        buttons: null
    };

   // 以下为用户接口
    /**
     *  alert 弹出框
     * @param msg {String} 提示内容
     * @param onClose {function} 关闭回调
     * @param options {json}其它配置
     */
    cui.alert = function (msg, onClose, options) {
        var defaultOptions = {
            title: "提示",
            buttons: [ { name: "确定",focus:true,_ok_:true } ],
            iconCls: "box-icon-alert",
            fontIcon: "&#xf05a;"
        };
        createObj(msg, onClose, options, defaultOptions, "alert");
    };
    /**
     *  warn 弹出框
     * @param msg {String} 提示内容
     * @param onClose {function} 关闭回调
     * @param options {json}其它配置
     */
    cui.warn = function (msg, onClose, options) {
        var defaultOptions = {
            title: "警告",
            buttons: [ { name: "确定" ,focus:true,_ok_:true } ],
            iconCls: "box-icon-warn",
            fontIcon: "&#xf06a;"
        };
        createObj(msg, onClose, options, defaultOptions, "warn");
    };
    /**
     *  success 提示框
     * @param msg {String} 提示内容
     * @param onClose {function} 关闭回调
     * @param options {json}其它配置
     */
    cui.success = function (msg, onClose, options) {
        var defaultOptions = {
            title: "提示",
            buttons: [ { name: "确定" ,focus:true ,_ok_:true} ],
            iconCls: "box-icon-success",
            fontIcon: "&#xf058;"
        };
        createObj(msg, onClose, options, defaultOptions, "success");
    };
    /**
     *  error 提示框
     * @param msg {String} 提示内容
     * @param onClose {function} 关闭回调
     * @param options {json}其它配置
     */
    cui.error = function (msg, onClose, options) {
        var defaultOptions = {
            title: "错误",
            buttons: [ { name: "确定",focus:true,_ok_:true  } ],
            iconCls: "box-icon-error",
            fontIcon: "&#xf057;"
        };
        createObj(msg, onClose, options, defaultOptions, "error");
    };
    /**
     *  message 提示框
     * @param msg {String} 提示内容
     * @param type {String} 提示类型
     * @param options {json}其它配置
     */
    cui.message = function (msg, type, options) {
        var defaultOptions = _messageOptions,
            fontIcon = {
                error: "&#xf057;",
                success: "&#xf058;",
                warn: "&#xf06a;",
                alert: "&#xf05a;"
            };

        options = options || {};
        setIconClass(type, options);
        options.messageType = type ? type : "alert";
        options.fontIcon = fontIcon[options.messageType];
        createObj(msg, options.callback||null, options, defaultOptions, "message");
    };
    /**
     *  confirm 提示框
     * @param msg {String} 提示内容
     * @param options {json}其它配置
     */
    cui.confirm = function (msg, options) {
        var defaultOptions = {
            title: "确认",
            iconCls: "box-icon-confirm",
            fontIcon: "&#xf059;"
        };
        options = options || {};
        options.buttons = options.buttons || [
            {
                name: "确定",
                handler: options.onYes,
                focus:true,_ok_:true
            },
            {
                name: "取消",
                handler: options.onNo,_cancel_:true
            }
        ];
        createObj(msg, null, options, defaultOptions, "confirm");

    };
    cui.msgbox = cui.msgbox || {};

    /**
     * 支持全局配置默认options
     * @param opts {Object} 配置对象
     * @param type {String} 配置类型
     */
    cui.msgbox.setOpt = function(opts, type){
        if($.type(opts) !== 'object'){
            return;
        }
        if(type === 'message'){
            $.extend(_messageOptions, opts);
        }else{
            $.extend(msgOBJ.prototype._commonOptions, opts);
        }
    };

})(window.comtop ? window.comtop.cQuery : window.jQuery, window);

/**
 * 模块: CUI组件 PullDown类
 * 创建: 王伟3
 * 日期: 13-10-9
 * 描述: PullDown组件基础方法，被SinglePullDown和MultiPullDown组件继承。
 * 扩展模块必需方法：
 * __initMode：数据准备就绪，渲染下拉板块
 * __renderTextMode：数据准备就绪，渲染文字模式
 * __mouseUpHandler：鼠标点击回弹事件。
 * __getText：获取输入框文字
 */
;(function(C){
"use strict";
var $ = C.cQuery,
    Browser = C.Browser,
    isQM = Browser.isQM;
C.UI.PullDown = C.UI.Base.extend(function () {
    return {
        options : {
            uitype : "PullDown",
            empty_text: "请选择",
            value: '',
            readonly: false,
            textmode: false,
            width: "200",
            height: "200",
            editable: true,
            on_select_data: null,
            //下拉渲染模式，暂时可以为"Single"和"Multi"。
            mode : "Single",
            datasource: null,
            //下面这个是用于数据字典的，不与后端结合的时候，不需要理会此参数
            dictionary: '',
            //下面为继承部分参数内容。
            name : "",
            select: -1,
            must_exist: true,
            auto_complete: false,
            value_field : "id",
            label_field : "text",
            filter_fields : [],
            on_filter_data: null,
            on_change: null,
            on_filter: null
        },
        /**
         * 初始化参数，Base中自动调用
         * @param {object} op 用户参数，未格式化
         * @param {object} customOpt 用户参数，已经未格式化
         * @private
         */
        _init: function (op, customOpt) {
            var opts = this.options;
            //如果是以PullDown创建，继承下拉板块对象
            if (opts.uitype.toLocaleLowerCase() === "pulldown") {
                this._extendMode(customOpt);
            }
            //初始化宽高属性
            this._initWidthAndHeight(
                (op.width || opts.width).toString(),
                (op.height || opts.height).toString()
            );
            this.$el = opts.el.addClass("pulldown-main").css("width", opts.width);
            this.ltIE8 = Browser.isIE6 || Browser.isIE7;
            if (Browser.isQM && this.ltIE8) {
                this.$el.addClass("pulldown-main-qm");
            }
            //把占位符中的内容转移到一个内存中的元素里面。
            this.templateBox = $(document.createElement("div")).html(this.$el.html());
            this.guid = C.guid();
            this.text = "";
            this.value = "";
            this.valueCache = "";
            this.isHide = true;//当前下拉框是否为隐藏状态。

            this.top = window.location === window.parent.location;
            this.eqEmptyText = false; //下拉列表是否有与默认文字相等的选项
            this.rendered = false; //是否已经渲染完成
            this.oldData = null;
            this.position = {};
        },
        /**
         * 在原型中通过属性拷贝继承下拉模块对象
         * 以uitype="PullDown"创建时调用。
         * @param {object} customOpt Base修正后的用户设置的参数
         * @private
         */
        _extendMode: function (customOpt) {
            var constr, proto, v,
                mode = this.options.mode;
            mode = mode.charAt(0).toUpperCase() + mode.slice(1).toLocaleLowerCase() + "PullDown";
            constr = C.UI[mode];
            if (constr) {
                proto = constr.prototype;
                //惰性拷贝
                for (v in proto) {
                    if (proto.hasOwnProperty(v) && !this[v]) {
                        this[v] = proto[v];
                    }
                }
                //合并参数options
                //proto.options，为默认参数。
                this.options = $.extend({}, proto.options, customOpt);
            } else {
                throw new Error("mode属性错误。");
            }
        },
        /**
         * 修正用户传入的宽高，自动加"px"。
         * @param {string} width 宽度
         * @param {string} height 高度
         * @private
         */
        _initWidthAndHeight: function (width, height) {
            var opts = this.options;
            if (typeof width === "string" && !/%/.test(width)) {
                opts.width = width.replace(/\D+/g, "") + "px";
            }
            if (height) {
                this.height = parseInt(height, 10) - 2;
                opts.height = this.height + "px";
            }
        },
        /**
         * 文字模式函数，文字模式下不再调用_create()。
         * 在Base中调用
         */
        setTextMode: function(){
            this._initData();
        },
        /**
         * 创建Dom等，在Base中调用
         * @private
         */
        _create: function () {
            //tip参数设置
            this.tipPosition = '.pulldown-inner';
            this.tipText = this.$el.attr("tip");
            //创建DOM和绑定事件
            this._createDom();
            this._bindFocusBlurEvent();
            this._bindMouseEvent();
            this._bindKeyEvent();
            this._resetLayoutEvent();
            //初始化Json数据并渲染下拉板块
            this._initData();
            //设置renadOnly
            this.setReadonly(this.options.readonly);
        },
        /**
         * 创建除下拉板块内容的所有dom元素
         * 并把DOM存入Root属性中
         * @private
         */
        _createDom: function () {
            var opts = this.options,
                $el = this.$el,
                inputHtml,
                pullBox, iframe = "";
            //元素结构
            inputHtml = [
                '<div class="pulldown-inner pulldown-readonly">',
                    '<input class="pulldown-text pulldown-text-value" readonly="readonly" type="text" autocomplete="off" value="" />',
                    '<a href="#/" hidefocus="true" class="pulldown-btn pulldown-loading cui-icon">&#xf107;</a>',
                '</div>',
                '<div class="cui_input_empty" style="text-align: left; margin-top:-28px;">',opts.empty_text,'</div>',
                '<input type="hidden" class="pulldown-hidden" name="', opts.name, '" />'
            ];
            $el.html(inputHtml.join(""));
            //创建下拉部分外层Box
            pullBox = $(document.createElement("div")).addClass("pulldown-box");
            if (Browser.isIE6) {
                //解决IE6下，弹出内容无法覆盖select标签flash内容。
                iframe = '<iframe scrolling="no" frameborder="no"></iframe>';
            }
            pullBox.html(iframe + '<div class="pulldown-box-inner"></div>');
            $("body").append(pullBox);
            //Dom存入内存，防止多次遍历
            this.$inner = $el.find(".pulldown-inner").eq(0);
            this.$text = $el.find(".pulldown-text").eq(0);
            if (Browser.isQM) {
                this.$text.addClass("pulldown-text-qm");
            }
            this.$empty = $el.find(".cui_input_empty").eq(0);
            this.$btn = $el.find(".pulldown-btn").eq(0);
            this.$hide = $el.find(".pulldown-hidden").eq(0);
            this.$box = pullBox;
            this.$boxInner = pullBox.find(".pulldown-box-inner").eq(0);
        },
        /**
         * 输入框焦点事件
         * 获取焦点显示下拉框，失去焦点隐藏下拉框
         * @private
         */
        _bindFocusBlurEvent: function () {
            var self = this;
            this.$text.on("focus", function () {
                if (self.options.readonly){
                    return;
                }
                if (self.inValid) {
                    self.onValid();
                }
                self._showBox();
            }).on("blur", function () {
                self._hideBox();
            });
            this.$empty.on("click",function(){
                self.$text.focus();
            })
        },
        /**
         * 显示下拉框，一般在输入框获取焦点时调用
         * @private
         */
        _showBox: function () {
            var rect = this.$el[0].getBoundingClientRect();
            this.position.top = rect.top;
            this.position.left = rect.left;
            if (this.isHide === false || this.options.designMode) {
                return;
            }
            this.isHide = false;
            //设置下拉框的位置和宽高
            this._setBoxLayout(this._setBoxPosition(rect));
            this.listenPosition();
            this._isEmpty();
            this.$inner.addClass("pulldown-inner-focus");
            if (!this.rendered) {
                //异步调用
                this._callDataSource();
            } else {
                //缓存展开之前的值，以备触发onchange。
                //记录老的状态
                this.setOldData();
                //获取焦点的蓝色边框
                if (this.__showBoxCallBack) {
                    this.__showBoxCallBack();
                }
            }
        },
        /**
         * 移除
         */
        destroy: function () {
            this.$box.remove();
            this.$el.remove();
        },
        /**
         * 监听输入框位置
         */
        listenPosition: function () {
            var self = this,
            el = self.$el[0];
            clearInterval(this.listenBoxPostion);
            this.listenBoxPostion = setInterval(function () {
                var newPosition = el.getBoundingClientRect(),
                    position = self.position;
                if (newPosition.left !== position.left || newPosition.top !== position.top) {
                    self.$text.blur();
                }
            }, 10);
        },
        /**
         * 异步调用数据
         * @private
         */
        _callDataSource: function () {
            if (this.dataCalling) {
                return;
            }
            this.$btn.addClass("pulldown-loading");
            this.options.datasource.call(this, this);
            this.dataCalling = true;
        },
        /**
         * 是否是空值,处理输入框空值状态下的显示文字
         * @private
         */
        _isEmpty: function () {
            var $text = this.$text,
                val, isHide, emptyText;
            val = $text.val();
            isHide = this.isHide;
            emptyText = this.options.empty_text;
            if(val){
                this.$empty.hide()
            }else{
                if(!isHide){//打开下拉窗口
                    this.$empty.hide()
                }else{
                    this.$empty.show();
                }
            }
        },
        /**
         * 判断下拉项中是否有文字与empty_text相同
         * @returns {boolean}
         * @private
         */
        _isEqEmptyText: function () {
            var data = this.data,
                len = data.length,
                opts = this.options,
                emptyText = opts.empty_text,
                labelField = opts.label_field,
                i = 0;
            //匹配
            for (; i < len; i++) {
                if (emptyText === data[i][labelField]) {
                    this.eqEmptyText = true;
                    return true;
                }
            }
            return false;
        },
        /**
         * 计算下拉框显示位置left和top值
         * @returns {number} 计算出来的高度
         * @private
         */
        _setBoxPosition: function (rect) {
            var mainHeight = 28, borderWidth = (isQM ? 0 : 2), marginBottom = 10,
                //获取元素到窗口左上角的坐标。
                left = rect.left + $(window).scrollLeft(),
                //计算下拉框应有的高度，最小23。
                height = this._getRealHeight(),
                totalHeight = height + mainHeight + borderWidth,
                //top值：在元素的下面展开
                top = rect.top + $(window).scrollTop() + mainHeight;

            //如果下面显示的孔家不够，在元素的上面展开
            if (top > Math.max($.page.height(), $.client.height()) - height - marginBottom &&
                top > height + mainHeight) {
                top -= totalHeight;
            }
            //IE6-IE7的 getBoundingClientRect有2px的差异
            this.$box.css(this.ltIE8 && this.top ? {
                left: left - 2,
                top: top - 2
            } : {
                left: left,
                top: top
            });
            return height;
        },
        /**
         * 计算下拉框应该要显示的高度
         * @returns {number} 下拉高度
         * @private
         */
        _getRealHeight: function () {
            //内容超出按照设置高度显示，不够按照内容自适应，没有内容默认显示23px。
            return Math.min(this.height, this.$boxInner.css("height", "auto").outerHeight() || 28); //23为行高。
        },
        /**
         * 设置下拉框宽度和高度
         * @param {Number} height 传入的高度。
         * @private
         */
        _setBoxLayout: function (height) {
            this.$box.css({
                height: height,
                width: this.$el.width() - (isQM ? 0 : 2) // 2：左右边框宽度
            });
        },
        /**
         * 隐藏下拉框
         * @private
         */
        _hideBox: function () {
            if (this.isHide === true) {
                return;
            }
            if (this.hideAble === false) {
                this.$text.focus();
                return;
            }
            this.isHide = true;
            this.$box.css("top", "-999999px");
            clearInterval(this.listenBoxPostion);
            this.$inner.removeClass("pulldown-inner-focus");
            if (this.rendered) {
                if (this.__hideBoxCallBack) {
                    this.__hideBoxCallBack();
                }
                //触发onchange
                this._triggerChange(false, false);
            } else {
                this._isEmpty();
            }
        },
        /**
         * 设置上一次选择值
         */
        setOldData: function () {
            var selectData = this.selectData,
                type = $.type(selectData);
            this.valueCache = this.value;
            if (type  === "array") {
                this.oldData = $.extend(true, [], selectData);
            } else if (type  === "object") {
                this.oldData = $.extend(true, {}, selectData);
            } else {
                this.oldData = null;
            }
        },
        /**
         * 手动触发onChange事件
         * 并调用base中的验证函数
         * @param {boolean} isInit
         * @param {boolean} isDatabind
         * @private
         */
        _triggerChange: function (isDatabind, isInit) {
            var on_select_data, on_change, opts;
            if (this.valueCache !== this.value && !isDatabind) {
                //打开下拉框和关闭下拉框值有改变, 老方法，弃用
                opts = this.options;
                on_select_data = opts.on_select_data;
                //不是初始化时
                if (!isInit) {
                    if(opts.designMode){ return; }
                    //Base类中验证用函数
                    this._triggerHandler('change');
                    on_change = opts.on_change;
                    if (typeof on_change === "function") {
                        on_change.call(this, this.selectData, this.oldData);
                    }
                }
                if (typeof on_select_data === "function") {
                    on_select_data.call(this, this.selectData);
                }
            }
        },
        /**
         * 绑定下拉按钮和下拉框的鼠标事件
         * @private
         */
        _bindMouseEvent: function () {
            var self = this,
                $text = this.$text,
                relatedTarget,
                disableHideHandler = function () {
                    //按下以后 $text元素触发blur，
                    //设置hideAble = false防止隐藏下拉框。
                    self.hideAble = false;
                };
            //下拉按钮鼠标事件
            this.$btn.on("mouseup", function (event) {
                self.hideAble = true;
                event.stopPropagation();
                if(!self.readonly) {
                    if (self.isHide) {
                        $text.focus();
                    } else {
                        $text.blur();
                    }
                }
            }).on("mousedown", disableHideHandler).on("click",function(e){e.preventDefault();});
            //下拉框鼠标事件
            this.$box.on("mouseout", function (event) {
                //进入到某个元素
                relatedTarget = event.relatedTarget;
                if (self.hideAble === false && !$(this).find(relatedTarget).length &&
                    this !== relatedTarget) {
                    self.hideAble = true;
                    $text.blur();
                }
            }).on("mouseup", function (event) {
                event.stopPropagation();
                event.preventDefault();
                self.hideAble = true;
                self.__mouseUpHandler(event);
            }).on("mousedown", disableHideHandler).on("click",function(e){e.preventDefault();});
        },
        /**
         * 输入框的按键事件
         * @private
         */
        _bindKeyEvent: function() {
            var self = this,
                keyCode,
                opts = this.options;
            this.$text.on("keydown", function (event) {
                keyCode = event.keyCode;
                switch(keyCode) {
                    case 8:
                        if (!opts.editable) { //禁止IE回退
                            event.preventDefault();
                        }
                        break;
                    case 38 : //up
                        if (self.__keyDownUPHandler) {
                            self.__keyDownUPHandler();
                        }
                        break;
                    case 40 : //down
                        if (self.__keyDownDownHandler) {
                            self.__keyDownDownHandler();
                        }
                        break;
                    case 37 : //left
                        if (self.__keyDownLeftHandler) {
                            self.__keyDownLeftHandler();
                        }
                        break;
                    case 39 : //right
                        if (self.__keyDownRightHandler) {
                            self.__keyDownRightHandler();
                        }
                        break;
                    case 13 : //enter
                        if (self.__keyDownEnterHandler) {
                            self.__keyDownEnterHandler();
                        }
                        break;
                    default :
                        if (self.__keyDownHandler) {
                            self.__keyDownHandler();
                        }
                }
            }).on("keyup", function (event) {
                if (opts.editable && self.__keyUpHandler) {
                    self.__keyUpHandler(event);
                }
            });
        },
        /**
         * 布局改变事件调用
         * @private
         */
        _resetLayoutEvent: function () {
            var self = this,
                el = this.$el[0];
            $(window).on("resize scroll", function () {
                var newPosition, position;
                if (!self.isHide) {
                    newPosition = el.getBoundingClientRect();
                    position = self.position;
                    if (newPosition.left !== position.left || newPosition.top !== position.top) {
                        self.$text.blur();
                    }
                }
            });
        },
        /**
         * 初始化数据
         * @private
         */
        _initData: function () {
            var opts = this.options,
                datasource, type,
                list = this.templateBox.find("a[value]"),
                len = list.length,
                i, item, valueField, labelField;
            //通过模版创建
            if (len) {
                valueField = opts.value_field;
                labelField = opts.label_field;
                datasource = [];
                //读取模板，转换成数据
                for (i = 0; i < len; i++) {
                    item = datasource[i] = {};
                    item[valueField] = list.eq(i).attr("value");
                    item[labelField] = $.trim(list.eq(i).html());
                }
            }
            datasource = datasource || opts.datasource;
            type = $.type(datasource);
            if (type === "function") {
                //异步调用常用，如果没有设置值，先不调用，点击时再调用。
                if(opts.value !== '' || opts.select !== -1) {
                    this._callDataSource();
                } else {
                    //隐藏loading
                    this.$btn.removeClass("pulldown-loading");
                }
            } else if(type === "array"){
                this.setDatasource(datasource);
            } else {
                this.setDatasource([]);
            }
        },
        /**
         * 初始化设置数据和重置数据。 rendered判断是否是重置数据
         * @param {Array} data
         * @returns {object} new C.UI.PullDown()
         */
        setDatasource: function (data) {
            var opts = this.options,
                rendered, select, value;
            //调用文字模式
            this.data = $.extend(true, [], data);
            if (opts.textmode) {
                //文字模式,渲染模块的文字模式
                this.__renderTextMode();
                this.$el.addClass("pulldown-textmode");
            } else {
                //隐藏loading
                this.$btn.removeClass("pulldown-loading");
                //渲染下拉模块
                rendered = this.rendered;
                this.__initMode(rendered);
                if (rendered) { //重载数据
                    this._emptyStat();
                } else {
                    this.rendered = true;
                    //设置初始值或初始选择第几条
                    value = opts.value;
                    select = opts.select;
                    if (value) {
                        this.setValue(value, false, true);
                    } else if (select > -1 && select < data.length ) { //默认选择第几条
                        this.setValue(data[select][opts.value_field], false, true);
                    }
                    // 如果可以编辑
                    if (opts.editable) {
                        this.$text.removeAttr("readonly");
                    }
                }
                //适用于数据没来，而打开下拉的情况，需要根据数据重新计算高度。
                if (!this.isHide) {
                    this._setBoxLayout(this._setBoxPosition(this.$el[0].getBoundingClientRect()));
                }
            }
            return this;
        },
        /**
         * 同上，修正名字
         * @param {Array} data
         * @returns {object} new C.UI.PullDown()
         */
        setDataSource : function (data) {
            return this.setDatasource(data);
        },
        /**
         * 重载数据时，清空状态。
         * @private
         */
        _emptyStat: function () {
            this.text = "";
            this.value = "";
            this.valueCache = "";
            this.selectData = null;
            this.$text.val("");
            this.$hide.val("");
            this.eqEmptyText = false;
            this._isEmpty();
        },
        /**
         * 设置数据
         * @param {object} data
         * @returns {object} new C.UI.PullDown()
         */
        resetDataSource: function (data) {
            this.setDatasource(data);
            return this;
        },
        /**
         * 设置输入框文字、隐藏域的值和当前选中的对象
         * 主要用于下拉模块数据交互时调用
         * 参数{text: string, value: string, Data: object}
         * @param prop
         * @private
         */
        _setProp: function (prop) {
            var text = prop.text,
                value = prop.value,
                data = prop.data;
            this.text = text;
            this.value = value;

            this.selectData = data;
            this.$text.val(text);
            this.$hide.val(value);
            this._isEmpty();
        },
        /**
         * 打开下拉列表
         * @returns {object} new C.UI.PullDown()
         */
        open: function () {
            this.$text.focus();
            return this;
        },
        /**
         * 设置宽度
         * @param {string} width
         * @returns {object} new C.UI.PullDown()
         */
        setWidth: function (width) {
            var opts = this.options;
            if (typeof width === "string" && /%/.test(width)) {
                opts.width = width;
            } else {
                this._initWidthAndHeight(width + "");
            }
            this.$text.blur();
            this.$el.css("width", opts.width);
            return this;
        },
        /**
         * 设置值
         * @param {string} value
         * @returns {object} new C.UI.PullDown()
         * @param isDatabind
         * @param isInit
         */
        setValue: function (value, isDatabind, isInit) {
            if (!this.rendered) {
                this.options.value = value;
                this.$hide.val(value);
                this._callDataSource();
            } else {
                this.setOldData();
                this.__setValue(
                    typeof value === "undefined" ? this.options.value : value
                );
                this._triggerChange(isDatabind, isInit);
            }
            return this;
        },
        /**
         * 获取值
         * @returns {string}
         */
        getValue: function () {
            return this.rendered ? this.value : this.options.value;
        },
        /**
         * 当前选择的内容的数据,需要拷贝。
         * @returns {null|Array|object}
         */
        getData: function () {
            var selectData = this.selectData,
                type = $.type(selectData);
            switch (type) {
                case "array": //多选
                    return $.extend(true, [], this.selectData);
                case "object": //单选
                    return $.extend(true, {}, this.selectData);
                default :
                    return null;
            }
        },
        /**
         * 获取显示值
         * @returns 根据模块定
         */
        getText: function () {
            return this.__getText();
        },
        /**
         * 设置只读
         * @param flag
         * @returns {object} new C.UI.PullDown()
         */
        setReadonly: function (flag) {
            if (flag === true) {
                this.readonly = true;
                this.$inner.addClass("pulldown-readonly");
                this.$text.attr("readonly", "readonly");
                this.$text.blur();
            } else if (flag === false) {
                this.readonly = false;
                this.$inner.removeClass("pulldown-readonly");
                this.options.editable ? this.$text.removeAttr("readonly") : this.$text.attr("readonly", 'readonly');
            }
            this.options.readonly = flag;
            return this;
        },
        /**
         * 设置可否被编辑
         * @param {boolean} flag
         */
        setEditAble: function (flag) {
            flag = !!flag;
            this.options.editable = flag;
            if (flag) {
                this.$text.removeAttr("readonly");
            } else {
                this.$text.attr("readonly", "readonly");
            }
        },
        /**
         * 验证失败时组件处理方法
         * @param {object} obj
         * @param {string} message
         */
        onInValid: function(obj, message) {
            this.$inner.addClass("pulldown-error");
            this.$el.attr("tip", message);
            //设置tip类型，错误
            $(this.tipPosition, this.options.el).attr('tipType', 'error');
            this.inValid = true;
        },

        /**
         * 验证成功时组件处理方法
         */
        onValid: function() {
            var $el = this.$el,
                tipID = $el.find(this.tipPosition).eq(0).attr('tipID'),
                $cuiTip;
            this.$inner.removeClass("pulldown-error");
            if(tipID !== undefined){
                $cuiTip =  window.cui.tipList[tipID];
                if (typeof $cuiTip !== 'undefined') {
                    $cuiTip.hide();
                }
            }
            $el.attr("tip", this.tipText || "");
            //设置tip类型，正确
            $(this.tipPosition, this.options.el).attr('tipType', 'normal');
            this.inValid = false;
        }
    };
}());
})(window.comtop);
/**
 * 模块: CUI组件 SinglePullDown类
 * 创建: 王伟3
 * 日期: 13-10-9
 * 描述: 继承自PullDown组件基础。
 */
;(function(C){
"use strict";
var $ = C.cQuery;
C.UI.SinglePullDown = C.UI.PullDown.extend({
    options : {
        name: "pullDownName",
        uitype: "SinglePullDown"
    },
    /**
     * 必需
     * 初始化下拉模块
     * @param {Boolean} rendered
     * @private
     */
    __initMode: function (rendered) {
        this.index = -1;
        if (!rendered) {
            this.$hideListBox = $(document.createElement("div"));
        } else {
            //重置数据，需要重置隐藏div的内容
            this.$hideListBox.html("");
        }
        this.__createList();
    },
    /**
     * 必需
     * 渲染文本模式
     * @private
     */
    __renderTextMode: function () {
        var opts = this.options,
            data = this.data,
            index;
        this.size = data.length;
        index = this.__getIndex(opts.value);
        if (index > -1) {
            this.$el.html(data[index][opts.label_field]);
        }else{
            this.$el.html('');
        }
    },
    /**
     * 创建下拉模块Dom
     * @private
     */
    __createList: function () {
        var $boxInner = this.$boxInner,
            data = this.data,
            size = this.size = data.length,
            html = [],
            labelField = this.options.label_field,
            i, j, $list, list, indexList, text;
        //拼凑字符串
        for (i = 0; i < size; i++) {
            text = data[i][labelField];
            html.push(
                '<a class="pulldown-list" href="#/" index="',
                i,
                '" title="',
                text,
                '">',
                text,
                '</a>'
            );
        }
        $boxInner.html(html.join(""));
        $list = $boxInner.find(".pulldown-list");
        list = this.list = [];
        indexList = this.indexList = [];
        //更新dom列表
        for (j = 0; j < size; j ++) {
            list[j] = $list.eq(j);
            indexList[j] = j;
        }
    },
    /**
     * 组件默认过滤列
     * @param {string} value
     * @private
     */
    __filterList: function (value) {
        var opts, data, dataList, $boxInner, size, label, filterFields,
            filterFieldsList, len, $hideListBox, i, j, list, indexList;
        //空值
        if (value === "") {
            this.__recoverBox();
            return;
        }
        //通过接口自定义过滤
        if (this.__filterCustom(value) || this.__filterCustomData(value)) {
            return;
        }
        //赋值
        opts = this.options;
        data = this.data;
        $boxInner = this.$boxInner;
        size = this.size;
        label = opts.label_field;
        filterFields = opts.filter_fields;
        len = filterFields.length;
        $hideListBox = this.$hideListBox;
        list = this.list;
        indexList = this.indexList = [];
        //过滤
        outer: for (i = 0; i < size; i++) {
            dataList = data[i];
            if (dataList[label].indexOf(value) !== -1) {
                //文字字段过滤
                $boxInner.append(list[i]);
                indexList.push(i);
            } else {
                if (len) {
                    //过滤字段过滤
                    for (j = 0; j < len; j++) {
                        filterFieldsList = dataList[filterFields[j]];
                        if (typeof filterFieldsList === "string" &&
                            filterFieldsList.indexOf(value) !== -1) {
                            $boxInner.append(list[i]);
                            indexList.push(i);
                            continue outer;
                        }
                    }
                }
                //过滤字段过滤
                $hideListBox.append(list[i]);
            }
        }
    },
    /**
     * 用户数据过滤，已经废弃
     * 根据返回对象的值与现有data的值进行恒等匹配
     * @param {string} value
     * @returns {boolean|undefined}
     * @private
     */
    __filterCustomData: function (value) {
        var opts = this.options,
            valueField, $boxInner, indexList, $hideListBox, list,
            i, data, size, dataI, newData, k, newDataK,
            onFilterData = opts.on_filter_data;
        if (typeof onFilterData === "function") {
            //newData 应该为过滤出来的数据 Json
            newData = onFilterData.call(this, this, value);
            if ($.type(newData) === "array") {
                data = this.data;
                size = this.size;
                $boxInner = this.$boxInner;
                indexList = this.indexList = [];
                $hideListBox = this.$hideListBox;
                list = this.list;
                valueField = opts.value_field;
                //过滤
                outer: for (i = 0; i < size; i++) {
                    dataI = data[i];
                    //过滤出来的数据重新调整dom
                    for (k = newData.length; k--;) {
                        newDataK = newData[k];
                        if (dataI[valueField] === newDataK[valueField]) {
                            $boxInner.append(list[i]);
                            indexList.push(i);
                            continue outer;
                        }
                    }
                    $hideListBox.append(list[i]);
                }
            }
            return true;
        }
    },
    /**
     * 用户匹配数据过滤
     * 根据用户返回的Boolean数组对每一行数据进行匹配判断
     * @param {string} value
     * @returns {boolean|undefined}
     * @private
     */
    __filterCustom: function (value) {
        var opts = this.options,
            onFilterShow = opts.on_filter,
            $boxInner, indexList, $hideListBox, list,
            i, newData;
        if (typeof onFilterShow === "function") {
            //newData 应该为[boolean, boolean, ...]
            newData = onFilterShow.call(this, this, value);
            if ($.type(newData) === "array") {
                $boxInner = this.$boxInner;
                indexList = this.indexList = [];
                $hideListBox = this.$hideListBox;
                list = this.list;
                //过滤dom
                for (i = this.size; i--;) {
                    if (newData[i] === true) {
                        $boxInner.append(list[i]);
                        indexList.push(i);
                    } else {
                        $hideListBox.append(list[i]);
                    }
                }
            }
            return true;
        }
    },
    /**
     * 根据值，或者字段获取index
     * @param {string} value
     * @returns {number}
     * @private
     */
    __getIndex: function (value, label) {
        var opts = this.options,
            comparisonValue = value,
            field = opts.value_field,
            data = this.data,
            size = this.size,
            i;
        if (value === undefined) {
            comparisonValue = label;
            field = opts.label_field;
        }
        for (i = 0; i < size; i++) {
            //全部转换为字符串比较
            if (data[i][field]+'' === comparisonValue + '') {
                return i;
            }
        }
        return -1;
    },  
    /**
     * 下拉框显示回调
     * 滚动到当前选中行在显示范围内。
     * @private
     */
    __showBoxCallBack: function () {
        //滚动到选中值位置
        var index = this.index;
        if (index !== -1) {
            this.__scrollHoverPosition(index);
        }
    },
    /**
     * 下拉隐藏回调
     * @private
     */
    __hideBoxCallBack: function () {
        //this.selectEvent： 是否是选中事件后的及时隐藏，如果否表示用户输入后的隐藏
        if ( this.options.editable && !this.selectEvent) {
            this.__checkSelect(this.__getIndex(undefined, this.$text.val()));
        }
        this.selectEvent = false;
        //初始化下拉列表dom
        this.__recoverBox();
        //清除高亮
        this.__clearHover();
    },
    /**
     * 清除高亮
     * @private
     */
    __clearHover: function () {
        var hoverIndex = this.hoverIndex;
        if (typeof hoverIndex !== "undefined") {
            this.list[this.indexList[hoverIndex]].removeClass("pulldown-hover");
            delete this.hoverIndex;
        }
    },
    /**
     * 还原下拉框内容
     * @private
     */
    __recoverBox: function () {
        var list = this.list,
            indexList = this.indexList = [],
            size = this.size,
            $boxInner = this.$boxInner, i;
        for (i = 0; i < size; i++) {
            if (!$boxInner.find(list[i]).length) {
                $boxInner.append(list[i]);
            }
            indexList.push(i);
        }
    },
    /**
     * 必需
     * 设置值
     * @param value
     */
    __setValue: function (value) {
        this.__checkSelect(this.__getIndex(value));
    },
    /**
     * 选中
     * @private
     */
    __checkSelect: function (newIndex) {
        var opts = this.options,
            labelField = opts.label_field,
            valueField = opts.value_field,
            dataIndex,
            list = this.list,
            index = this.index;
        //清除上一次选中的行
        if (index !== -1) {
            list[index].removeClass("pulldown-checked");
        }
        if (newIndex !== -1) {
            //处理当前选中的行
            list[newIndex].addClass("pulldown-checked");
            dataIndex = this.data[newIndex];
            this._setProp({
                text: dataIndex[labelField],
                value: dataIndex[valueField],
                data: dataIndex
            });
        } else {
            //没有任何选中
            this._setProp({
                value: opts.must_exist ? "" : this.$text.val(),
                text: opts.must_exist ? "" : this.$text.val(),
                data: null
            });
        }
        this.index = newIndex;
    },
    /**
     * 必需
     * 鼠标选择事件up回调
     */
    __mouseUpHandler: function (event) {
        var target = $(event.target),
            index;
        this.selectEvent = true;
        if (target.hasClass("pulldown-list")) {
            index = target.attr("index");
            if (index) {
                this.__checkSelect(index - 0);
            }
            this.$text.blur();
        } else if (!this.size) {
            this.$text.blur();
        }
    },
    /**
     * 按向上键
     * @private
     */
    __keyDownUPHandler: function () {
        var indexList = this.indexList,
            len = indexList.length,
            list, hoverIndex;
        if (len) {
            list = this.list;
            hoverIndex = this.hoverIndex;
            if (typeof hoverIndex === "undefined") {
                //刚展开状态
                hoverIndex = len - 1;
                list[indexList[hoverIndex]].addClass("pulldown-hover");
            } else {
                //移除前一条高亮
                list[indexList[hoverIndex] || 0].removeClass("pulldown-hover");
                //实现循环
                if (--hoverIndex === -1) {
                    hoverIndex = len - 1;
                }
                list[indexList[hoverIndex]].addClass("pulldown-hover");
            }
            this.hoverIndex = hoverIndex;
            this.__scrollHoverPosition(hoverIndex);
        }
    },
    /**
     * 按向下键
     * @private
     */
    __keyDownDownHandler: function () {
        var indexList = this.indexList,
            len = indexList.length,
            list,
            hoverIndex;
        if (len) {
            list = this.list;
            hoverIndex = this.hoverIndex;
            if (typeof hoverIndex === "undefined") {
                //刚展开状态
                hoverIndex = 0;
                list[indexList[0]].addClass("pulldown-hover");
            } else {
                //移除前一条高亮
                list[indexList[hoverIndex] || 0].removeClass("pulldown-hover");
                //实现循环
                if (len === ++hoverIndex) {
                    hoverIndex = 0;
                }
                list[indexList[hoverIndex]].addClass("pulldown-hover");
            }
            this.hoverIndex = hoverIndex;
            this.__scrollHoverPosition(hoverIndex);
        }
    },
    /**
     * 滚动到焦点位置
     * @param {number} positionIndex
     * @private
     */
    __scrollHoverPosition: function (positionIndex) {
        var lineHeight = 28,
            $box = this.$box,
            hoverPo = positionIndex * lineHeight,
        newScrollTop = hoverPo + lineHeight - $box.height();
        if ($box.scrollTop() < newScrollTop) {
            $box.scrollTop(newScrollTop);
        } else if ($box.scrollTop() > hoverPo){
            $box.scrollTop(hoverPo);
        }
    },
    /**
     * 回车
     * @private
     */
    __keyDownEnterHandler: function(){
        var hoverIndex = this.hoverIndex;
        this.selectEvent = true;
        if (typeof hoverIndex !== "undefined") {
            this.__checkSelect(this.indexList[hoverIndex]);
        }
        this.$text.blur();
    },
    /**
     * 输入按键回调
     * @param {object} event 传入的event对象
     * @private
     */
    __keyUpHandler: function (event) {
        var keyCode = event.keyCode;
        //13：enter 37：left， 38：up 39：right 40：down
        if (!this.options.auto_complete ||
            keyCode === 13 || keyCode === 37 || keyCode === 38 || keyCode === 39 || keyCode === 40) {
            return;
        }
        this.__clearHover();
        this.__filterList(this.$text.val());
    },
    /**
     * 获取输入框文字
     * @returns {string}
     * @private
     */
    __getText: function () {
        return this.text;
    }
});
})(window.comtop);
/**
 * 模块: CUI组件 MultiPullDown类
 * 创建: 王伟3
 * 日期: 13-10-9
 * 描述: 继承自PullDown组件基础。传址引用了部分SinglePullDown类中的方法。
 */
;(function(C){
    "use strict";
    var $ = C.cQuery,
        SinglePullDown = C.UI.SinglePullDown.prototype;
    C.UI.MultiPullDown = C.UI.PullDown.extend({
        options : {
            uitype:'MultiPullDown',
            name:'MultiPullDownName'
        },
        /**
         * 必需
         * 初始化模块
         * @private
         */
        __initMode: function (rendered) {

            this.index = [];
            this.checkAll = false;
            this.__createList(rendered);
        },
        /**
         * 必需
         * 文本模式
         * @private
         */
        __renderTextMode: function () {
            var opts = this.options,
                value = opts.value.split(/;|；/),
                len = value.length,
                labelField = opts.label_field,
                valueField = opts.value_field,
                data = this.data,
                dataI, i, j,
                html = [],
                length = data.length;
            if (!len) {
                return;
            }
            //文字模式显示文字拼凑
            for (i = 0; i < length; i++) {
                dataI = data[i];
                for (j = 0; j < len; j ++) {
                    if (dataI[valueField] === value[j]) {
                        html.push(dataI[labelField]);
                    }
                }
            }
            this.$el.text(html.join(";"));
        },
        /**
         * 创建下拉模块Dom
         * @private
         */
        __createList: function (rendered) {
            var data = this.data,
                $box = this.$box,
                size = this.size = data.length,
                html = [],
                label = this.options.label_field,
                i, j, $list, list, indexList, text;
            //拼凑HTML字符串
            for (i = 0; i < size; i++) {
                text = data[i][label];
                html.push(
                    '<a class="pulldown-list" href="#/" index="',
                    i,
                    '" title="',
                    text,
                    '">',
                    text,
                    '</a>'
                );
            }
            if (!rendered) {
                //第一次渲染
                $box.addClass("multi-pulldown-box").append('<div class="pulldown-list-all">' +
                    '<a href="#/" class="pulldown-list">全选</a></div>');
                this.allCheckDom = $box.find(".pulldown-list-all").eq(0).find(".pulldown-list").eq(0);
                this.__bindAllAcitveEvent();
            } else {
                this.__setAllCheck(false);
            }
            //空数据时，隐藏全选。
            if (size) {
                $box.find(".pulldown-list-all").eq(0).show();
            } else {
                $box.find(".pulldown-list-all").eq(0).hide();
            }
            //列表dom存入数组
            $list = this.$boxInner.html(html.join("")).find(".pulldown-list");
            list = this.list = [];
            indexList = this.indexList = [];
            //组合dom列表
            for (j = 0; j < size; j ++) {
                list[j] = $list.eq(j);
                indexList[j] = j;
            }
        },
        /**
         * 全选事件绑定
         * @private
         */
        __bindAllAcitveEvent: function () {
            var self = this,
                index,
                i;
            this.allCheckDom.on("click", function (event) {
                event.stopPropagation();
                event.preventDefault();
                if (self.checkAll) {
                    self.index = [];
                } else {
                    index = [];
                    for (i = self.size; i--; ) {
                        index[i] = true;
                    }
                    self.index = index;
                }
                self.__setInputProp();
            });
        },
        /**
         * 是否全选状态设置
         * @param {boolean} flag
         * @private
         */
        __setAllCheck: function (flag) {
            var allCheck = "全选",
                allCancelCheck = "取消";
            this.checkAll = flag;
            if (flag) {
                this.allCheckDom.addClass("pulldown-checked").html(allCancelCheck);
            } else {
                this.allCheckDom.removeClass("pulldown-checked").html(allCheck);
            }
        },
        /**
         * 下拉框显示回调
         * 滚动到当前选中行的第一个在显示范围内。
         * @private
         */
        __showBoxCallBack: function () {
            var index = this.index,
                len = index.length,
                i = 0;
            if(len) {
                for (; i < len; i++) {
                    if (index[i] === true) {
                        this.__scrollHoverPosition(i);
                        break;
                    }
                }
            } else {
                this.__scrollHoverPosition(0);
            }
        },
        /**
         * 下拉隐藏回调
         * @private
         */
        __hideBoxCallBack: function () {
            //清除高亮
            this.__clearHover();
            //匹配输入
            if (this.options.editable) {
                this.__setIndex(undefined, this.$text.val());
            }
        },
        /**
         * 根据值或者字段获得index
         * 必需有一个参数
         * @param {string} value
         * @param {string} label
         * @private
         */
        __setIndex: function (value, label) {
            var opts = this.options,
                field = opts.value_field,
                comparisonValue = value === undefined ? label : value,
                index, data, size, i, j, len;
            if (typeof comparisonValue !== "string") {
                return ;
            }
            index = this.index = [];
            data = this.data;
            size = this.size;
            if (value === undefined) {
                field = opts.label_field;
            }
            comparisonValue = comparisonValue.split(/;|；/);
            len = comparisonValue.length;
            //匹配出选择第几条
            for (i = 0; i < size; i++) {
                for (j = 0; j < len; j ++) {
                    if (data[i][field] === comparisonValue[j]) {
                        index[i] = true;
                    }
                }
            }
            this.__setInputProp();
        },
        /**
         * 根据this.index设置输入框和隐藏域的值。
         * @private
         */
        __setInputProp: function () {
            var opts = this.options,
                labelField = opts.label_field,
                valueField = opts.value_field,
                size = this.size,
                data = this.data,
                index = this.index,
                list = this.list,
                dataIndex, i, checkNum = 0,
                text = [], value = [], selectData = [];
            //组合出显示文字和值
            for (i = 0; i < size; i++) {
                dataIndex = data[i];
                if (index[i]) {
                    checkNum++;
                    list[i].addClass("pulldown-checked");
                    text.push(dataIndex[labelField]);
                    value.push(dataIndex[valueField]);
                    selectData.push(dataIndex);
                } else {
                    list[i].removeClass("pulldown-checked");
                }
            }
            this.__setAllCheck(checkNum === size && size !== 0);
            this._setProp({
                text: text.join(";"),
                value: value.join(";"),
                data: selectData
            });
        },
        /**
         * 清除高亮
         * @private
         */
        __clearHover: SinglePullDown.__clearHover,
        /**
         * 必需
         * 设置值
         * @param {string} value
         */
        __setValue: function (value) {
            this.__setIndex(value);
        },
        /**
         * 选中
         * @param {number} newIndex
         * @private
         */
        __checkSelect: function (newIndex) {
            var index = this.index;
            if (newIndex < 0 || newIndex >= this.size) {
                return;
            }
            index[newIndex] = !index[newIndex];
            this.__setInputProp();
        },
        /**
         * 必需
         * 鼠标选择事件回调
         * @param {object} event 事件event对象
         * @private
         */
        __mouseUpHandler: function (event) {
            var target = $(event.target),
                index;
            if (target.hasClass("pulldown-list")) {
                index = target.attr("index");
                if (index) {
                    this.__checkSelect(index - 0);
                }
            }
            this.$text.focus();
        },
        /**
         * 按向上
         * @private
         */
        __keyDownUPHandler: SinglePullDown.__keyDownUPHandler,
        /**
         * 按向下
         * @private
         */
        __keyDownDownHandler: SinglePullDown.__keyDownDownHandler,
        /**
         * 滚动到焦点位置
         * @param positionIndex
         * @private
         */
        __scrollHoverPosition: function (positionIndex) {
            var lineHeight = 23,
                $box = this.$box,
                hoverPo = positionIndex * lineHeight,
                newScrollTop = hoverPo + lineHeight * 2 - $box.height();
            if ($box.scrollTop() < newScrollTop) {
                $box.scrollTop(newScrollTop);
            } else if ($box.scrollTop() > hoverPo){
                $box.scrollTop(hoverPo);
            }
        },
        /**
         * 回车
         * @private
         */
        __keyDownEnterHandler: function(){
            var hoverIndex = this.hoverIndex;
            if (typeof hoverIndex !== "undefined") {
                this.__checkSelect(this.indexList[hoverIndex]);
            }
        },
        /**
         * 获取输入框文字,以数组的形式返回
         * @returns {Array}
         * @private
         */
        __getText: function () {
            if (this.text === "") {
                return [];
            }
            return this.text.split(";");
        }
    });
})(window.comtop);
/**
 *
 * 分页组件
 *
 * @author 柯尚福
 * @since 2012-09-05
 *
 */

;
(function($, C) {

    /**
     * 分页组件抽象类
     */
    C.UI.BasePagination = C.UI.Base.extend({

        _init: function(options) {
            //$.extend({}, this.opitons, options);
            this.options.pagesize_list = typeof options.pagesize_list === 'string' ?
            this._convertTo(options.pagesize_list, 'object', [25, 50, 100]) :
            this.options.pagesize_list;
            this.$container = $(this.options.el);
            this.setInitData(this.options);
        },

        _create: function() {
            if (this.totalItems <= 0) {
                this.$container.empty();
                return;
            }
            this.setInitData(this.options);
            this._calTotalPage();
            this._draw();
            this._bindEvent(this.$container);
        },

        _draw: function() {

        },

        _bindEvent: function() {

        },

        /**
         * 计算总共有多少页
         */
        _calTotalPage: function() {
            this.totalPage = Math.ceil(this.totalItems / this.itemsPerPage);
            if (this.currentPage >= this.totalPage) {
                this.currentPage = this.totalPage;
            }
        },

        /**
         * 供外部调用的重绘
         */
        reDraw: function() {
            this._create();
            return this;
        },

        /**
         * 设置总记录数,供外部调用
         */
        setCount: function(count) {
            this.options.count = this.totalItems = count;
            return this;
        },

        /**
         * 废弃，但保留支持
         */
        setPagesize: function(pagesize) {
            return this.setPageSize(pagesize);
        },
        /**
         * 设置每页显示记录数,供外部调用
         * @param pagesize
         */
        setPageSize: function(pagesize) {
            if (typeof pagesize !== 'number' || pagesize <= 0) {
                return this;
            }
            var hasPS = false;
            for (var i = 0; i < this.options.pagesize_list.length; i++) {
                if (this.options.pagesize_list[i] === pagesize) {
                    hasPS = true;
                    break;
                }
            }
            this.itemsPerPage = this.options.pagesize = pagesize;
            if (!hasPS) {
                var psList = $.extend([], this.options.pagesize_list);
                psList.push(pagesize);
                psList.sort(sortNumber);
                psList.splice(3, 1);
                this.options.pagesize_list = psList;
            }

            function sortNumber(a, b) {
                return a - b;
            }
            this.reDraw();
            return this;
        },
        /**
         * 用于自定义设置pagesize
         * add by pengxiangwei
         * @param pagesize
         */
        _setPageSize4Text: function(pagesize) {
            this.itemsPerPage = this.options.pagesize = pagesize;
            this._click(this.currentPage, this.itemsPerPage);
        },
        /**
         * 设置分页条所需的数据，包括总记录数，每页显示记录数，当前页码等
         */
        setInitData: function(data) {

            this.options = $.extend(true, this.options, data);
            if (data.pagesize_list) {
                this.options.pagesize_list = data.pagesize_list;
            }
            data = this.options;

            this.totalItems = data.count != null ? data.count : null;
            this.itemsPerPage = data.pagesize != null ? data.pagesize : null;
            this.currentPage = data.pageno != null ? data.pageno : null;
            //判断数据的有效范围，并纠正
            this.currentPage = data.pageno = data.pageno < 1 ? 1 : data.pageno;
            this.itemsPerPage = data.pagesize = data.pagesize < 1 ? data.pagesize_list[1] : data.pagesize;

            //==2014-1月12号注释，没有匹配的pageSize不在追加到pageSize_list中了 peng xiangwei
            //如果用户设置的pagesize不在pagesize_list内部，则在pagesize_list内部追加一个项
            /*var isAdd = true;
            for (var i = 0; i < data.pagesize_list.length; i++) {
                var item = data.pagesize_list[i];
                //过滤小于1的分页项
                if(item < 1){
                    data.pagesize_list.splice(i,1);
                    i --;
                    continue;
                }
                if(item === this.itemsPerPage){
                    isAdd = false;
                }
            }
            if(isAdd){
                data.pagesize_list.push(this.itemsPerPage);
                data.pagesize_list.sort(function(a, b){
                    return a - b;
                });
            }*/
            return this;
        },

        /**
         * 跳到某一页
         */
        go: function(num) {
            if (typeof num !== 'number') {
                return this;
            }
            if (num > this.totalPage) {
                num = this.totalPage;
            }
            this.options.pageno = this.currentPage = num;
            this._click(num, this.itemsPerPage);
            return this;
        },

        /**
         * 跳到下一页
         */
        next: function() {
            if (this.currentPage === this.totalPage) {
                return this;
            }
            this.currentPage++;
            this.options.pageno = this.currentPage;
            this._click(this.currentPage, this.itemsPerPage);
            return this;
        },

        /**
         * 跳到上一页
         */
        prev: function() {
            if (this.currentPage === 1) {
                return this;
            }
            this.currentPage--;
            this.options.pageno = this.currentPage;
            this._click(this.currentPage, this.itemsPerPage);
            return this;
        },

        /**
         * 获取分页组件当前处于第几页
         *
         * @return
         */
        getCurrentPage: function() {
            return this.currentPage;
        },

        /**
         *
         * @param list
         * @param pagesize
         */
        setPageSizeList: function(list, pagesize) {
            if ($.type(list) !== 'array') {
                return this;
            }
            if (typeof pagesize !== 'number' || pagesize <= 0) {
                pagesize = this.options.pagesize;
            }
            this.options.pagesize_list = $.extend(true, this.options.pagesize_list, list);
            this.options.pagesize_list.splice(3);

            var hasPS = false;
            for (var i = 0; i < this.options.pagesize_list.length; i++) {
                if (this.options.pagesize_list[i] === pagesize) {
                    hasPS = true;
                    break;
                }
            }
            this.itemsPerPage = this.options.pagesize = hasPS ? pagesize : this.options.pagesize_list[1];
            this.reDraw();
            return this;
        },

        /**
         * 点击某一页时执行函数
         *
         */
        _click: function(currentPage, itemsPerPage) {
            if (this.options.on_page_change) {
                this.options.on_page_change.call(this, currentPage, itemsPerPage);
            }
            //this.reDraw();
        },

        /**
         * 设置每页显示多少条记录
         *
         */
        _setItemsPerPage: function(itemsPerPage) {
            this.itemsPerPage = itemsPerPage;
        }
    });


    C.UI.Pagination = C.UI.BasePagination.extend({
        options: {
            uitype: 'Pagination',
            cls: 'pagination',
            count: 0, //总记录数
            display_page: 4, //分页条中间显示多少页
            pagesize: 25, //每页显示多少条
            pageno: 1, //当前在第几页
            pagesize_list: [25, 50, 100], //可选每页显示多少条
            on_page_change: null,
            custom_pagesize: false, //自定单页显示页数
            customerText: ''
        },

        _draw: function() {

            var displayPage = this.options.display_page;
            if (displayPage > this.totalPage) displayPage = this.totalPage;
            if (displayPage <= 3) displayPage = 3;

            var displayPreCount = Math.floor((displayPage - 1) / 2),
                displayNextCount = Math.ceil((displayPage - 1) / 2);

            //为了均匀显示页数，不至于有时显示的页数过少，做的一些处理
            if (this.currentPage - 2 < displayPreCount) {
                displayNextCount = displayNextCount + displayPreCount - (this.currentPage - 2);
            } else if (this.totalPage - this.currentPage - 1 < displayNextCount) {
                displayPreCount = displayPreCount + displayNextCount - (this.totalPage - this.currentPage - 1);
            }
            //dispalyPreCount 最多显示(this.currentPage-1 )页
            if (displayPreCount > this.currentPage - 1) {
                displayPreCount = this.currentPage - 1;
            }
            //displayNextCount 最多显示(this.totalPage - this.currentPage) 页
            if (displayNextCount > this.totalPage - this.currentPage) {
                displayNextCount = this.totalPage - this.currentPage;
            }

            var toFirst = this.currentPage - displayPreCount,
                toLast = this.currentPage + displayNextCount;
            var data = {
                totalItems: this.totalItems,
                totalPage: this.totalPage,
                currentPage: this.currentPage,
                itemsPerPage: this.itemsPerPage,
                selectList: this.options.pagesize_list,
                customerText: this.options.customerText,
                customPageSize: this.options.custom_pagesize,
                displayPreCount: displayPreCount,
                displayNextCount: displayNextCount,
                toFirst: toFirst,
                toLast: toLast
            };

            this.$container.html(this._buildTemplateStr('pagination', data)).addClass(this.options.cls).addClass('cui');
            if (C.Browser.isQM && C.Browser.isIE) { //处理IE怪异模式的问题
                this.$container.addClass('pagination-qm');
            }

            C.UI.InputMask.doMask(this.$container.find("[act='cusPage']"), 'Num');

            //加入自定义单页数量 2015-1-12
            if (this.options.custom_pagesize) {
                //限制输入Num，和最大数为4位数值
                C.UI.InputMask.doMask(this.$container.find("[act='customPageSize']"), 'Num');
                this.$container.find("[act='customPageSize']").on("input propertychange", function(e) {
                    var value = $(this).val();
                    if (value.length > 4) {
                        $(this).val(C.String.interceptString(value, 4));
                    }
                });
            }
        },

        _bindEvent: function() {
            var _self = this,
                $ct = this.$container;
            //点击某一页
            $ct.find('[act="numPage"]').bind('click', function() {
                _self.go(parseInt($(this).text(), 10));
                return false;
            });
            //点击上一页
            $ct.find('[act="prevPage"]').bind('click', function() {
                _self.prev();
                return false;
            });
            //点击下一页
            $ct.find('[act="nextPage"]').bind('click', function() {
                _self.next();
                return false;
            });

            //跳到某一页
            $ct.find('[act="goPage"]').bind('click', go);

            //回车事件跳到某一页
            $ct.find('[act="cusPage"]').bind('keydown', function(event) {
                if (event.keyCode === 13) {
                    go();
                }
            });

            //选择每页显示条数
            this.$container.find('[act="sizePage"]').bind('click', function() {
                _self._setItemsPerPage(parseInt($(this).text(), 10));
                _self._calTotalPage();
                _self.go(_self.currentPage);
                return false;
            });

            //change pageSize Number
            this.$container.find("[act='customPageSize']").on("blur", function() {
                goPageSize();
            }).on("keydown", function(event) {
                if (event.keyCode === 13) {
                    $(this).trigger("blur");
                }
            });

            //刷新当前页面的pageSize
            function goPageSize() {
                var num = Number(_self.$container.find('.page-size-num').val());

                num = !!num ? num : _self.itemsPerPage;
                _self._setItemsPerPage(num);
                _self._calTotalPage();
                _self.go(_self.currentPage);
                return false;
            };

            //跳到某一页执行函数
            function go() {
                var num = parseInt(_self.$container.find('.page-skip-num').val(), 10);
                if (isNaN(num) || num <= 0) num = 1;
                if (num > _self.totalPage) num = _self.totalPage;
                _self.go(num);
                return false;
            }
        }
    });

})(window.comtop.cQuery, window.comtop);
/**
 * comtop.ui.Panel组件<br>
 *
 * 功能描述: panel容器组件,提供展开/收起功能;
 */
;
(function ($, C) {

// 常量
    var COLLAPSE = 0, // 状态值
        EXPAND = 1,
        EVT_CHANGE = 'change'; // 事件名称
    var getPadding = function (dom) {
        if (!dom) {
            return {top: 0, bottom: 0, left: 0, right: 0};
        }
        var style = null;
        if (dom.currentStyle) {
            style = dom.currentStyle;
        } else {
            style = getComputedStyle(dom, false);
        }
        return {top: parseInt(style.paddingTop), bottom: parseInt(style.paddingBottom), left: parseInt(style.paddingLeft), right: parseInt(style.paddingRight)};
    };
    /**
     * Panel
     * @type {[type]}
     */
    comtop.UI.Panel = comtop.UI.Base.extend({

        options: {
            uitype: "Panel",
            header_title: "",
            width: 0,
            height: 0,
            url: "", // iframe
            html: "", // innerHTML/DOM Element; url,html只能选一个.
            on_change: null, // fn 
            collapsible: true, // 是否可收缩
            status: EXPAND, // 默认是展开的		 
            animate: "", // 动画,默认为""表示关闭动画; 可选值:"slide"为滑动效果;
            containerCls: "cui-panel",
            titleCls: "cui-panel-title",
            triggerCls: "cui-panel-trigger",
            contentCls: "cui-panel-content"
        },

        /**
         * Panel容器
         * @type {[type]}
         */
        container: null,

        /**
         * 标题
         * @type {jQuery}
         */
        title: null,

        /**
         * 触点
         * @type {jQuery}
         */
        trigger: null,

        /**
         * 内容面板
         * @type {jQuery}
         */
        content: null,

        /**
         * 当前的切换状态
         * @type {[type]}
         */
        status: null,

        /**
         * 嵌套iframe且延迟加载时,标题是否已加载url
         * @type {Boolean}

        loaded: false,
         */
        /**
         * 支持的事件列表
         * @type {Array}
         */
        events: [EVT_CHANGE],

        _init: function (options) {
            var opt = this.options;
            options.height=C.Tools.fixedNumber(options.height);
            if (options.height) {
                opt.height = options.height;
            }
            this.status = opt.status;
            if (options.html && window[options.html]) {
                opt.html = window[options.html];
            }
            if (options.header_title && window[options.header_title]) {
                opt.header_title = window[options.header_title];
            }
           /* if (!opt.lazy) this.loaded = true;  */
            opt.el.css({"zoom": 1});
            if (typeof opt.on_change == "function") {
                this.bind("change", opt.on_change);
            }
            if ($.trim(opt.el.html()) !== "") {
                this._needBuildTemp = true;
            }

        },

        _create: function () {
            var opt = this.options, panel, container;
            if (this._needBuildTemp) {
                this._initStructures();
            }
            container = opt.el;
            panel = $(".cui-panel-content",container).hide();
            this._navHeight = $(".cui-panel", container).height() - 2;
            panel.show();

            this._parseMarkup();
            this._initView(true);
        },
        /**
         * 解析DOM,初始化title, trigger, content相关成员变量
         * @return {[type]} [description]
         */
        _parseMarkup: function () {
            var opt = this.options;
            this.container = $("." + opt.containerCls, opt.el);
            this.title = $("." + opt.titleCls, opt.el);
            this.trigger = $("." + opt.triggerCls, opt.el).eq(0);
            this.content = $("." + opt.contentCls, opt.el);
        },
        _initView: function (flag) {
            var opt = this.options;
            this._setUpSize();
            this._bindTriggers();
            if (opt.header_title) {
                this._setTitle(opt.header_title);
            }
            if (opt.html && flag) {
                if (typeof(opt.html) === 'string') {
                    this.content.find("div").html(opt.html);
                } else {
                    this.content.find("div").append($(opt.html));
                }
            } else if (opt.url && flag) {
                this._loadFrame();
            }
            !opt.collapsible?this.trigger.hide():this.trigger.show();
           /* if (opt.collapsible == false)
            {
                this.trigger.hide();
            }
            else {
                this.trigger.show();
            } */
            opt.status === EXPAND?this._showView():this._hideView();

/*         if (opt.status == EXPAND) {
                this._showView();
            }
            else {
                this._hideView();
            }*/
        },
        /**
         *  设置高度
         */
        _setUpSize: function () {
            var opt = this.options,
                contentHeight,
                height = opt.height,
                parent = opt.el.parent();
            var pa = getPadding(opt.el.find(".cui-panel-content").get(0)),
                padding = (C.Browser.isQM && C.Browser.isIE && !C.Browser.isIE9) ? 0 : (pa.top + pa.bottom) + 2;
            this._contentPadding = pa;

            if (opt.width) {
                this.container.width(opt.width);
            }
            if (height) {
                if (height === "100%") {
                    if (parent.prop("tagName") === 'BODY') {
                        this.h = $.client.height();
                        opt.el.find(".cui-panel-content").eq(0).css("height", 0);
                        this.margin = parseInt(parent.css("marginTop")) + parseInt(parent.css("marginBottom"));
                        opt.height = height = this.h - this.margin;
                        this._resizeHandle();
                    } else {
                        this.margin = 0;
                        opt.height = height = opt.el.parent().height();
                    }
                }
                contentHeight = height - this._navHeight - padding;
                contentHeight = contentHeight < 10 ? 10 : contentHeight;
                opt.content_height = contentHeight;
                opt.el.find(".cui-panel-content").height(contentHeight);
                opt.el.find(".cui-panel-iframe").height("100%");
                if(C.Browser.isQM && C.Browser.isIE ){
                    this.content.children("div").height("").css("zoom",1);
                }
            }else{
                this.content.children("div").height("");
            }
        },
        _resizeHandle: function () {
            if (this.margin !== undefined) {
                var self = this;
                var opt = this.options;
                // self.h = $.client.height();
                var pa = this._contentPadding,
                    padding = (C.Browser.isQM && C.Browser.isIE && !C.Browser.isIE9) ? (pa.top + pa.bottom) + 2 : 0;

                function resize() {
                    var h = $.client.height();
                    self.content.css("height", self.content.height() + h - self.h + padding);
                    self.h = h;
                }

                $(window).on("resize", resize);
            }
        },

        ////////////////////////////////////////////////
        //
        //   Public
        //
        ////////////////////////////////////////////////
        /**
         * 获取属性值
         * @param  {string} name 属性名
         * @return {string}      相应的属性值
         */
        get: function (name) {
            var val = this.options[name];

            if (name == "width") {
                val = val || this.container.width();
            }
            else if (name == "height") {
                val = val || this.container.height();
                if (this.status == COLLAPSE) {
                    val = this._navHeight;
                }
            }
            else if (!val && name == "header_title") {
                val = this._getTitle();
            }
            else if (name == "status") {
                val = this.status;
            }
            return val;
        },

        /**
         * 设置属性值
         * 设置单个属性值: set(prop, value);
         * 设置多个属性值: set({prop: value, xxx: xx});
         *
         * @param {string} name  属性名
         * @param {string} value 属性值
         * @return {Panel}       当前对象实例. for chain
         */
        set: function (name, value) {
            var refreshFlag = false;
            if (typeof(name) === 'string') {
                this.options[name] = value;
                if (name == "url" || name == "html") {
                    refreshFlag = true;
                }
            } else {
                if (name.hasOwnProperty("url") || name.hasOwnProperty("html")) {
                    refreshFlag = true;
                }
                $.extend(this.options, name);
            }
            this._initView(refreshFlag);// for set
            return this;
        },

        /**
         * 展开
         * @param {function} callback  [可选]回调函数
         * @return {Panel} 当前对象实例. for chain
         */
        expend: function () {
            if (!this.options.collapsible || this.status == EXPAND) {
                return this;
            }

            this._showView();
            this.status = EXPAND;
            if (this.options.onchange) {
                this.options.onchange.call(null, this.status);
            }
            $(this).triggerHandler(EVT_CHANGE, this.status);
            return this;
        },

        /**
         * 收缩
         * @param {function} callback  [可选]回调函数
         * @return {Panel} 当前对象实例. for chain
         */
        collapse: function () {
            if (!this.options.collapsible || this.status == COLLAPSE) {
                return this;
            }

            this._hideView();
            this.status = COLLAPSE;
            if (this.options.onchange) {
                this.options.onchange.call(null, this.status);
            }
            $(this).triggerHandler(EVT_CHANGE, this.status);
            return this;
        },
        /**
         * 添加一个图标
         * @parma {className:xxx,callback:fn} settings 图标设置 包含class，点击后触发的回调
         * @return {Panel} 当前对象实例. for chain
         */
        addIcon: function (settings) {
            if (!settings || !settings.className) {
                return;
            }
            var title= settings.title||"";
            var html = '<a href="#" title="'+title+'" class="cui-panel-trigger-customer ' + settings.className + '" hidefocus="true"></a>';
            var triggerContainer = this.title.find(".cui-panel-trigger-content").append(html);
            if (typeof settings.callback == "function") {
                triggerContainer.find("a." + settings.className).on("click", function () {
                    settings.callback();
                    return false;
                });
            }
            return this;
        },
        /**
         * 移除一个图标
         * @parma {string} 根据class移除icon
         * @return {Panel} 当前对象实例. for chain
         */
        removeIcon: function (className) {
            if (!className) {
                return;
            }
            this.title.find("a." + className).unbind().remove();
            return this;
        },
        /**
         * 切换展开/收缩状态
         * @return {Panel} 当前对象实例. for chain
         */
        toggle: function () {
            if (this.status == EXPAND){
                this.collapse();
            }
            else{
                this.expend();
            }
            return this;
        },
        /**
         * resize
         *
         * @param  { number} height panel的高度
         * @param  { number} width (可选)panel的宽度，不指定默认自动适应父容器的宽度
         */
        resize: function (height, width) {
            if (arguments.length == 0) {
                return;
            }
            if (typeof height == "number") {
                this.options.height = height;
                var pa = this._contentPadding,
                    padding = (C.Browser.isQM && C.Browser.isIE && !C.Browser.isIE9) ? 0 : (pa.top + pa.bottom) + 2,
                    computedHeight = height - this._navHeight - padding;
                /*if(this.options.url){
                 this.content.find("iframe").height(computedHeight);
                 }else{

                 } */
                this.content.height(computedHeight);
            }
            if (typeof width == "number") {
                this.options.width = width;
                this.container.width(width);
            }

        },
////////////////////////////////////////////////
//
//   Private
//
////////////////////////////////////////////////

        /**
         * 初始化结构.
         * 因为支持三种传参模式:完全页面模板,部分页面模板,jCT创建.
         * 当为部分页面模板的时候,需要手动加载jCT模板创建完整的结构.
         *
         * @return {[boolean]} [是否填充了结构]
         */
        _initStructures: function () {
            var opt = this.options,
                $root = $(document.createElement("div"));
            this._buildTemplate($root, "panel", opt);
            $(opt.el).before($root).appendTo($("." + opt.contentCls, $root).find("div"));
            /**/opt.el.css("height", "100%");
            this.el = opt.el = $root;
        },

        /**
         * 加载iframe
         * @return {[type]} [description]
         */
        _loadFrame: function () {
            var self = this,
                opt = this.options,
                $frame = this.content.find("iframe");
            $frame.attr("src", this.options.url);
            this.loaded = true;
            $frame.one("load", function () {
                var doc = $frame.get(0).contentWindow.document,
                    height0 = doc.body.scrollHeight,
                    height1 = doc.documentElement.scrollHeight,
                    height = Math.max(height0, height1);
                if (opt.content_height)
                    height = height < opt.content_height ? opt.content_height : height;
                if (C.Browser.isIE6 && !C.Browser.isQM) {
                    var cssH = $frame.height();
                    if (cssH && height > cssH) {
                        $(doc).find("head").append('<style type="text/css">html{overflow-y:scroll}</style>');
                    }
                }
                if ($(doc).width() > $frame.width()) {
                    height += 17;
                }
                if (!opt.height) {
                    $frame.height(height);
                }
            });

        },

        /**
         * 绑定触发事件
         * @return {[type]} [description]
         */
        _bindTriggers: function () {
            var self = this;
            var status = this.options.status;
            this.trigger.toggle(function () {
                if (status == EXPAND) {
                    self.collapse();
                } else {
                    self.expend();
                }
            }, function () {
                if (status == EXPAND) {
                    self.expend();
                } else {
                    self.collapse();
                }
            });
        },

        /**
         * 获取标题
         * @return {[type]} [description]
         */
        _getTitle: function () {
            return  this.title.find(".cui-panel-title-text").html();
        },

        /**
         * 设置标题
         * @param {string} name 标题名称
         */
        _setTitle: function (name) {

            this.title.find(".cui-panel-title-text").html(name);

        },

        /**
         * 显示内容面板
         * @param  {jQuery} content 内容面板
         * @return {[type]} [description]
         */
        _showView: function () {
            var animate = this.options.animate;
            this.trigger.removeClass("collapse").html("&#xf068;");

            if (animate && animate === "slide") {
                this.content.slideDown(100);
            }else {
                this.content.show();
            }
        },

        /**
         * 隐藏内容面板
         * @return {[type]} [description]
         */
        _hideView: function () {
            var animate = this.options.animate;
            this.trigger.addClass("collapse").html("&#xf067;");
            if (animate && animate === "slide") {
                this.content.slideUp(100);
            }else {
                this.content.hide();
            }

        }
    });
// 对外提供的常量.
    comtop.UI.Panel.EXPAND = EXPAND;
    comtop.UI.Panel.COLLAPSE = COLLAPSE;
})(window.comtop.cQuery, window.comtop);
/**
 * 2013年 8月 9日 By CUI团队-王伟
 * RadioGroup组件代码重写
 * checkboxGroup组件继承于此组件
 */
(function (C) {
    "use strict";
    var $ = C.cQuery;
    C.UI.RadioGroup = C.UI.Base.extend({
        options: {
            uitype: "RadioGroup",
            name: "",
            radio_list: [],
            direction: "horizontal",
            value: '',
            readonly: false,
            color : "#0078ff",  //#4585e5
            br: [],
            border: false,
            textmode: false,
            on_change : null
        },
        /**
         * 初始化数据
         * @private
         */
        _init: function () {
            var opts = this.options,
                value = opts.value,
                type =  this._setType();
            //config
            this.textmode = opts.textmode;
            this.guid = type + "group-" + C.guid() + "-";
            this.tipPosition = this.el;
            //dom
            this.el = opts.el.addClass(this.type + "-group");
            this.tip_text = this.el.attr("tip");
            this.inputs = null;
            this.labels = null;
            //data
            this.data = null;
            this.value = [String(value)];
            this.first = true;
            this.values = [];
            this.orignalValues=[];
            this.texts = [];
            this.colors = [];
            this.size = 0;
            this.readonly_list = {};
            if (opts.textmode) {
                this._create();
            }
        },
        /**
         * 设置类型,用于集成区分
         * @private
         */
        _setType: function () {
            this.type = "radio";
            return "radio";
        },
        /**
         * 开始渲染
         * @private
         */
        _create: function () {
            if (this.create) {
                return ;
            }
            var type = this.type,
                list = this.options[type + "_list"],
                listType = $.type(list),
                el = this.el,
                inner = document.createElement("div");
            this.inner = $(inner).html(el.html());
            this.inputs = this.inner.find("input");
            this.size = this.inputs.length;
            inner.className = type + "group-inner";
            if (this.options.border) {
                this.inner.addClass(type + "group-border");
            }
            el.html(inner);
            //判断数据
            if (listType === "function") {//回调函数
                list(this);
            } else if (listType === "array" && !this.size) {//Json
                this._setDatasource(list);
            } else if (this.size) {
                this._setDatasource(this._initData());
            } else {//都不是
                throw new Error(type + "_list's type not is a array or a function.");
            }
            this.create = true;
        },
        /**
         * 初始化数据
         * @private
         */
        _initData: function () {
            var inputs = this.inputs,
                length = this.size,
                i, inputsI, valueI, dataI, readonlyI, nextText,
                notVal = 0,
                newData = [];
            //拼凑数据
            for (i = 0; i < length; i++) {
                inputsI = inputs.eq(i);
                valueI = inputsI.attr("value");
                nextText = inputsI[0].nextSibling;
                if (valueI) {
                    dataI = {
                        text :inputsI.attr("text") || (nextText.nodeType === 3 ? nextText.nodeValue.replace(/\s*|\n*/g, "") : ""),
                        value : valueI
                    };
                    readonlyI = inputsI.attr("readonly");
                    if (readonlyI && (readonlyI === "true" || readonlyI.toLowerCase() === "readonly")) {
                        dataI.readonly = "readonly";
                    }
                    if (inputsI.attr("color")) {
                        dataI.color = inputsI.attr("color");
                    }
                    newData.push(dataI);
                } else {
                    notVal++;
                }
            }
            this.size -= notVal;
            return newData;
        },
        /**
         * 下面3个函数都是设置数据
         * 相互桥接
         * @param data
         */
        _setDatasource: function (data) {//初始化调用
            if ($.type(data) !== "array") {
                throw new Error("data's type not is a array.");
            } else {
                this.data = data;
                this.size = data.length;
                this._renderHtml();
            }
            this.first = false;
        },
        setDatasource: function (data) {
            //初始化数据
            if (!this.first) {
                this.value = [];
            }
            this.values = [];
            this.orignalValues=[];
            this.texts = [];
            this.readonly_list = {};
            this.colors = [];
            this._setDatasource(data);
        },
        setDataSource : function (data) {
            return this.setDatasource(data);
        },
        /**
         * 渲染HTML模版
         */
        _renderHtml: function () {
            var opts = this.options,
                data = this.data,
                name = opts.name,
                readonly = opts.readonly,
                texts = this.texts,
                values = this.values,
                colors = this.colors,
                length = this.size,
                direction = opts.direction,
                br = opts.br,
                brLen = br.length,
                brPosition = {},
                type = this.type,
                guid = this.guid,
                i, j,
                html = [],
                valueI, textI,
                readonlyList = this.readonly_list;
            //确定换行位置
            if (brLen) {
                for (j = brLen; j--;) {
                    brPosition[br[j]] = true;
                }
            }
            //生成模版
            for (i = 0; i < length; i ++) {
                if (i !== 0 && direction === "vertical" || brPosition[i]) {
                    html.push ('<br />');
                }
                valueI = values[i] = data[i].value+"";
                this.orignalValues.push(data[i].value);
                textI = texts[i] = data[i].text;
                if (readonly || data[i].readonly) {
                    readonlyList[valueI] = i;
                }
                colors[i] = data[i].color;
                html.push(
                    '<label for="', guid, i,'">',
                    '<input id="', guid, i, '" type="', type, '" name="', name, '" value="', valueI, '" index="', i, '" hidefocus="true" />',
                    textI,
                    '</label>'
                );
            }
            this.inner.html(html.join(""));
            this.inner = this.el.children().eq(0);
            this.labels = this.el.find("label");
            this.inputs = this.el.find("input");
            this._inputsAction();
        },
        /**
         * 渲染文字模式文字
         */
        _renderText: function () {
            var text = this.getText();
            if (text !== null) {
                this.inner.text(text.toString());
            } else {
                this.inner.text("");
            }
        },
        setTextMode: function(){
            //svn回退：数据动态绑定时，赋予的value不合规，在这里整形.待优化
            this.value = [String(this.options.value)];
            this._renderText();
        },
        /**
         * input操作
         * @private
         */
        _inputsAction: function () {
            //初始化值
            this._initValue();
            //设置值
            this._setValue(undefined);
            if (this.options.textmode) {
                this._renderText();
            }
            //绑定事件
            this._clickEventBind();
            //设置只读
            this._setReadonly();
            if (this._renderComplete) {
                this._renderComplete();
            }
        },
        /**
         * 初始化值
         * @private
         */
        _initValue: function (value) {
            value = (value || this.value).sort();
            var valLen = value.length,
                values = this.values,
                length = this.size,
                i, j,
                newValue = [];
            //设置的值，需要在已知的列表中存在，否则剔除。
            for (i = 0; i < valLen; i++) {
                for (j = 0; j < length; j++) {
                    if (values[j] === value[i] + "") {
                        newValue.push(values[j]);
                        break;
                    }
                }
            }
            this.value = $.unique(newValue);
        },
        /**
         * change回调
         * @private
         */
        _changeHander: function () {
            if(this.options.designMode){ return; }
            var changeHander = this.options.on_change;
            this._triggerHandler('change');
            changeHander && changeHander.call(this,this.getValue());
        },
        /**
         * 获取值
         * @private
         */
        getValue: function () {
            return this._getEle(this.orignalValues);
        },
        /**
         *获取选中的文字
         */
        getText: function () {
            return this._getEle(this.texts);
        },
        /**
         * 获取值或者文字处理函数
         * @private
         */
        _getEle: function (arr) {
            var value = this.value.sort(function (a, b) {
                    return a > b ? 1 : -1;
                }) ,
                valLen = value.length,
                index = this.size,
                type = this.type,
                i, newArr = [], new_str;
            //拼凑值和文字字符串
            for (i = 0; i < valLen; i++) {
                index = this._valueToIndex(value[i]);
                if (!isNaN(index)) {
                    newArr.push(arr[index]);
                    new_str = arr[index];
                }
            }
            if (type === "radio") {
                if(typeof new_str ==="undefined"){
                   return null;
                }
                return new_str;
            }
            return newArr.length ? newArr : null;
        },
        /**
         * 单机事件绑定
         * @private
         */
        _clickEventBind: function () {
            var self = this;
            this.el.off("click").on("click", function (event) {
                var target = $(event.target),
                    index, val,
                    readonlyList = self.readonly_list,
                    oldIndex;
                if (target.prop("tagName") === "INPUT") {
                    index = target.attr("index") - 0;
                    val = target.val();
                    oldIndex = self._valueToIndex(self.value[0]);
                    if (typeof readonlyList[val] !== "undefined") {
                        //只读元素的单击
                        if (!isNaN(oldIndex)) {
                            self.inputs.eq(oldIndex).prop("checked", true);
                        } else {
                            self.inputs.eq(index).prop("checked", false);
                            return false;
                        }
                    } else {
                        if (oldIndex === index) {
                            return;
                        }
                        self._checked(index);
                        self.value = [val];
                        self.labels.eq(oldIndex).removeClass(this.type + "-group-checked").css({"color": "", "fontWeight" : ""});
                        self._changeHander();
                    }
                }
            });
        },
        /**
         * 值获取index
         * @param val
         * @private
         */
        _valueToIndex: function (val) {
            if (typeof val === "undefined") {
                return NaN;
            }
            var values = this.values,
                length = this.size,
                i = 0;
            for (; i < length; i++) {
                if (val === values[i]) {
                    return i;
                }
            }
            return NaN;
        },
        /**
         * 选中
         * @private
         */
        _checked: function (index) {
            var labelsIndex = this.labels.eq(index),
                colorsIndex = this.colors[index];
            labelsIndex.addClass(this.type + "-group-checked");
            if (colorsIndex) {
                labelsIndex.css("color", colorsIndex);
            } else {
                labelsIndex.css("color", this.options.color);
            }
        },
        /**
         * 显示
         */
        show: function () {
            this.inner.show();
        },
        /**
         * 隐藏
         */
        hide: function () {
            this.inner.hide();
        },
        /**
         * 设置值
         * @param val
         * @param isInit
         */
        setValue: function (val, isInit) {
            if (this.textmode) {
                return;
            }
            var oldValue = $.extend([], this.value),
                value, len, i;
            this._setValue(val);
            if (!isInit) {
                value = this.value;
                len = value.length;
                if (len === oldValue.length) {
                    //判断是否需要触发change
                    for (i = 0; i < len; i++) {
                        if (oldValue[i] !== value[i]) {
                            this._changeHander();
                            break;
                        }
                    }
                } else {
                    this._changeHander();
                }
            }
        },
        /**
         *
         * @private
         */
        _setValue: function (val) {
            var valType = $.type(val);
            if (valType !== "undefined") {
                if (valType === "array" ) {
                    val = $.extend([], val);
                    this._initValue(val);
                } else if (val !== ""){
                    this._initValue([String(val)]);
                } else {
                    this.value = [""];
                }
            }
            var opts = this.options,
                length = this.size,
                values = this.values,
                value  = this.value,
                valueLen = value.length,
                inputs = this.inputs,
                labels = this.labels,
                type = this.type,
                i, j;
            inputsLoop: for (i = 0; i < length; i ++) {
                for (j = 0; j < valueLen; j++) {
                    if (value[j].toString() === values[i]) {
                        inputs.eq(i).prop("checked", true);
                        this._checked(i);
                        continue inputsLoop;
                    }
                }
                inputs.eq(i).prop("checked", false);
                labels.eq(i).removeClass(type + "-group-checked").css("color", "");
            }
        },
        /**
         * 设置只读
         * @param flag
         * @param value_list
         */
        setReadonly: function (flag, value_list) {
            if (this.textmode) {
                return;
            }
            var type = $.type(value_list),
                readonlyList = this.readonly_list,
                values = this.values,
                length = this.size,
                listLen ,
                i, j, valuesJ;
            if (typeof flag !== "boolean" || type !== "array" && type !== "undefined" ) {
                return ;
            }
            //可选参数未传入
            if (type === "undefined") {
                value_list = values;
            }
            listLen = value_list.length;
            //逐个设置readonly
            for (i = listLen; i--;) {
                for (j = length; j--;) {
                    valuesJ = values[j];
                    if (value_list[i].toString() === valuesJ) {
                        if (flag) {
                            readonlyList[valuesJ] = j;
                        } else {
                            delete readonlyList[valuesJ];
                        }
                        this._setReadonlyAction(j, flag);
                        break;
                    }
                }
            }
        },
        /**
         * 设置只读
         * @private
         */
        _setReadonly: function () {
            var readonlyList = this.readonly_list,
                v;
            for (v in readonlyList) {
                if (readonlyList.hasOwnProperty(v)) {
                    this._setReadonlyAction(readonlyList[v], true);
                }
            }
        },
        /**
         * 设置只读
         * @private
         */
        _setReadonlyAction: function (index, flag) {
            var labels = this.labels,
                inputs = this.inputs,
                type = this.type;
            if (flag) {
                //IE8下使用滤镜字体会模糊，所以使用透明图片来实现这样的效果
                if(comtop.Browser.isIE8){
                    if(labels.eq(index).find(".radio-readonly").length === 0) {
                        labels.eq(index).prepend("<div class='radio-readonly'></div>");
                    }
                }else{
                    labels.eq(index).addClass(type + "-group-readonly");
                }
                inputs.attr("hidefocus", "true");
            } else {
                labels.eq(index).find(".radio-readonly").remove();
                labels.eq(index).removeClass(type + "-group-readonly");
                inputs.removeAttr("hidefocus");
            }
        },
        /**
         * 判断是否只读
         * @param val
         * @returns {boolean}
         */
        isReadonly : function (val) {
            var readonlyList = this.readonly_list, i = 0, v;
            if (typeof val === "undefined") {
                for (v in readonlyList) {
                    if (readonlyList.hasOwnProperty(v)) {
                        i ++;
                    }
                }
                return this.size === i;
            }
            return readonlyList.hasOwnProperty(val);
        },

        /**
         * 验证失败时组件处理方法
         * @param obj
         * @param message
         */
        onInValid: function(obj, message) {
            this.el.addClass( this.type + "-group-error").attr("tip", message);
            //设置tip类型，错误
            this.el.attr('tipType', 'error');
        },

        /**
         * 验证成功时组件处理方法
         */
        onValid: function() {
            var el = this.el,
                tipID = el.find(this.tipPosition).eq(0).attr('tipID'),
                $cuiTip;
            el.removeClass(this.type +  "-group-error");
            if(tipID !== undefined){
                $cuiTip = window.cui.tipList[tipID];
                if (typeof $cuiTip !== 'undefined') {
                    $cuiTip.hide();
                }
            }
            if (this.tip_text) {
                el.attr("tip", this.tip_text);
            } else {
                el.attr("tip", "");
            }
            //设置tip类型，正常
            el.attr('tipType', 'normal');
        }
    });
})(window.comtop);
/**
 * 2013年 8月 9日 By CUI团队-王伟
 * CheckboxGroup组件代码重写
 * 继承于RadioboxGroup组件
 */
(function (C) {
"use strict";
var $ = C.cQuery;

C.UI.CheckboxGroup = C.UI.RadioGroup.extend({
    options : {
        uitype:"CheckboxGroup",
        name : "",
        checkbox_list : [],
        direction : "horizontal",
        value :[],
        color : "#0078ff",  //#4585e5
        textmode: false,
        allselect: "",
        br : [],
        readonly : false,
        border: false
    },
    /**
     * 设置类型
     * @returns {string}
     * @private
     */
    _setType : function () {
        this.type = "checkbox";
        return "checkbox";
    },
    /**
     * 删除值
     * @param val
     * @returns {*}
     * @private
     */
    _deleteVal : function (val) {
        var value = this.value,
            len = value.length,
            i = 0;
        for (; i < len; i++) {
            if (value[i] === val) {
                value.splice(i, 1);
                break;
            }
        }
        return value;
    },
    /**
     * 渲染完成回调
     * @private
     */
    _renderComplete: function () {
        if (!this.options.allselect) {
            return;
        }
        var opts = this.options,
            allId = this.allId = this.guid + "all",
            type = this.type,
            allLabel = this.allLabel = $("<label>");
        allLabel.attr("for", allId);
        allLabel.html(['<input id="', allId, '" type="', type, '" hidefocus="true" />', opts.allselect ].join(""));
        if (opts.br.length || opts.direction === "vertical") {
            this.inner.prepend('<br />');
        }
        this.inner.prepend(allLabel);
        this.allInput = $("#" + allId);
        this._checkAllSelect();
    },
    /**
     * change回调
     * @private
     */
    _changeHander: function () {
        var opts = this.options,
            changeHander = opts.on_change;
        if (opts.allselect) {
            this._checkAllSelect();
        }
        if(opts.designMode){ return; }
        this._triggerHandler('change');
        if (typeof changeHander === "function") {
            changeHander(this.getValue());
        }
    },
    /**
     * 判断是否全选
     * @private
     */
    _checkAllSelect: function () {
        if (this.value.length === this.size) {
            this.allInput.prop("checked", true);
            this.allLabel.css("color", "#f60");
        } else {
            this.allInput.prop("checked", false);
            this.allLabel.css("color", "");
        }
    },
    /**
     * 单击事件绑定
     * @private
     */
    _clickEventBind : function () {
        var self = this, isAll = !!self.options.allselect;
        this.el.off("click").on("click", function (event) {
            var target = $(event.target),
                index, val,
                checked = target.prop("checked"),
                readonlyList = self.readonly_list;
            if (target.prop("tagName") === "INPUT") {
                index = target.attr("index") - 0;
                val = target.val();
                if (typeof readonlyList[val] !== "undefined") {
                    //只读
                    event.preventDefault();
                } else {
                    //非只读
                    if (isAll && self.allId === target.attr("id")) {
                        //全选
                        if (checked) {
                            self.selectAll();
                        } else {
                            self.unSelectAll();
                        }
                    } else {
                        if (checked) {
                            self._checked(index);
                            self.value.push(val);
                            $.unique(self.value);
                        } else {
                            self._deleteVal(val);
                            self.labels.eq(index).removeClass(this.type + "-group-checked").css({"color": "", "fontWeight" : ""});
                        }
                        self._changeHander();
                    }
                }
            }
        });
    },
    /**
     * 获取值，字符串
     * @param split
     * @returns {string}
     */
    getValueString : function (split) {
        var value = this.getValue();
        if (!value) {
            return "";
        }
        return value.join(split || "、");
    },
    /**
     * 获取label，字符串
     * @param split
     * @returns {string}
     */
    getTextString : function (split) {
        var text = this.getText();
        if (!text) {
            return "";
        }
        return this.getText().join(split || "、");
    },
    /**
     * 全选
     */
    selectAll : function () {
        this.setValue(this.values);
    },
    /**
     * 全取消
     */
    unSelectAll : function () {
        this.setValue([]);
    }
});
})(window.comtop);

/**
 * comtop.ui.Tab标签页组件
 *
 */
;(function($, C){
    // 常量定义
    /**
     * Tab
     * @type {}
     */
    C.UI.Tab = C.UI.Base.extend({
        options: {
            uitype: "Tab",
            /**
             父容器无高度时，tab的高度根据tab页的内容自适应
             此高度是tab页整体的高度，tab页内容的高度=tab页整体的高度-tab_height；
             */
            width: 0,
            head_width:"",
            height: 0,
            tab_width:65,
            active_index: 0,
            /**
             * 传进来的tab参数.<br>
             * 格式:
             * {
			 *     "title": "title", 
			 *     "html": "innerHTML", //div; 这里可以传innerHTML字符串,也可以传一个DOM节点|jQuery对象.
			 *     "url": "url", //iframe; html,url二选一
			 *     "closeable": "true|false", 
			 *     "tab_width": "", //注意没有height. 因为每个tab高度一致;
			 *     "on_switch": "" //切换事件
			 * }
             *
             * @type {Array}
             */
            tabs: [],
            fill_height : false,
            reload_on_active: true, //激活时重新加载内容
            closeable: false, //是否可关闭
            trigger_type: "click"
        },
        _className:{
            parentCls:"cui-tab",
            navCls: "cui-tab-nav",
            contentCls: "cui-tab-content",
            titleCls: "cui-tab-title",
            activeTriggerCls: "cui-active",
            hoverTriggerCls: "cui-tab-hover",
            closeTriggerCls: "cui-tab-close"
        },
        /**
         * 当前正激活的tab页
         * @type {Number}
         */
        active_index: 0,

        /**
         * tab页导航条
         * @type {Array} [DOM, DOM, ...]
         */
        navs: [],

        /**
         * tab导航条上的标题
         * @type {Array} [DOM, DOM, ...]
         */
        titles: [],

        /**
         * tab页的内容
         * @type {Array} [DOM, DOM, ...]
         */
        contents: [],

        /**
         * tab页中iframe的url,如果存在iframe的话,不是iframe则保存为false
         * @type {Array}
         */
        urls: [],

        /**
         * 支持的事件列表
         * @type {Array} [string, ...]
         */
        events: ["switch"],

        /**
         * tabs里面on_switch的处理函数，如果有就是函数的赋值，如果没有则保存为false；
         * @type {Array} [string, ...]
         */
        handles: [],

        _initUrl:function(){
            this.urls = $.map(this.options.tabs, function(tab) {
                return tab.url || false;
            });
        },
        _initHandles:function(){
            this.handles = $.map(this.options.tabs, function(tab) {
                return tab.on_switch || false;
            });
        },
        _init: function() {
            var op= this.options;
            op.tab_width=C.Tools.fixedNumber(op.tab_width);
            op.width=C.Tools.fixedNumber(op.width);
            op.height=C.Tools.fixedNumber(op.height);
            this.active_index = this.options.active_index || 0;
            $.each(op.tabs,function(index,tab){
                if(typeof tab.html=="object"){
                    $(tab.html).hide();
                }
                tab.tab_width=C.Tools.fixedNumber(tab.tab_width);
            });
            if(this.options.el.html().replace(/\s+/g,"")!=""){//初始化时el内部有html代码，此时认为使用的是html模板
              this._isHTMLTemplate=true;
            }

        },

        _create: function() {
            var opt=this.options,
                container = opt.el,
                DOT = ".",
                _self = this;
            if(this._isHTMLTemplate){
                this._initStructures();
            }
            this._initUrl();
            this._initHandles();
            //此高度为tab未加载任何外部资源时的高度
            this._navHeight=$(DOT + this._className.parentCls,container).height();
            if(opt.fill_height) {
                var parent=opt.el.parent();
                if(parent.prop("tagName") === 'BODY') {
                    var h = $.client.height(),
                        margin = parseInt(parent.css("marginTop")) + parseInt(parent.css("marginBottom"));
                    opt.height =h- margin;
                    this._resizeHandle();
                }else{
                    opt.height =parent.height();
                }

            }
            this._parseMarkup();
            this._setUpHeight();
            this._initView(true);
            this._bindTriggers();
        },
        _initStructures:function(){
            var tabs= [],
                opt=this.options;
            $.each(opt.el.children(),function(){
                var data=$(this).attr("data-options");
                try{
                   data= $.parseJSON(data);
                }catch(e){
                    data={};
                }
                if(typeof data.closeable=="string"){
                    data.closeable=data.closeable==="true";
                }
                if(typeof data.tab_width=="string"){
                    data.tab_width=parseInt(data.tab_width);
                }
                if(!data.url){
                    data.html=$(this).children();
                }
                tabs.push(data);
            });
            this.options= $.extend({},this.options,{tabs:tabs});
            this.options.el.children().hide();
            this._buildTemplate(this.options.el,"tab",this.options,true);
        },
        _resizeHandle : function () {
            var self = this;
            var opt = this.options;
            self.h = $.client.height();
            function resize () {
                var h = $.client.height(),h0=opt.height;
                if(!h0){
                    h0 =opt.el.height();
                }
                self.resize(h0 + h - self.h);
                self.h = h;
            }
            $(window).on("resize", resize);
        },
        /**
         * 解析DOM,并初始化navs, titles, contents等成员变量
         */
        _parseMarkup: function() {
            var cls=this._className,
                container = this.options.el,
                DOT = ".",
                navsContainer=$(DOT + cls.navCls, container),
                contentsContainer=$(DOT + cls.contentCls, container);
            this.navs = navsContainer.children(); //li
            this.titles = $(DOT + cls.titleCls, container); //span
            this.contents = contentsContainer.children(); //div
        },
        /**
         *  设置高度
         */
        _setUpHeight:function(){
            var opt=this.options,
                contentHeight;
            if (!opt.height) {
                this.contents.each(function(){
                   var node= $(this).get(0);
                     if(node.nodeName==="DIV"||node.nodeName==="IFRAME"){
                         node.style.height="";
                     }
                });
                return;
            }
            contentHeight=opt.height-this._navHeight;
            contentHeight=contentHeight<10?10:contentHeight;
            //设置内容DIV高度
            opt.content_height=contentHeight;

        },
        ////////////////////////////////////////////////
        //
        //   Public
        //
        ////////////////////////////////////////////////
        /**
         * 获取tab页的属性或设置tab页的属性
         *
         * @param {string} 获取tab页的某一个属性
         * @param {} 获取tab页的所有属性
         * @param {json} 设置tab页的属性,return {this}
         */
        attr:function(){
            var args=arguments;
            if(args.length==0){
                return $.extend(true,{},this.options);
            }else if(args.length==1){
                if(typeof args[0]==="string"){
                    var res=this.options[args[0]];
                    if(args[0]=="width"){
                        res=$(this.options.el).width();
                    }
                    if(args[0]=="height"){
                        res=$(this.options.el).height();
                    }
                    return res;

                }else if(typeof args[0]==="object"){
                    var opt = this.options;
                    $.extend(this.options, args[0]);
                    this._setUpHeight();
                    this._initView(false);
                    /*
                     if (args[0].height !== undefined) {
                     opt.el.css("height", opt.height);
                     }
                     if (args[0].width !== undefined) {
                     opt.el.css("width", opt.width)
                     }
                     */
                    return this;
                }
            }
        },
        /**
         * 切换到指定的tab页
         *
         * @param {number} index  切换到的页面
         * @return {this}         当前对象, //chain
         */
        switchTo: function(index) {
            this._switchTo(index);
            return this;
        },

        /**
         * 下一页
         */
        next: function() {
            this.switchTo((this.active_index + 1) % this.navs.length);
            return this;
        },

        /**
         * 上一页
         */
        prev: function() {
            var len = this.navs.length;
            this.switchTo((this.active_index - 1 + len) % len);
            return this;
        },
        onClose:function(fn){
            $(this).bind("close",fn);
            return this;
        },
        /**
         * resize tab页
         *
         * @param  { number} height tab页的高度
         * @param  { number} width (可选)tab页的宽度，不指定默认自动适应父容器的宽度
         */
        resize:function(height,width){
            var obj={};
            if(typeof height=="number"){obj.height=height;}
            if(typeof width=="number"){obj.width=width;}
            $.extend(this.options,obj);
            this._setUpHeight();
            var opt = this.options,
                content = $("." + this._className.contentCls, opt.el),
                Browser = C.Browser;
            if(opt.width) {
                opt.el.width(opt.width);
                var opt_width = typeof opt.width === "number" ? (opt.width - ( Browser.isIE && Browser.isQM ? 0 : 6 ) ) : opt.width;
                content.width(opt_width);
            }
            if(opt.content_height) {
                content.height(opt.content_height + ( Browser.isIE && Browser.isQM ? 10 : 0 ));
            }
        },
        /**
         * 添加一个tab<br>
         * 调用方式:
         * 1. addTab("标题1", "abc.jsp");
         * 2. addTab({"title":"Test","url": "abc.jsp", "width": "300px"});
         * @param {string} title Tab页的标题
         * @param {string} url  Tab页的url
         *
         * @param { object}    Tab页的json配置
         *
         *
         *
         */
        addTab: function() {
            var selfOptions=this.options;
            var opts = {
                    title:"",
                    closeable:selfOptions.closeable,
                    tab_width:selfOptions.tab_width
                }, arg=arguments,
                len = this.navs.length;
            if(arg.length==2){
                opts["title"] = arg[0];
                opts["url"] = arg[1];
            }else if(arg.length==1&&typeof(arg[0])=="object"){
                $.extend(opts, arg[0]);
            }
            selfOptions.tabs[len] = opts;
            this._add(opts);
            this._calculateTabsLen();
            return this;
        },

        /**
         * 移除一个tab
         * @param {number} index   第i个tab页
         */
        removeTab: function(index) {
            if(index < this.navs.length&&this.navs.length>1) {
                if(this.active_index === index) {
                    this.next();
                }
                this.navs.eq(index).remove();
                this.contents.eq(index).remove();
                this.urls.splice(index,1);
                // 移除的tab如果在当前tab左边时,需要-1; 如果是在右边则不需要.
                if(this.active_index > 0 && index < this.active_index) {
                    this.active_index--;
                }

                var tab=this.options.tabs.splice(index, 1);

                // re init memebers: navs, contents, titles
                this._parseMarkup();
                $(this).triggerHandler("close", tab);
                this._calculateTabsLen();
            }
            return this;
        },

        /**
         * 获取当前激活的tab
         * @return {DOM} 当前激活的tab
         */
        getActiveTab: function() {
            return this.getTab(this.active_index);
        },

        /**
         * 获取tab页 或者 tab的相关属性
         *
         * @param  {number} index 第几个tab页
         * @param  {string} name  (可选)要获取的tab的属性名
         * @return {DOM | string} 如果不指定name，则返回tab的DOM元素; 指定了name则返回相应的属性值;
         */
        getTab: function(index, name) {
            if(!name){ return this.navs.get(index);}
            var ret;
            switch(name) {
                case "tab_width":
                    ret = this.navs.eq(index).width();
                    break;
                case "title":
                    ret = this.titles.eq(index).html();
                    break;
                case "html":
                    ret = this.options.tabs[index].html;
                    break;
                case "url":
                    ret = this.options.tabs[index].url;
                    break;
                case "closeable":
                    ret = this.navs.eq(index).hasClass(this._className.closeTriggerCls);
                    break;
            }
            return ret;
        },
        /**
         * 获取tab页内容
         * @param  {number} index 第几个tab页
         * @return {DOM }  返回tab内容的DOM元素;
         */
        getContent:function(index){
            var index=index===undefined?this.active_index:index;
            return this.contents[index];

        },
        /**
         * 设置tab相关属性 <br>
         * 设置单个属性值: setTab(index, prop, value); <br>
         * 设置多个属性值: setTab(index, {prop1: value1, prop2: value2});
         *
         * @param {number} index 第i个tab页
         * @param {string | object} name  要设置的属性名;如果传一个键值对对象则批量设置属性
         * @param {string} value 要设置的属性值;
         */
        setTab: function(index, name, value) {
            if(typeof(name) === "string") {
                this.options.tabs[index][name] = value;
            } else {
                $.extend(this.options.tabs[index], name);
            }
            this._initTabs();
            this._initUrl();
            if(this.active_index==index){
                this._loadFrame(this.active_index, this.active_index);
            }
            return this;
        },
        index: function () {
            return this.active_index;
        },
        ////////////////////////////////////////////////
        //
        //   Private
        //
        ////////////////////////////////////////////////

        /**
         * 绑定触发事件
         * @return {[type]} [description]
         */
        _bindTriggers: function() {
            var self = this;
            // hover样式
            this.navs.hover(function() {
                if( self.navs.index($(this)) !== self.active_index ) {
                    $(this).addClass(self._className.hoverTriggerCls);
                }
            }, function() {
                $(this).removeClass(self._className.hoverTriggerCls);
            });

            // 使用事件委派
            if(this.options.trigger_type == "click") {
                $("." + this._className.navCls, this.options.el).bind("click", $.proxy(this, "_onTrigger"));
            }
            else if(this.options.trigger_type == "mouseover") {
                this.navs.bind("mouseover", $.proxy(this, "_onMouseover"));
            }
            var closeButton="."+this._className.closeTriggerCls;
            $("." + this._className.navCls+" > li", this.options.el).delegate(closeButton,"click",function(e){
                var nav = self._findNav(e.target),
                    idx = self.navs.index(nav);
                self.removeTab(idx);
                return false;
            }) ;
            $(".tabs-scroller-left,.tabs-scroller-right",this.options.el).on("click",function(){
                var left =  $(".cui-tab-head").scrollLeft(),//获取可视宽度
                    elWidth = $(".cui-tab-head", self.options.el).outerWidth(),
                    len = 0;                               
               
                self.navs.each(function (){
                    len += $(this).outerWidth() + 8;       //获取所有Li宽度+8（这里8为margin-right）
                })

                if($(this).is(".tabs-scroller-left")){
                    $(".cui-tab-head").animate({"scrollLeft" : left - 65}, 'fast');
                }else{
                    if(left < (len - elWidth)){
                        if(left + 65 > (len - elWidth)){
                            $(".cui-tab-head").animate({"scrollLeft" : (len - elWidth + 22)}, 'fast');
                        }else{
                            $(".cui-tab-head").animate({"scrollLeft" : left + 65}, 'fast');
                        }

                    }
                }

            });
            $(window).on("resize", function(){
                self._calculateTabsLen();
            });
        },

        /**
         * 加载iframe.
         * iframe不会把所有的url一次性载入,而是只载入active_index一个
         *
         * @param {number} index 		需要加载的tab页
         * @param {number} indexToHide  需要隐藏的tab页,可选
         */
        _loadFrame: function(index, indexToHide) {
            var self = this, opt=this.options,
                isIframe = this.urls.length > 0 && this.urls[index];
            // 如果需要隐藏页,且配置为每次重新加载
            if(indexToHide != undefined && opt.reload_on_active) {
                var hideIframe=this.contents.eq(indexToHide).unbind().removeData("_binded");
                if(this.urls[indexToHide]){
                    hideIframe.attr("src", "about:blank");
                }
            }
            if(isIframe) {
                var $frame = this.contents.eq(index).show();
                // 载入url  url不存在或者每次都重新加载
                if($frame.attr("src")=="about:blank" || opt.reload_on_active) {
                    $frame.attr("src", this.urls[index]);
                    if(!$frame.data("_binded")) { //防止重复注册
                        $frame.bind("load", function() {
                            //防止跨域报错问题
                            try {
                                var doc = $frame.get(0).contentWindow.document,
                                    height = $(doc).height();
                                /* height0 = doc.body.scrollHeight,
                                 height1 = doc.documentElement.scrollHeight,  */
                                if(C.Browser.isIE6){
                                    var cssH=parseInt($frame.css("height").replace("px",""));
                                    if(cssH&&height>cssH){
                                        $(doc).find("head").append('<style type="text/css">html{overflow-y:scroll}</style>');
                                    }
                                }
                                if($(doc).width()>$frame.width()){
                                    height+=17;
                                }
                                if (!opt.height) {//未设置高度
                                    $frame.height(height);
                                }
                            }
                            catch (e) {

                            }

                        }).data("_binded", true);


                    }
                }
            }
        },

        /**
         * 初始化视图
         *
         * @param  {boolean} init 是否是系统初始化;在set()方法中会手动调此方法,此时是false;
         */
        _initView: function(init) {
            // show active index.
            this.contents.css({
                "position": "absolute",
                "left": -999999
            });
            this.contents.eq(this.active_index).css({
                "position": "static",
                "left": 0
            });

            // set style from options.
            var opt = this.options,
                content = $("." + this._className.contentCls, opt.el),
                Browser = C.Browser;
            if(opt.width) {
                opt.el.width(opt.width);
                var opt_width = typeof opt.width === "number" ? (opt.width - ( Browser.isIE && Browser.isQM ? 0 : 6 ) ) : opt.width;
                content.width(opt_width);
            }
            if(opt.content_height) {
                content.height(opt.content_height + ( Browser.isIE && Browser.isQM ? 10 : 0 ));
            }
            if(!init){
                if(opt.tab_width) {
                    this.navs.width(opt.tab_width);
                }

                if(opt.tabs.length > 0) { // 当tabs的参数存在,才初始化各个tab; closeBtn延迟到各个tab中初始化.
                    this._initTabs(init);

                } else { // 当tabs参数不存在,必须初始化全局的closeable;
                    this._initCloseBtns();
                }
            }
            this._initContents();
            this._calculateTabsLen();

        },
        _calculateTabsLen:function(){
            var opt = this.options,
                tabHeard = $(".cui-tab-head", this.options.el),
                totalLen = tabHeard.width(),
                factLen = 0;
            this.navs.each(function (){
                factLen += $(this).outerWidth() + 8;
            })
            if(totalLen > factLen){
                $(".tabs-scroller-left,.tabs-scroller-right", this.options.el).hide();
                tabHeard.css({"margin":"0"});
            }else{
                $(".tabs-scroller-left,.tabs-scroller-right", this.options.el).show();
                tabHeard.css({"margin":""});
            }
            var marginleft = tabHeard.css("marginLeft").replace("px", ""),
                f =  $(".cui-tab", this.options.el).width() - totalLen - parseInt(marginleft);// - $(".tabs-scroller-right",this.options.el).outerWidth();

          
            $(".tabs-scroller-right", this.options.el).css("right", f > 1 ? f : 0);
            $(".cui-tab-head").animate({"scrollLeft" : 0});
            


        },
        /**
         * 初始化各个tab页的属性
         *
         * @param {boolean} init 否是系统初始化;在setTab()方法中会手动调此方法,此时是false;
         */
        _initTabs: function(init) {
            var self = this,
                opt = self.options;
            if(opt.tabs.length > 0) {
                $.each(opt.tabs, function(idx, tab) {
                    if(tab.tab_width) {
                        self.navs.eq(idx).width(tab.tab_width);
                    }
                   // if(tab.closeable !== undefined || opt.closeable !== undefined) {}
                    var closeable = tab.closeable !== undefined ? tab.closeable : opt.closeable;
                    if(closeable) {
                        self._addCloseBtn(idx);
                    } else {
                        self._removeCloseBtn(idx);
                    }

                    if(tab.title) {
                        self.titles.eq(idx).html(tab.title);
                    }


                });

            }
        },

        /**
         * 加载tabs里边的内容.
         *
         */
        _initContents:function(active_index, from){
            var aindex=active_index||this.active_index;
            var tab=this.options.tabs[aindex],
                content=this.contents.eq(aindex);
            if(!tab){
                return;
            }
            if(tab.html){
                if(!tab.__isLoad_){
                    if(typeof(tab.html) === 'string') {
                        content.html(tab.html).show();
                    }
                    else {// 认为是一个DOM节点,整个移进来
                        content.append($(tab.html).show()).show();
                    }
                    tab.__isLoad_=true;
                }
            }else if(tab.url){
                this._loadFrame(aindex,from);
            }
        },

        /**
         * 初始化关闭按钮.
         * 系统第一次加载时,并不执行这里;因为第一次加载对于关闭按钮的初始化放到_initTab(),初始化每个tab时去做.
         * 这里只用于set()方法时更改全局的closeable属性用.
         */
        _initCloseBtns: function() {
            var opt = this.options,
                len = this.navs.length;
           // if(opt.closeable !== undefined) {  }
                for (var i = 0; i < len; i++) {
                    if(opt.closeable === true) {
                        this._addCloseBtn(i);
                    }else{
                        this._removeCloseBtn(i);
                    }
                }

        },

        /**
         * 触发时的事件
         * @param  {Event} e 触发的事件
         */
        _onTrigger: function(e) {
            var nav = this._findNav(e.target);
            if(nav) {
                idx = this.navs.index(nav);
                this._switchTo(idx, e);
                // this.navs.eq(idx).removeClass(this._className.hoverTriggerCls);
            }
        },

        /**
         * 从当前元素往上遍历,找到navCls的一级子元素(即:导航元素)
         * @param  {DOMElement} el 事件触发的元素:target
         * @return {jQuery}    返回找到的后的jQuery对象
         */
        _findNav: function(el) {
            while(!(el == this.options.el || el == document.body)) {
                if($(el).parent().hasClass(this._className.navCls)) {
                    return el;
                }
                el = el.parentNode;
            }
            return null;
        },

        /**
         * 鼠标事件
         * @param  {Event} e 触发的事件
         */
        _onMouseover: function(e) {
            var idx = this.navs.index(e.currentTarget);
            this._switchTo(idx, e);
        },

        /**
         * 判断当前触发是否有效; 防止重复触发
         * @param  {number} index 序号
         * @return {boolean}       是否有效
         */
        _triggerIsValid: function(index) {
            return this.active_index != index&&index<this.navs.length;
        },

        /**
         * 切换到第index页
         * @param  {number}   index    页数
         * @param  {Event}   e        事件对象
         * @param  {Function} callback 回调函数
         * @return {this}            当前对象, //chain
         */
        _switchTo: function(index, e, callback) {
            if(!this._triggerIsValid(index)) {
                return ;
            }

            var from = this.active_index,
                to = index,
                fromTrigger = this.navs.eq(from),
                toTrigger = this.navs.eq(to),
                fromPanel = this.contents.eq(from),
                handle = this.handles[index],
                toPanel = this.contents.eq(to);
            this.active_index = this.options.active_index = to;
            this._switchTrigger(fromTrigger, toTrigger)
                ._switchView(fromPanel, toPanel);

            // this._loadFrame(this.active_index, from);
            this._initContents(this.active_index, from);
            callback && callback.call(this);
            // 触发一个切换事件.
            $(this).triggerHandler("switch", [{"fromTab": from, "toTab": to}]);
            if($.type(handle) === "function"){   //单个事件触发
                handle.call(this,{"fromTab": from, "toTab": to});
            }else if($.type(handle) === "string"){
                window[handle] && window[handle]({"fromTab": from, "toTab": to});
            }
            return this;
        },

        /**
         * 切换触点
         * @param  {jQuery} fromTrigger 切换的开始tab标签
         * @param  {jQuery} toTrigger   切换的结束tab标签
         * @return {this}               当前对象 //chain
         */
        _switchTrigger: function(fromTrigger, toTrigger) {
            fromTrigger.removeClass(this._className.activeTriggerCls);
            toTrigger.addClass(this._className.activeTriggerCls);
            return this;
        },

        /**
         * 切换视图.(默认是最简单的方式,如果实现动画切换,通过插件方式,覆盖此方法)
         *
         * @param  {jQuery}   fromPanel   切换的开始面板
         * @param  {jQuery}   toPanel     切换的结束面板
         * @return {this}               当前对象 //chain
         */
        _switchView: function(fromPanel, toPanel) {
            fromPanel.css({
                "position": "absolute",
                "left": -999999,
                "top": -99999
            });
            toPanel.css({
                "position": "static",
                "left": 0,
                "top": 0
            });
            return this;
        },


        /**
         * 添加一个tab<br>
         *
         * @param {object} options 对应初始化options中tabs参数中单个tab的值.
         *  格式:{
		 *     "title": "title", 
		 *     "html": "innerHTML", //div
		 *     "url": "url", //iframe; html,url二选一
		 *     "closeable": "true|false", 
		 *     "width": "" //注意没有height. 因为每个tab高度一致;
		 *  }
         */
        _add: function(options) {
            var opt = this.options,
                len = this.navs.length;

            // clone tab nav & append to last.
            var closeable = !!options.closeable,
                indexToClone = this._findClone(closeable),
                nav;
            if(indexToClone !== -1) {
                nav = this.navs.eq(indexToClone).clone(true);

            } else { //找不到,随便clone一个
                nav = this.navs.eq(0).clone(true);
                if(closeable) { // add close btn.
                    this._addCloseBtn(len, nav);
                } else { // remove close btn
                    this._removeCloseBtn(nav);
                }
            }
            if(nav.hasClass(this._className.activeTriggerCls)) {
                nav.removeClass(this._className.activeTriggerCls);
            }
           // if(options.tab_width || opt.tab_width){ }
            nav.width(options.tab_width|| opt.tab_width);
            nav.attr("title",options.title||'');

            $("." + this._className.titleCls, nav).html(options.title);
            this.navs.eq(len - 1).after(nav);


            // add content.
            var content,iframeHeight=opt.content_height||this._minHeight;
            if(options.url) {
                content = $('<iframe src="about:blank" frameborder="0" style="width:100%;height:100%"></iframe>');
                this.urls[len] = options.url;
            } else {
                content = $('<div style="width:100%;height:100%;overflow:auto;"></div>');
            }
	    content.hide()
            this.contents.eq(len - 1).after(content);

            // re init memebers: navs, contents, titles
            this._parseMarkup();
        },

        /**
         * 添加关闭按钮
         *
         * @param {number} index 第i个tab页
         * @param {jQuery} nav   [可选]导航条,不传则取index所在nav元素.动态添加tab时,因为待添加的tab不存在,需要传进来
         */
        _addCloseBtn: function(index, nav) {
            if(!nav) {
                nav = this.navs.eq(index);
            }
            nav.addClass("closeable").append(this._generateCloseBtn(index));
        },

        /**
         * 生成一个关闭按钮
         *
         * @param {number} index 第i个tab页
         * @return {String}
         */
        _generateCloseBtn: function(index) {
            // var btn = $("<a href='javascript:;'>").addClass(this._className.closeTriggerCls);
            var btn="<a href='javascript:;' class='"+this._className.closeTriggerCls+"'></a>";
            return btn;
        },

        /**
         * 删除关闭按钮
         *
         * @param  {number|jQuery} index 第i个tab页/或者是一个jQuery的上下文
         */
        _removeCloseBtn: function(index) {
            var context = typeof(index) === 'number' ?
                this.navs.eq(index) :
                index;
            $("." + this._className.closeTriggerCls, context).remove();
        },

        /**
         * 查找合适的克隆对象
         * @param  {boolean} closeable 是否指定需要关闭按钮
         * @return {number}           如果找到,返回相应的index;找不到,返回-1.
         */
        _findClone: function(closeable) {
            return  $.inArray(closeable,this._getCloseBtns());

        },

        /**
         * 返回关闭按钮数组.
         * @return {Array<boolean>} 返回数组,长度为tab页的长度.true/false表示是否含有关闭按钮
         */
        _getCloseBtns: function() {
            var globalCloseable = !!this.options.closeable,
                len = this.navs.length,
                tabs = this.options.tabs,
                tab,
                btns = [];

            for (var i = 0; i < len; i++) {
                tab = tabs[i];
                btns.push( (tab && tab.closeable !== undefined) ? tab.closeable : globalCloseable );
            };

            return btns;
        }


        /*,
        _indexOf : function (arr, elt) {
            var len = arr.length;
            var from = Number(arguments[1]) || 0;
            from = (from < 0)
                ? Math.ceil(from)
                : Math.floor(from);
            if (from < 0){
                from += len;
            }
            for (; from < len; from++) {
                if (from in arr && arr[from] === elt) {
                    return from;
                 }
            }
            return -1;
        }  */

    });


})(window.comtop.cQuery, window.comtop);
;(function($, C) {
    C.UI.Textarea = C.UI.Base.extend({
        options: {
            uitype: 'Textarea',     //组件类型
            name: '',               //组件名
            relation: '',           //剩余可输入字符数显示的元素ID
            position : 'top',       //剩余可输入字符数摆放的位置（上、下）
            value: '',              //默认文本值
            width: '300',         //文本域组件宽度
            height: '57',        //文本域高度
            readonly: false,       //是否是只读
            maxlength: -1,          //最大能输入字符数，-1表示不限制
            byte: true,             //输入字符计算方式，true表示使用字节计算，false表示使用字符计算
            emptytext: '',          //为空时提示的内容
            autoheight: false,      //是否随着输入文本域自动增高
            maxheight: '',          //当文本域自动增高时限制最大增大高度
            textmode: false,        //是否为只读模式
            on_change: null,           //值改变事件
            on_focus: null,            //获得焦点事件
            on_blur: null,             //丢失焦点事件
            on_keyup: null,            //keyup事件
            on_keydown: null           //keydown事件
        },

        tipPosition: '.textarea_textarea',

        _init: function() {
            var opts = this.options;
            opts.width = C.Tools.fixedNumber(opts.width);
            opts.height = C.Tools.fixedNumber(opts.height);
            opts.id = C.guid();
            if (opts.name === '') {
                opts.name = C.guid() + "_" + opts.uitype;
            }
            opts.maxheight = /^(\d)+(px|PX)*$/.test(opts.maxheight) ? opts.maxheight.replace('px','') : '';
        },

        _create: function() {
            var self = this, $textarea,
                opts = self.options;
				
			if(opts.maxheight!==-1){
                opts.relation = opts.relation||"t_count"
            }
            //如果span内包含textarea，则textarea的value采用textarea标签内的字符串
            if(opts.el.children('textarea').length > 0){
                opts.value = opts.el.children('textarea').val();
            }

            opts.el[0].innerHTML = this._createDom();
            $textarea = this.$textarea = $('#' + opts.id);
            //事件绑定
            this._bindEvent();

            this.$box = opts.el.find(".cui_textarea_box");
            this.$empty = opts.el.find(".cui_textarea_empty").eq(0).on("mousedown", function () {
                $textarea.focus();
            });

            //处理剩余可输入字符
            if (opts.relation !== '' && opts.maxlength !== -1) {
                this.$relation = $("#" + opts.relation);
                var reLength = opts.maxlength - self._getStringLength(opts.value) < 0 ?
                    0 : opts.maxlength - self._getStringLength(opts.value);
                this.$relation.text(reLength);
            }
            if(opts.maxlength !== -1){
                this._textCounter();
                //opts.byte || $textarea.attr('maxlength', opts.maxlength);
            }

            if (opts.emptytext !== "" && opts.value === "") {
                this.$empty.html(opts.emptytext);
            }

            if (opts.height === '') {
                opts.height = "51";
            }
            this.setHeight(opts.height);

            if (opts.width === '') {
                opts.width = "300";
            }
            this.setWidth(opts.width);

            //设置只读
            if (opts.readonly) {
                this.setReadOnly(true);
            }


            if(opts.maxlength > -1){
                this.$textarea.on("input propertychange", function(e){
                    self._textCounter();
                    if (self.$relation) {
                        self.$relation.text(self._getRemainLength());
                    }
                });
            }
            this.$textarea.on("keypress",function(e){
                self._keyPressHandler(e);
            });


            if (opts.autoheight) {
                this.$textarea.css({
                    overflow: 'hidden'
                });
                if(C.Browser.isIE9){
                    this.$textarea.on('input change', function() {
                        self._autoHeight();
                    });
                    this.$textarea.on('keydown', function(event) {
                        if(event.keyCode === 46 || event.keyCode === 8){
                            self._autoHeight();
                        }
                    });
                } else{
                    self.$textarea.bind('input', function() {
                        self._autoHeight();
                    });
                    self.$textarea.bind('propertychange', function() {
                        if (window.event.propertyName === "value") {
                            //IE8下，在设置autoheight=true和maxlength时，如果复制粘贴进textarea超过maxlength，则会出现textarea下部有一段空白
                            if(C.Browser.isIE8){
                                setTimeout(function(){
                                    self._autoHeight();
                                },1);
                            }else{
                                self._autoHeight();
                            }
                        }
                    });

                }

                //如果存在值，则执行高度计算
                if(opts.value){
                    self._autoHeight();
                }
            }
        },

        /**
         * 创建DOM
         * @returns {string}
         * @private
         */
       _createDom: function(){
            var self = this,
                opts = self.options,
                isShow = opts.maxlength >0 && opts.relation && !$("#" + opts.relation).length,
                str = isShow ? '<span style="font-size:12px;">您还能输入<em id="'+ 
                    opts.relation +'" style="color:red;"></em>个字符</span>' : '',
                textArea = '<div class="cui_textarea_box"><div class="cui_textarea_empty"></div>'+
                        '<textarea name="' + opts.name + '" id="' + opts.id +
                        '" class="textarea_textarea">' + opts.value +'</textarea></div>';

            str = opts.position === 'top' ?  (str + textArea) : (textArea + str);
             
            return  [
                '<div id="', opts.id, '_wrap" class="textarea_textarea_wrap" style="width: ',
                 opts.width,'px;">', str, '</div>'
            ].join('');
            
        },

        /**
         * 手动绑定事件
         * @private
         */
        _bindEvent: function(){
            var self = this,
                opts = self.options;
            self.$textarea.on('blur', function(e){
                self._blurHandler(e);
            });
            self.$textarea.on('change', function(e){
                self._changeHander(e);
            });
            self.$textarea.on('focus', function(e){
                self._focusHandler(e);
            });
            self.$textarea.on('keyup', function(e){
                self._keyupHandler(e);
            });
            self.$textarea.on('keydown', function(e){
                self._keydownHandler(e);
            });
        },

        /**
         * 设置宽度
         * @param width 宽度
         */
        setWidth: function(width) {
            width = width + "";
            var $wrap = $('.textarea_textarea_wrap', this.options.el);
            if(C.Browser.isIE8){
                //IE8 Textarea scrolling bug
                $wrap.find("textarea").css({
                    width: "100px",
                    "min-width": "100%",
                    "max-width": "100%"
                })
            }
            if (C.Browser.isQM || width.indexOf("%") !== -1) {
                $wrap.css({
                    width: width
                });
            } else {
                $wrap.css({
                    width: parseFloat(width) + "px"
                });
            }
        },

        /**
         * 设置高度
         * @param height
         */
        setHeight: function(height){
            height = height + "";
            if (C.Browser.isQM || height.indexOf("%") != -1) {
                this.$textarea.css({
                    height: height
                });
            } else {
                this.$textarea.css({
                    height: parseFloat(height) - 10 + "px"
                });
            }
        },

        /**
         * 设置值
         * @param value {String | Number} 值
         * @param isInit {Boolean} 是否是清空重置，清空重置不触发change
         */
        setValue: function(value, isInit) {
            var $textarea = this.$textarea,
                opts = this.options;
            value = (value == null || value == undefined) ? '' : value;
            $textarea.val(value);

            //是否显示emptyText
            if (value !== "") {
                this.$empty.html("");
            } else if (opts.emptytext !== "") {
                this.$empty.html(opts.emptytext);
            }
            //可输入字符提示
            if (this.$relation) {
                this.$relation.text(this._getRemainLength());
            }
            if(opts.maxlength !== -1){
                this._textCounter();
            }

            //触发对象change事件
            if(isInit){
                this.onValid();
            }else{
                this._triggerHandler('change');
                this.$textarea.change();
            }
            //在执行setValue接口时，自动修改高度
            var self = this;
            if(opts.autoheight){
                self._autoHeight();
            }
        },

        /**
         * 获取值
         */
        getValue: function() {
            var value = this.$textarea.val();
            var emptyText = this.options.emptytext;
            if ($.trim(value) === emptyText) {
                return '';
            } else {
                return value;
            }
        },

        /**
         * 设置可输入最大字节数
         * @param maxlength
         */
        setMaxLength: function(maxlength) {
            var opts = this.options;
            opts.maxlength = maxlength;
            opts.byte || this.$textarea.attr('maxlength', maxlength);
            this._textCounter();
            //可输入字符提示
            if (this.$relation) {
                this.$relation.text(this._getRemainLength());
            }
        },

        /**
         * 获取上可以输入的字符数
         * @return
         */
        _getRemainLength: function() {
            var reLength = this.options.maxlength - this._getStringLength(this.getValue());
            return reLength < 0 ? 0 : reLength;
        },

        /**
         * 设置只读，保留兼容
         * @param flag 是否只读
         */
        setReadOnly: function(flag) {
            this.setReadonly(flag);
        },
        setReadonly: function(flag){
            var opts = this.options;
            opts.readonly = flag;
            this.$textarea.attr('readonly', flag);
            if (flag) {
                opts.el.addClass('textarea_garybg');
                //this._removeEmptyText(true);
            } else {
                opts.el.removeClass('textarea_garybg');
                //this._removeEmptyText(false);
            }
        },

        /**
         * 输入框获焦
         * @return {*}
         */
        focus: function(){
            var opts = this.options;
            if(!opts.readonly){
                opts.el.find('textarea').focus();
            }
            return this;
        },

        /**
         * 值改变事件
         * @param e
         * @private
         */
        _changeHander: function(e) {
            var opts = this.options;
            if (opts.readonly) return false;
            //是否显示emptyText
            if (this.getValue() !== "") {
                this.$textarea.removeClass('textarea_tipcolor');
            } else if (opts.emptytext !== "") {
                this.$empty.html(opts.emptytext);
            }
            //可输入字符提示
            if (this.$relation) {
                this.$relation.text(this._getRemainLength());
            }
            //触发对象change事件
            this._triggerHandler('change');
            //执行用户回调
            this._customHandler('on_change', e);
        },

        /**
         * 获得焦点事件
         * @param e
         * @private
         */
        _focusHandler: function(e) {
            var opts = this.options;
            if (opts.readonly || opts.designMode) {
                //this.$textarea.blur();
                return false;
            }
            //移除提示
            this._removeEmptyText(true);
            //添加样式
            this.$box.addClass('textarea_textareafocus');
            //去掉错误提示
            this.onValid();
            //执行用户回调
            this._customHandler('on_focus', e);
        },

        /**
         * 失去焦点事件
         * @param e
         * @private
         */
        _blurHandler: function(e) {
            var opts = this.options;
            if (opts.readonly || opts.designMode){
                return false;
            }
            //添加提示
            this._removeEmptyText(false);
            //删除样式
            this.$box.removeClass('textarea_textareafocus');
            this._textCounter();

            //失焦时，如果内容不为空时，触发change
            var value = this.getValue();
            if(value !== '' && value != null){
                this._triggerHandler('change');
            }

            //执行用户回调
            this._customHandler('on_blur', e);
        },

        /**
         * keypress事件
         * @param e
         * @private
         */
        _keyPressHandler: function(e) {
            var opts = this.options;
            if (opts.readonly) {
                return false;
            }
            this._customHandler('on_keypress', e);
        },

        /**
         * keyup事件
         * @param e
         * @private
         */
        _keyupHandler: function(e) {
            var opts = this.options;
            if (opts.readonly) {
                return false;
            }
            //限制最大输入字节数
            //this._textCounter();
            //执行用户回调
            this._customHandler('on_keyup', e);
        },

        _keydownHandler: function(e) {
            var opts = this.options;
            if (opts.readonly) {
                return false;
            }
            //限制最大输入字节数
           // this._textCounter();
            //执行用户回调
            this._customHandler('on_keydown', e);
        },

        /**
         * 用户事件
         * @param type 事件类型
         * @param e
         * @private
         */
        _customHandler: function(type, e) {
            var opts = this.options;
            var handler = opts[type];
            if(opts.designMode){ return; }
            if ($.type(handler) === 'string') {
                typeof window[handler] === 'function' && window[handler].call(this, e, this);
            } else {
                typeof handler === 'function' && handler.call(this, e, this);
            }
        },

        /**
         * 显示或者隐藏emptyText
         * @param isHide true/false是否显示
         * @private
         */
        _removeEmptyText: function(isHide) {
            var emptyText = this.options.emptytext;
            var areaValue = this.getValue();
            if (emptyText === '' || areaValue.length !== 0) {
                return;
            }
            if (isHide) {
                this.$empty.html("");
            } else {
                this.$empty.html(this.options.emptytext);
            }
        },

        /**
         * 限制输入长度
         * @return {Boolean}
         * @private
         */
        _textCounter: function() {
            var opts = this.options;
            if (opts.maxlength > -1) {
                var currentLen = this._getStringLength(this.getValue());
                if (currentLen > opts.maxlength) {
                    //this.setValue(this._interceptString(this.getValue(), opts.maxlength));
                    this.$textarea.val(this._interceptString(this.getValue(), opts.maxlength));
                    if (this.autoheight) {
                        this._autoHeight();
                    }    
                }
            }
            return false;
        },
        /**
         * 计算字符串长度
         * @param value
         * @returns {Number|*}
         * @private
         */
        _getStringLength: function(value){
            var opts = this.options;
            return opts.byte ? C.String.getBytesLength(value) : ( value.match(/\n/gi) ? 
				value.length + value.match(/\n/gi).length : value.length);
        },
        /**
         * 截取字符串
         * @param value
         * @param length
         * @returns {*}
         * @private
         */
        _interceptString: function(value, length){
            var opts = this.options;
            return opts.byte ? C.String.intercept(value, length) : C.String.interceptString(value, length);
        },

        /**
         * 自动高度
         * @private
         */
        _autoHeight: function() {
             var  self = this,
                  $textarea = self.$textarea;
            if(C.Browser.notIE){
                if (!$textarea.data('origin-height')) {
                    $textarea.data('origin-height', $textarea.outerHeight());
                }
                $textarea.height($textarea.data('origin-height'));
            }
            var opts = self.options,
                overflow ='hidden',
                scrollHeight = $textarea.get(0).scrollHeight;

            if(C.Browser.isIE && $textarea.get(0).scrollHeight !== scrollHeight){ //  IE 前后取得的scrollHeight不一致。
                 scrollHeight = $textarea.get(0).scrollHeight;
            }
            scrollHeight = scrollHeight < opts.height - 10 ? opts.height - 10 : scrollHeight;
            if(opts.maxheight){
                if(scrollHeight > opts.maxheight - 10){
                    scrollHeight = opts.maxheight - 10;
                    overflow = 'auto';
                }
            }
            $textarea.css({"height":scrollHeight,"overflow":overflow});


        },

        /**
         * 验证失败时组件处理方法
         * @param obj
         * @param message
         */
        onInValid: function(obj, message) {
            var self = this,
                opts = self.options;
            self.$box.addClass("textarea_invalid");
            if (opts.tipTxt == null) {
                opts.tipTxt = opts.el.attr("tip") || "";
            }
            opts.el.attr("tip", message);
            //设置tip类型，错误
            $(self.tipPosition, opts.el).attr('tipType', 'error');
        },

        /**
         * 验证成功时组件处理方法
         * @param obj
         */
        onValid: function(obj) {
            var self = this,
                opts = self.options,
                tipID = $(self.tipPosition, opts.el).attr('tipID');
            self.$box.removeClass("textarea_invalid");
            if (opts.tipTxt == null) {
                opts.tipTxt = opts.el.attr("tip") || "";
            }
            if(tipID !== undefined){
                //隐藏提示
                var $cuiTip = cui.tipList[tipID];
                typeof $cuiTip !== 'undefined' && $cuiTip.hide();
            }
            opts.el.attr("tip", opts.tipTxt);
            //设置tip类型，正常
            $(self.tipPosition, opts.el).attr('tipType', 'normal');
        }
    });
})(window.comtop.cQuery, window.comtop);

/**
 * comtop.ui.Tree 树组件
 */
;(function($, C){

    /**
     * Tree
     * @type {[type]}
     */
    comtop.UI.Tree = comtop.UI.Base.extend({

        options: {
            uitype: "Tree",
            children: null, 		// 树的节点数据
            checkbox: false, 	//
            select_mode: 1, 		// 1:单选; 2:多选; 3:多选并级联;
            persist: false, 	// 使用cookie存储状态
            icon: "", 		// fasle不使用图标, url为自定义图标. 默认无图标.要自定义须传url.
            checkbox_style:"",
            on_dbl_click:null,
            on_expand: null, 	// 展开/收缩时回调			function(flag, node) {}
            on_select: null, 	// 选中/取消选中回调		function(flag, node) {}
            on_click: null, 	// 点击时回调				function(node, event) {}
            on_activate: null, 	// 节点激活时的回调函数;	function(node) {}
            on_focus: null, 	// 获取焦点时回调			function(node) {}
            on_blur: null, 	// 失焦时回调				function(node) {}
            on_lazy_read:null,      // lazy load时回调 	function(node) {}
            auto_focus: false, // Set focus to first child, when expanding or lazy-loading.
            keyboard: false,
            click_folder_mode:3,
            min_expand_level:1,
			default_expand_level:1,//默认展开 一 级节点
            theme:"cui",//树的样式风格,可选classic,cui;默认是cui 样式
            on_post_init:null ,//Callback(isReloading, isError) when tree was (re)loaded. 
            reactive:true//已激活的节点是否需要触发onActivate事件，默认true
        },

        dtree: null,

        _init: function(cusOpts) {
            var self = this;
            var opt = this.options;
            // 图标

            if(opt.icon!=="false"&&opt.icon!==""&&opt.theme==="cui") {
                setIcon(opt.children, opt.icon);
            }else if(opt.theme==="classic"){
                setIcon(opt.children, null);
            }

            if(typeof opt.checkbox_style==="string"&&opt.checkbox_style!==""){
                opt.classNames= {checkbox: "dynatree-radio"};
            }
            if(typeof opt.children === "function"){
                opt.initDataFn = opt.children;
                opt.children = [];
            }
            $.each(this.options,function(item,value){
                var pos=item.indexOf("_");
                if(pos&&pos!==-1){
                    var _item="";
                    // 处理形如 on_lazy_read 转换成 onLazyRead
                    $.each(item.split("_"),function(i){
                        if(i===0){
                            _item+=this;
                        }else{
                            _item+= this.charAt(0).toUpperCase()+this.substring(1);
                        }
                    });
                    var handler=value;
                    if(typeof handler ==="function"){
                        self._proxyEvent(handler,opt,_item);
                        /*
                         // 事件委托
                         opt[_item]=function(){
                         var proxyThis=this;
                         // "activate", "focus", "blur","lazy"
                         if(arguments.length === 1) {
                         handler.call(null, self._wrapNode(arguments[0]));
                         }

                         // "expand", "select", "click"
                         else if(arguments.length === 2) {

                         // "expand", "select"
                         if(typeof arguments[0] === "boolean") {
                         if(typeof arguments[1] === "boolean"){
                         handler.apply(proxyThis,arguments);
                         }else{
                         handler.call(null, arguments[0], self._wrapNode(arguments[1]));
                         }

                         } else {  // "click"
                         // alert(arguments[0].getEventTargetType(arguments[1]));
                         if(_item=="onClick"){
                         var el=arguments[1].target||arguments[1].srcElement;
                         if(el.nodeName.toLowerCase()=="span"&&el.className=="dynatree-expander"){return;}
                         }
                         handler.call(null, self._wrapNode(arguments[0]), arguments[1]);
                         }
                         }

                         };*/
                    }else{
                        opt[_item]=value;
                    }
                }
            });

        },
        _proxyEvent:function(handler,opt,item){
            var self=this;
            opt[item]=function(){
                var proxyThis=this;
                // "activate", "focus", "blur","lazy"
                if(arguments.length === 1) {
                    handler.call(null, self._wrapNode(arguments[0]));
                }

                // "expand", "select", "click"
                else if(arguments.length === 2) {

                    // "expand", "select"
                    if(typeof arguments[0] === "boolean") {
                        if(typeof arguments[1] === "boolean"){
                            handler.apply(proxyThis,arguments);
                        }else{
                            handler.call(null, arguments[0], self._wrapNode(arguments[1]));
                        }

                    } else {  // "click"
                        // alert(arguments[0].getEventTargetType(arguments[1]));
                        if(item==="onClick"){
                            var el=arguments[1].target||arguments[1].srcElement;
                            if(el.nodeName.toLowerCase()==="span"&&el.className==="dynatree-expander"){return;}
                        }
                        handler.call(null, self._wrapNode(arguments[0]), arguments[1]);
                    }
                }

            };
        },
        _create: function() {
            var opt = this.options;
            if($.isArray(opt.children)){
                if(opt.children.length){
                    opt.children[0]._firstNode=true;
                }
            }else if(opt.children&&typeof opt.children==="object"){
                opt.children._firstNode=true;
                opt.children=[opt.children];
            }else{  //处理其它乱写的情况，渲染成空树
                opt.children=[];
            }
            this.dtree = $(this.options.el).dynatree(this.options).dynatree("getTree");
            opt.el.addClass("tree_"+opt.theme);
            if(opt.initDataFn){
                opt.initDataFn(this, opt);
            }
        },

        ////////////////////////////////////////////////
        //
        //   Public
        //
        ////////////////////////////////////////////////

        /**
         * 获取当前激活节点
         * @return {TreeNode} 树节点对象
         */
        getActiveNode: function() {
            return this._wrapNode(this.dtree.getActiveNode());
        },

        /**
         * 获取指定节点
         * @param  {string} key 树节点的key值
         * @return {TreeNode}     树节点对象
         */
        getNode: function(key) {
            return this._wrapNode(this.dtree.getNodeByKey(key));
        },

        /**
         * 选中指定节点
         * @param  {string} key  树节点的key值
         * @param  {boolean} flag true/false
         * @return {TreeNode}      树节点对象
         */
        selectNode: function(key, flag) {
            return this.getNode(key).select(flag);
        },

        /**
         * 使树可用
         * @return {[type]} [description]
         */
        enable: function() {
            this.dtree.enable();
            return this;
        },

        /**
         * 使树不可用
         * @return {[type]} [description]
         */
        disable: function() {
            this.dtree.disable();
            return this;
        },

        /**
         * 设置tree的数据源
         * @param data {Object} JSON数据
         * @return {*}
         */
        setDatasource: function(data){
            if("object" !== typeof data || data===null){return;}
            if($.isArray(data)){
                if(data.length){
                    data[0]._firstNode=true;
                }
            }else{
                data._firstNode=true;
                data=[data];
            }
            this.options.children = data;
            this.getRoot().removeChildren().addChild(data);
            return this;
        },
        /**
         * 获取树的数据
         * @return [{*}]
         */
        getDatasource:function(){
            var data=this.dtree.toDict();
            return data.children;
        },
        getDataSource:function(){
            return this.getDatasource();
        },
        /**
         * 获取选中的节点
         * @param  {boolean} stopOnParents [description]
         * @return {[type]}               [description]
         */
        getSelectedNodes: function(stopOnParents) {
            var self = this,
                nodes = this.dtree.getSelectedNodes(stopOnParents);
            return $.map(nodes, function(node, index) {
                return self._wrapNode(node);
            });
        },
        /**
         * 获取不可见的顶层根节点.所有第一级的节点是此根节点的子节点。
         * @return {[type]} [description]
         */
        getRoot: function() {
            return this._wrapNode(this.dtree.getRoot());
        },
        bind:function(type,fn){
            if(typeof type!="string"||typeof fn !="function"){
                return;
            }
            var type= "on"+type.charAt(0).toUpperCase()+type.substring(1),
                eventType=	this.dtree.options[type];
            if(typeof eventType==="undefined"){return;}
            this._proxyEvent(fn, this.dtree.options, type);

        },
        unbind:function(type){
            if(typeof type=="string"){
                var type= "on"+type.charAt(0).toUpperCase()+type.substring(1);
                var eventType=	this.dtree.options[type];
                if(typeof eventType==="undefined"){return;}
                this.dtree.options[type]=null;
            }else{
                $.extend(this.dtree.options,{
                    onClick: null,  onDblClick: null,
                    onKeydown: null,
                    onKeypress: null,
                    onFocus: null,
                    onBlur: null,
                    onQueryActivate: null,
                    onQuerySelect: null,
                    onQueryExpand: null,
                    onPostInit: null,
                    onActivate: null,
                    onDeactivate: null,
                    onSelect: null,
                    onExpand: null,
                    onCustomRender: null,
                    onCreate: null,
                    onRender: null
                });
            }

        },

        ////////////////////////////////////////////////
        //
        //   Private
        //
        ////////////////////////////////////////////////

        /**
         * wrap Node
         * @param  {[type]} node [description]
         * @return {[type]}      [description]
         */
        _wrapNode: function(node) {
            if(!node){return null;}
            return new Node(node);
        }
    });

    /**
     * Tree Node　树节点对象
     * @param {[type]} node [description]
     */
    /*	var DTNodeStatus_Error = -1;
     var DTNodeStatus_Loading = 1;
     var DTNodeStatus_Ok = 0;*/

    var Node = function(node) {

        this.dNode = node;

    };

    Node.prototype = {
        error:-1,
        loading:1,
        ok:0,
        //Activate this node - according to flag - and fire a onActivate event.
        //@param {boolean}  reActive  已激活的节点是否需要触发onActivate事件，默认true
        activate:function(reActive){
            if(typeof reActive=="undefined"){
                reActive=true;
            }
            this.dNode.activate(reActive);
        },
        deactivate:function(){
            this.dNode.deactivate();
        },
        /**
         * 获取node数据
         * @param  {string|}
         * @return {[type]}  string | object
         */
        getData:function(name){
            if(typeof name =="string"){
                return this.dNode.data[name];
            }
            return this.dNode.data;
        },
        /*
         appendAjax:function(){
         this.dNode.appendAjax.apply(this.dNode,arguments);
         },
         */
        /**
         * 展开
         * @param  {boolean} flag 展开/收缩
         * @return {[type]}      [description]
         */
        expand: function(flag) {
            this.dNode.expand(flag);
            return this;
        },

        /**
         * 删除节点
         */
        remove: function() {
            this.dNode.remove();
        },

        removeChildren: function(){
            this.dNode.removeChildren();
            return this;
        },

        /**
         * 选中某节点
         * @param  {boolean} flag 选中/不选中
         * @return {Node}    当前对象
         */
        select: function(flag) {
            this.dNode.select(flag);
            return this;
        },

        /**
         * 切换选中状态
         * @return {[type]} [description]
         */
        toggleSelect: function() {
            this.dNode.toggleSelect();
            return this;
        },

        /**
         * 添加节点
         * @param {object} data json数据
         * @param {Node} beforeNode [可选]如果指定此节点,则插入到此节点前面.
         */
        addChild: function(data, beforeNode) {
            var node = this.dNode.addChild(data, beforeNode && beforeNode.dNode);
            return this._wrapNode(node);
        },

        /**
         * 设置节点标题
         * @param {string} title 新标题
         */
        setTitle: function(title) {
            return this.dNode.setTitle(title);
        },

        /**
         * 设置节点样式
         * @param {string} str 节点样式
         */
        setStyle:function(str){
            $(this.dNode.span).find("a").attr("style",str);

            this.dNode.data._customStyle=str;

            return this;

        },
        removeStyle:function(){
            $(this.dNode.span).find("a").removeAttr("style");
            this.dNode.data._customStyle=null;
            return this;

        },

        /**
         * 前一个
         * @return {Node} [description]
         */
        prev: function() {
            var node = this.dNode.getPrevSibling();
            return node && this._wrapNode(node);
        },

        /**
         * 后一个节点
         * @return {Node} [description]
         */
        next: function() {
            var node = this.dNode.getNextSibling();
            return node && this._wrapNode(node);
        },

        /**
         * 第一个孩子
         * @return {[type]} [description]
         */
        firstChild: function() {
            var nodes = this.children();
            if(nodes==null||nodes==undefined){
                return nodes;
            }
            return nodes.length > 0 ? nodes[0] : null;
        },

        /**
         * 最后一个小孩
         * @return {[type]} [description]
         */
        lastChild: function() {
            var nodes = this.children();
            if(nodes==null||nodes==undefined){
                return nodes;
            }
            return nodes.length > 0 ? nodes[nodes.length - 1] : null;
        },

        /**
         * 获取所有子节点
         * @return {Array<Node>} [description]
         */
        children: function() {
            var self = this,
                nodes = this.dNode.getChildren();
            if(nodes==null||nodes==undefined){
                return nodes;
            }

            return $.map(nodes, function(node, idx) {
                return self._wrapNode(node);
            });
        },

        /**
         * 获取父节点
         * @return {[type]} [description]
         */
        parent: function() {
            var node = this.dNode.getParent();
            return node && this._wrapNode(node);
        },

        /**
         * 设置节点属性
         * 1. set(name, value);
         * 2. set(obj); obj为键值对象
         * @return {Node} 当前节点对象
         */
        setData: function(data) {
            if(arguments.length === 1) {
                for(var prop in data) {
                    this.dNode.data[prop] = data[prop];
                }
            } else {
                var name = arguments[0],
                    val = arguments[1];
                this.dNode.data[name] = val;
            }
            this.dNode.render();
            return this;
        },

        /**
         * 展开此节点的相关父节点，以使该节点可见，并滚动到此节点
         * @return {[type]} [description]
         */
        focus: function() {
            this.dNode.focus();
            return this;
        },

        /**
         * 是否存在子节点
         * @return {Boolean} [description]
         */
        hasChild: function() {
            return this.dNode.hasChildren();
        },

        /**
         * 是否otherNode的直接子节点
         * @return {Boolean} [description]
         */
        isChildOf: function(otherNode) {
            return this.dNode.isChildOf(otherNode.dNode);
        },

        /**
         * 是否otherNode的后代节点
         * @param  {Node}  otherNode [description]
         * @return {Boolean}           [description]
         */
        isDescendantOf: function(otherNode) {
            return this.dNode.isDescendantOf(otherNode.dNode);
        },

        setLazyNodeStatus:function(){

            this.dNode.setLazyNodeStatus.apply(this.dNode,arguments);

        },
        getEventTargetType:function(e){
            return this.dNode.getEventTargetType(e);
        },
        /**
         * Move this node to targetNode. Possible mode:
         child: append this node as last child of targetNode. This is the default.
         before: add this node as sibling before targetNode.
         after: add this node as sibling after targetNode.
         * */
        move:function(targetNode, mode){
            if(!targetNode.dNode){return;}
            this.dNode.move(targetNode.dNode, mode);
        },
        disable:function(){
            this.dNode.disable();
            return this;
        },
        enable:function(){
            this.dNode.enable();
            return this;
        },
        ////////////////////////////////////////////////
        //
        //   Private
        //
        ////////////////////////////////////////////////

        /**
         * Wrap Node
         * @param  {Node} node [description]
         * @return {[type]}      [description]
         */
        _wrapNode: function(node) {
            if(!node){return null;}
            return new Node(node);
        }

    };

    /**
     * comtop.UI.Tree.Node  树节点对象.
     * @type {[type]}
     */
    comtop.UI.Tree.Node = Node;


    ////////////////////////////////////////////////
    //
    //   Tools 一些工具方法
    //
    ////////////////////////////////////////////////

    /**
     * 首字母大写q
     * @param  {string} word 单词
     * @return {string}      转换后的单词
     */
    function upper(word) {
        return word.replace(/(^|\s+)\w/g, function(letter) {
            return letter.toUpperCase();
        });
    }

    /**
     * 递归设置图标
     * @param {Array<object>} children [description]
     * @param {string} icon     图片的url
     */
    function setIcon(children, icon) {
        if(children.length > 0) {
            $.each(children, function(index, node) {
                if(node.icon===undefined) {
                    node["icon"] = icon;
                }
                if(node.children) {
                    setIcon(node.children, icon);
                }
            });
        }
    }

})(window.comtop.cQuery, window.comtop);


/**
 * 新grid
 * @author 王伟
 * @since 2013-6-31
 */
(function (C) {
    'use strict';
    var $ = C.cQuery,
        fiexNumber = C.Tools.fixedNumber || function (a) {return a;};
    var replaceScript =function(s){
       if(typeof s==="string"){
           var s0= s.replace("<script","&#60;script").replace("</script","&#60;&#47;script");
           return s0.replace("<!--","&#60;&#33;--").replace("-->","--&#62;");
       }
       return s;
    };

    C.UI.Grid = C.UI.Base.extend({
        options: {
            uitype                : "Grid",
            gridwidth             : "600px",
            gridheight            : "500px",
            tablewidth            : "",
            primarykey            : "ID",
            ellipsis              : true,
            titleellipsis         : true,
            adaptive              : true,
            titlelock             : true, //空配置项，修改为一直是锁定的
            oddevenrow            : false,
            selectrows            : "multi",
            fixcolumnnumber       : 0,
            config                : null,
            datasource            : null,
            titlerender           : null,
            colhidden             : true,
            colmaxheight          : "0", //隐藏列下拉框高度
            colmove               : false,
            loadtip               : true,
            resizeheight          : null,
            resizewidth           : null,
            rowstylerender        : null,
            colstylerender        : null,
            colrender             : null,
            lazy                  : true,
            sortstyle             : 1,
            sortname              : [],
            sorttype              : [],
            pageno                : 1,
            pagesize              : 50,
            pagesize_list         : [25, 50, 100],
            custom_pagesize       : false,
            pagination            : true,
            pagination_model      : 'pagination_min_1',
            adddata_callback      : null,
            removedata_callback   : null,
            rowclick_callback     : null,
            loadcomplate_callback : null,//未确定
            selectall_callback    : null,
            rowdblclick_callback  : null,
            afterdrag_callback    : null,//接口预留，功能已经完善param[拖动者对象，被拖动地方对象，拖动了几行(负数则往上托动)]
            onstatuschange        : null
        },
        //格式化 money, date
        formatFn: {
            "date": C.Date.simpleformat,
            "money": C.Number.money
        },
        //列渲染
        renderMethod: {
            "a": function (rowData, options, value) {
                var html = ["<a"],
                    params = options.params,
                    search = "";
                if (params) {
                    params = params.split(";");
                    var arr = [];
                    for (var i = params.length; i--;) {
                        var paramsI = params[i];
                        if (rowData.hasOwnProperty(paramsI)) {
                            arr.push([paramsI, "=", rowData[paramsI]].join(""));
                        }
                    }
                    search = "?" + arr.join("&");
                }
                html.push(
                    " href='", (options.url || "") + search,
                    "' class='", options.className || "",
                    "' target='", options.targets || "_self",
                    "' clickid='", options.click,
                    "'>",
                    value,
                    "</a>"
                );
                return html.join("");
            },
            "image": function (rowData, options, value) {
                var html = ["<img"];
                html.push(" class='", options.className || "");
                var url      = options.url,
                    compare  = options.compare,
                    relation = options.relation,
                    title    = options.title,
                    t        = value;
                if (typeof relation === "string") {
                    if (/\./.test(relation)) {
                        var arrRelation = relation.split(".");
                        t = rowData[arrRelation[0]][arrRelation[1]];
                    } else {
                        t = rowData[relation];
                    }
                }
                if (title && title[t]) {
                    title = title[t];
                } else {
                    title = value;
                }
                if (compare) {
                    url = compare[t] || url;
                }
                html.push(
                    "' src='", url,
                    "' title='", title,
                    "' clickid='", options.click,
                    "' />"
                );
                return html.join("");
            },
            "button": function (rowData, options, value) {
                var html = ["<button class='"];
                html.push(
                    options.className || "",
                    "' clickid='", options.click,
                    "'>",
                    options.value || value,
                    "</button>"
                );
                return html.join("");
            }
        },
        /**
         * 初始化参数和属性
         */
        _init: function () {
            var opts = this.options,
                config = opts.config,
                onstatuschange = opts.onstatuschange,
                datasource = opts.datasource,
                sortstyle        = opts.sortstyle;
            //检查sort属性,纠正传入错误的sort属性.
            opts.sortname.length = Math.min(opts.sortname.length, sortstyle);
            opts.sorttype.length = Math.min(opts.sorttype.length, sortstyle);
            //取数据函数
            if (typeof config === "string" && typeof window[config] === "function") {
                opts.config = window[config];
            }
            if (typeof onstatuschange === "string" && typeof window[onstatuschange] === "function") {
                opts.onstatuschange = window[onstatuschange];
            }
            if (typeof datasource === "string" && typeof window[datasource] === "function") {
                opts.datasource = window[datasource];
            }
            //设置初始属性

            this.el                = opts.el;
            this.elCache          = null; //dom存到内存，因为IE的table只读
            this.gridContainer    = null;
            this.gridBox           = null;
            this.gridStyle        = null;
            this.gridHead         = null;
            this.gridHeadTable   = null;
            this.gridTableHide   = null;
            this.gridBody         = null;
            this.gridTableBox    = null;
            this.gridTbody        = null;
            this.gridScroll       = null;
            this.gridLine         = null;
            this.gridEmpty        = null;
            this.gridTfoot        = null;
            this.loading           = null;
            this.gridOverlay      = null;
            this.gridAllCheck    = null;
            this.createDomBox    = document.createElement("div");
            //基础集合
            this.domTh            = [];
            this.domTr            = [];
            this.domTd            = [];
            this.domFixed         = [];
            this.domHeadCol      = [];
            this.domBodyCol      = [];
            this.theadMap         = [];
            this.extendTh         = [];
            this.trFrag           = document.createElement("tbody");
            //数据
            this.data              = [];
            this.backupQuery      = null;
            this.query             = null;
            this.customQuery      = null;
            //个数
            this.rowSize          = 0;
            this.colSize          = 0;
            //属性
            this.sortType         = {};
            this.theadText        = [];
            this.renderStyle      = [];
            this.colRender        = [];
            this.bindName         = []; // -1 单选多选; 0,1 序号; "" 没有绑定; "string" 绑定了
            this.bindDotName      = [];
            this.numCol           = NaN;
            this.colWidth         = [];
            this.initColWidth    = [];
            this.colWidthBackup  = [];
            this.multiChecked     = [];
            this.multiCheckedNum = 0;
            this.singleChecked    = NaN;
            this.disabledIndex = [];

            this.fixedFnClick    = [];
            this.colHidden        = [];
            this.disabled = [];
            this.totalSize        = 0;
            this.guid              = "grid-" + C.guid();
            this.heightLight      = [];
            this.colIndex         = [];
            //样式
            this.gridWidth        = 0;
            this.gridHeight       = 0;
            this.tableWidth       = 0;
            this.theadHeight      = 30;
            this.boxHeight        = 0;
            this.paginationHeight = opts.pagination ? 41 : 0;
            //html片段
            this.selectrowsClass   = "";
            this.tdsPackage       = [];
            //渲染行数相关
            this.endRow           = 0;
            this.trStart          = 0;
            this.trEnd            = 0;
            //判断标识
            this.renderComplete   = false;
            this.odd               = false;
            this.unRender         = true;
            this.autoHeight       = false;
            this.isIttab          = false;
            this.arrIndex         = Array.prototype.indexOf;
            this.isQm             = C.Browser.isQM;
            this.persistence       = typeof onstatuschange === "function" && typeof config === "function";
            this.oddEvenClass          = "cardinal_row";
            this.selectedRowClass      = "selected_row";
            //判断是否动态写入style标签
            try {
                var head = $("head");
                head.append('<style type="text/css"></style>');
                head.find("style").last()[0].innerHTML = "";//如果style只读这行报错
                this.writeStyle = true;
            } catch (e) {
                this.writeStyle = false;
            }

            this._createHeadDom();
            //备份query
            this._backupQuery();
            //初始化pagesize
            this._setPageSize();
            //生成排序对象
            this._setSortTypeObj();
            //获取表头dom
            this.__getDomTh();
            //初始化整体宽度
            this.__initWidthAndHeight();

            //初始化operation
            this._initOperation();

        },
        _createHeadDom: function() {
            var self = this,
                opt = this.options,
                header = "<thead><tr>",
                mheader = "<thead>",
                isM = false;

            if (opt.columns) {
                $.each(opt.columns, function(i, item) {
                    if ($.isArray(item)) {
                        isM = true;
                        mheader += "<tr>"
                        $.each(item, function(j, obj) {
                            mheader += self._createHeadTr(obj);
                        });
                        mheader += "</tr>"
                    } else {
                        if (i === 0 && opt.selectrows != "no") {
                            header += "<th width='40px'></th>";
                        };
                        header += self._createHeadTr(item);
                    }
                });
                mheader += "<thead>";
                header += "</tr><thead>";
                this.el.append(isM ? mheader : header);
            }
        },

        _createHeadTr:function(item){
            var th ="<th ",html = item.name;
            if(item.type && item.type=="checkbox"){
                html = '<input type="checkbox" />';
            }
            $.each(item,function(key,value){
                if(key=="type" || key=="name"){
                    return true;
                }
                th += [key,'="',value,'"'].join("");
                th +=" ";
            })
            th +=">"+html+"</th>";
            return th;
        },
        _initOperation:function(){
            var self = this,opts = this.options;
            if(opts.operation){
                if(opts.operation.search){
                    var btn = opts.operation.search.btn;
                    if(btn){
                        if(cui(btn).isCUI){
                            cui(btn).bind("click","",function(ev){
                                self.loadData();
                            })
                        }
                    }
                }
            }
        },
        /**
         * 备份查询条件
         * @private
         */
        _backupQuery: function () {
            var opts = this.options,
                query = {
                    pageSize : opts.pagesize,
                    pageNo   : opts.pageno,
                    custom_pagesize: opts.custom_pagesize,
                    sortName : $.extend([], opts.sortname),
                    sortType : $.extend([], opts.sorttype)
                };
            this.backupQuery = $.extend(true, {}, query);
            this.query = query;
        },
        /**
         * 设置pagesize
         * @private
         */
        _setPageSize: function () {
            var opts          = this.options,
                query         = this.query,
                pagesizeList = opts.pagesize_list,
                pageSize     = query.pageSize;
            for (var i = pagesizeList.length; i--;) {
                if (pageSize === pagesizeList[i]) {
                    return;
                }
            }
            query.pageSize = pagesizeList[1];
        },
        /**
         * 设置排序属性到sorttype对象
         * @private
         */
        _setSortTypeObj: function () {
            var query     = this.query,
                sortname  = query.sortName,
                sorttype  = query.sortType,
                len       = sortname.length,
                sortType = this.sortType = {};
            for (var i = 0; i < len; i += 1) {
                var sorttypeI = sorttype[i].toUpperCase();
                sorttype[i] = sorttypeI;
                sortType[sortname[i]] = sorttypeI;
            }
        },
        /**
         * 获取题头th,生产多行题头map
         * @private
         */
        __getDomTh: function () {
            var el = this.el,
                elChache,
                tr,
                trLen,
                colIndex = this.colIndex,
                extendTh = this.extendTh;
            elChache = $(document.createElement("div")).html([
                '<table><thead>',
                el.find("thead").html() || el.find("tbody").html() || el.html(),
                '</thead></table>'
            ].join("")).find("table").eq(0);
            //读取内存里面的tr
            this.elCache = elChache;
            tr = elChache.find("tr");
            trLen = tr.length;
            if (trLen === 1) {//单行题头
                var ths = elChache[0].getElementsByTagName("th"),
                    domTh = [];
                for (var g = 0, h = ths.length; g < h; g += 1) {
                    domTh.push(ths[g]);
                    colIndex[g] = g;
                }
                this.domTh = domTh;
            } else {//多行题头
                var theadMap = this.theadMap = [],
                    i, j, l,
                    theadMapL;
                //colSpan替换
                for (i = 0; i < trLen; i += 1) {//每一行
                    var trI = tr.eq(i)[0],
                        thI = trI.cells,
                        lenThI = thI.length,
                        allCellSpan = 0;
                    extendTh[i] = [];
                    if (!theadMap[i]) {
                        theadMap[i] = [];
                    }
                    for (j = 0; j < lenThI; j += 1) {//每一列
                        var thIJ = thI[j],
                            cellSpan = thIJ.colSpan;
                        for (l = 0; l < cellSpan; l += 1) {//cellspan
                            theadMap[i][allCellSpan + l] = thIJ;
                        }
                        allCellSpan += cellSpan;
                    }
                    var emptyTh = document.createElement("th");
                    emptyTh.className = "grid-empty-th";
                    trI.insertBefore(emptyTh, thI[0]);
                }
                //rowSpan替换
                for (i = trLen; i --;) {//每一行
                    var mapI = theadMap[i],
                        lenMapI = mapI.length;
                    for (j = 0; j < lenMapI; j += 1) {//每一列
                        var mapIJ = mapI[j],
                            rowSpan = mapIJ.rowSpan;
                        if (rowSpan > 1 && !extendTh[i][j]) {
                            rowSpan += i;
                            for (l = i + 1; l < rowSpan; l += 1) {//rowspan
                                theadMapL = theadMap[l];
                                if (theadMapL) {
                                    extendTh[l][j] = true;
                                    theadMapL.splice(j, 0, mapIJ);
                                }
                            }
                        }
                    }
                }
                this.domTh = $.extend([], theadMap[trLen - 1]);
            }
            this.colSize = this.domTh.length;
        },

        /**
         * 计算初始的宽高
         * @private
         */
        __initWidthAndHeight: function () {
            var opts        = this.options,
            //外框宽度高度
                rewidth     = typeof opts.resizewidth === "function" ? opts.resizewidth() : undefined,
                reheight    = typeof opts.resizeheight === "function" ? opts.resizeheight() : undefined,
                gridwidth = opts.gridwidth = fiexNumber(opts.gridwidth),
                gridheight = opts.gridheight = fiexNumber(opts.gridheight);
            this.gridWidth = ( rewidth || gridwidth) - 2;
            if (gridheight === "auto") {
                gridheight       = 500;
                this.autoHeight = true;
            }
            this.gridHeight  = ( reheight || gridheight ) - 2;
            //table的宽高
            this.theadHeight = this.elCache.find("tr").length * 30;
            this.boxHeight   = this.gridHeight - this.paginationHeight - this.theadHeight;
            this.tableWidth  = opts.adaptive ? this.gridWidth - 17 : fiexNumber(opts.tablewidth) || this.gridWidth;
        },

        /**
         * 创建组件dom
         * @private
         */
        _create: function () {
            //创建外框
            this.__createLayoutDom();
            //事件委托
            this.__theadClickEventBind();
            this.__theadMouseEventBind();
            this.__tbodyClickEventBind();
            this.__tbodyMouseEventBind();
            //回调
            this.__imitateScroll();
            this._resizeEventBind();
            this.__boxScrollEventBind();
            //设置初始宽高样式
            this._setStyleWidth();
            this._setStyleHeight();
            //如果没有持久化，直接渲染内容
            this._loading("show");
            var opts = this.options,
                datasource = opts.datasource,
                config = opts.config;
            if (typeof datasource !== "function") {
                return;
            }
            if (this.persistence) {
                config(this);
            } else {
                this._createPropertys();
                this._createContent();
                datasource(this, this.getQuery());
            }
        },
        /**
         * 创建外框 div
         * @private
         */
        __createLayoutDom: function () {
            var opts            = this.options,
                el              = this.el,
            //生成dom
                container       = document.createElement("div");
            container.className = "grid-container";
            var html = [
                '<div class="grid-style"></div>',
                '<div class="grid-box">',
                '<div class="grid-head">',
                '<table class="grid-head-table"></table>',
                '</div>',
                '<div class="grid-body">',
                '<div class="grid-empty">本列表暂无记录</div>',
                '<div class="grid-table-box"><div class="grid-table-hide"></div></div>',
                '</div>',
                '<div class="grid-scroll">',
                '<div></div>',
                '</div>',
                '<div class="grid-line"></div>',
                '<div class="grid-overlay"></div>',
                '</div>',
                '<div class="grid-tfoot"></div>',
                '<div class="grid-loading-bg grid-loading-bg-over"></div>',
                '<div class="grid-loading-box"><span>正在加载...</span></div>'
            ];
            container.innerHTML = html.join("");
            el[0].parentNode.insertBefore(container, el[0]);
            //创建jq对象
            var gridContainer   = this.gridContainer = $(container).addClass(this.guid);
            if (this.isQm) {
                gridContainer.addClass("grid-container-qm");
            }
            this.gridTableBox  = $(".grid-table-box", gridContainer);
            var gridBox         = this.gridBox = gridContainer.children(".grid-box");
            this.gridStyle      = gridContainer.find(".grid-style").eq(0);
            this.gridHead       = gridBox.find(".grid-head").eq(0);
            this.gridBody       = gridBox.children(".grid-body").eq(0);
            this.gridOverlay    = gridBox.children(".grid-overlay").eq(0);
            this.gridHeadTable = this.gridHead.children(".grid-head-table").eq(0);
            this.gridLine       = gridBox.children(".grid-line").eq(0);
            this.gridScroll     = gridBox.children(".grid-scroll").eq(0);
            this.gridTfoot      = gridContainer.children(".grid-tfoot").eq(0);
            this.gridEmpty      = this.gridBody.children(".grid-empty").eq(0);
            this.loading         = gridContainer.children(".grid-loading-bg").next().andSelf();
            //调整dom属性
            this.gridTableHide = $(".grid-table-hide", gridContainer).eq(0).append(el.addClass("grid-body-table"));
            if (opts.ellipsis) { //是否能换行
                el.addClass("grid-ellipsis");
            }
            if (opts.titleellipsis) {//题头是否换行
                this.gridHeadTable.addClass("grid-ellipsis");
            }
        },
        /**
         * 表头点击事件
         * @private
         */
        __theadClickEventBind: function () {
            var opts      = this.options,
                bindName = this.bindName,
                primarykey = opts.primarykey,
                self      = this;
            this.gridHeadTable.on("click", function (event) {
                event.stopPropagation();
                var target = $(event.target);
                var className = target.attr("class");

                if (className === "grid-select" || className === "grid-ittab") {
                    return;//这里 可以调用 隐藏列 函数
                }
                //全选

                if (target.hasClass("grid-all-checkbox")) {
                    var domTr           = self.domTr,
                        multiChecked    = self.multiChecked,
                        selectedRowClass = self.selectedRowClass,
                        allCheckClass    = "grid-all-checkbox-checked",
                        endRow          = self.endRow,
                        rowSize         = self.rowSize,
                        checkAll = target.hasClass(allCheckClass) ,
                        disabledIndex = self.disabledIndex,
                        data = self.data,
                        dataK, rows = 0;
                    // $(target).blur();
                    if (checkAll) {
                        for (var j = endRow; j--;) {
                            multiChecked[j] = false;
                            $(domTr[j]).removeClass(selectedRowClass);
                        }
                        target.removeClass(allCheckClass);
                        for (var m = endRow; m < rowSize; m += 1) {
                            multiChecked[m] = false;
                        }
                        self.multiCheckedNum = 0;
                    } else {
                        for (var k = endRow; k--;) {
                            dataK = data[k];
                            if (dataK.hasOwnProperty(primarykey) && disabledIndex[k]) {
                                continue;
                            }
                            rows++;
                            multiChecked[k] = true;
                            $(domTr[k]).addClass(selectedRowClass);
                        }
                        target.addClass(allCheckClass);
                        for (k = endRow; k < rowSize; k += 1) {
                            dataK = data[k];
                            if (dataK.hasOwnProperty(primarykey) && disabledIndex[k]) {
                                continue;
                            }
                            rows++;
                            multiChecked[k] = true;
                        }
                        self.multiCheckedNum = rows;
                    }
                    var selectallCallback = opts.selectall_callback;
                    if (typeof selectallCallback === "function") {
                        var checked = !checkAll;
                        selectallCallback.call(self, checked ? self.data : [], checked);
                    }
                    return;
                }
                //排序
                var gridSort = target.parents(".grid-sort");
                if (gridSort.length && className === "grid-thead-text") {
                    var sortType       = self.sortType,
                        bindNameI     = bindName[self._thIndex(gridSort[0])],
                        sortTypeI     = sortType[bindNameI],// || "ASC",
                        newSortTypeI = sortTypeI !== "DESC" ? "DESC" : "ASC";
                    self._setOptsSortNameAndSoryType(bindNameI, newSortTypeI);
                    //持久化排序
                    if (self.persistence) {
                        self._triggerStatusChange();
                    }
                    self.loadData();
                }
            });
        },
        /**
         * 获取当前列的索引,题头不规则只能用此函数
         * @param thDom
         * @returns {*}
         * @private
         */
        _thIndex: function (thDom) {
            var domTh = this.domTh,
                arrIndex = this.arrIndex;
            if(arrIndex) {
                return arrIndex.call(domTh, thDom);
            }
            //IE
            for (var i = this.colSize; i--;) {
                if (domTh[i] === thDom) {
                    return i;
                }
            }
            return -1;
        },
        /**
         * 设置this.query中sortname和sorttype
         * @private
         */
        _setOptsSortNameAndSoryType: function (name, type) {
            var query      = this.query,
                sortstyle = this.options.sortstyle,
                sortName  = query.sortName,
                sortType  = query.sortType;
            for (var i = sortstyle; i--;) {
                if (name === sortName[i]) {
                    sortType.splice(i, 1);
                    sortName.splice(i, 1);
                    break;
                }
            }
            if (sortName.length === sortstyle) {
                sortType.shift();
                sortName.shift();
            }
            sortName.push(name);
            sortType.push(type);
            this._setSortTypeObj();
        },
        /**
         * th鼠标over,out事件
         * @private
         */
        __theadMouseEventBind: function () {
            this.gridHeadTable.on("mouseover",function (event) {
                var target       = $(event.target);
                var gridFixedS = target.closest(".grid-fixed-s").eq(0);
                if (gridFixedS.length) {
                    gridFixedS.parents("th").addClass("grid-thead-mouseover");
                }
            }).on("mouseout", function (event) {
                    var target = $(event.target);
                    var gridFixedS = target.closest(".grid-fixed-s").eq(0);
                    if (gridFixedS.length) {
                        gridFixedS.parents("th").removeClass("grid-thead-mouseover");
                    }
                });
        },
        /**
         * 单击双击事件
         * @private
         */
        __tbodyClickEventBind: function () {
            var opts                 = this.options,
                rowdblclickCallback = typeof opts.rowdblclick_callback === "function" ? opts.rowdblclick_callback : null,
                selectrows           = opts.selectrows,
                self                 = this,
                timeout              = null,
                target               = null,
                tagName;
            self.el.on("click", function (event) {
                event.stopPropagation();
                target = event.target;
                tagName = target.tagName;
                if (tagName === "TBODY" || tagName === "TABLE") {
                    return false;
                }
                var $target = $(target);
                var tr = $target.closest("tr").eq(0);
                var trIndex = tr.attr("index") || tr[0].rowIndex - 1 + self.trStart;
                //执行a,button,img的自定义事件
                var clickid = target.getAttribute("clickid") || "";
                if (clickid !== "") {
                    return self.fixedFnClick[clickid](self.data[trIndex], trIndex) === false ? false : true;
                }

                if (supportSelect($target) ||
                    (tagName === "SPAN" || tagName === "DIV") && supportSelect($target.parent())) {
                    self._selectRows(trIndex, undefined);
                } else {
                    return;
                }

                if (rowdblclickCallback) {
                    clearTimeout(timeout);
                    timeout = setTimeout(function () {
                        clickCallback(trIndex);
                    }, 300);
                } else {
                    clickCallback(trIndex);
                }
            });
            self.el.on("dblclick", function (event) {
                event.stopPropagation();
                if (rowdblclickCallback) {
                    clearTimeout(timeout);
                    target   = event.target;
                    tagName = target.tagName;
                    if (tagName === "TBODY" || tagName === "TABLE") {
                        return;
                    }
                    var tr       = $(target).closest("tr").eq(0);
                    var trIndex = tr.attr("index") - 0;
                    rowdblclickCallback.call(self, self.data[trIndex], trIndex);
                }
            });

            function supportSelect (target) {
                return (target.prop("tagName") === "TD" || target.hasClass("grid-fixed-s"));
            }

            function clickCallback(trIndex) {
                var flag = false;
                if (selectrows === "multi") {
                    flag = self.multiChecked[trIndex];
                } else if (selectrows === "single") {
                    flag = trIndex === self.singleChecked;
                }
                //选择行回调
                if (typeof opts.rowclick_callback === "function") {
                    opts.rowclick_callback.call(self, self.data[trIndex], flag, trIndex);
                }
            }
        },
        /**
         * 选择行
         * @param index
         * @param flag
         * @private
         */
        _selectRows: function (index, flag) {
            var domTr           = this.domTr,
                domTrIndex     = domTr[index],
                opts             = this.options,
                selectrows       = opts.selectrows,
                selectedRowClass = this.selectedRowClass,
                tr               = $(domTrIndex);
            if (this.disabledIndex[index]) {
                //当前行被禁用选择
                return;
            }
            if (selectrows === "multi") {
                var multiChecked = this.multiChecked;
                var multiCheckedIndex = multiChecked[index];
                if (flag === undefined) {
                    flag = multiCheckedIndex !== true;
                } else if (flag === multiCheckedIndex) {
                    return;
                }
                multiChecked[index] = flag;
                if (!domTrIndex) {
                    return;
                }
                if (flag === false) {
                    tr.removeClass(selectedRowClass);
                    this.multiCheckedNum--;
                    this.gridAllCheck.removeClass("grid-all-checkbox-checked");
                } else {
                    tr.addClass(selectedRowClass);
                    this.multiCheckedNum += 1;
                    if (this.multiCheckedNum === this.rowSize) {
                        this.gridAllCheck.addClass("grid-all-checkbox-checked");
                    }
                }
            } else if (selectrows === "single") {
                var singleChecked = this.singleChecked;
                this.singleChecked = singleChecked === index && flag === false ? NaN : index;
                if (!domTrIndex) {
                    return;
                }
                if (flag === false) {
                    tr.removeClass(selectedRowClass);
                } else {
                    if (!isNaN(singleChecked)) {
                        $(domTr[ singleChecked ]).removeClass(selectedRowClass);
                    }
                    tr.addClass(selectedRowClass);
                }
            }
        },
        /**
         * title渲染
         * @private
         */
        __tbodyMouseEventBind: function () {
            var self            = this,
                bindName       = this.bindName,
                titlerender     = this.options.titlerender,
                tr, title;
            self.el.on("mouseover", function (event) {
                var target   = event.target,
                    tagName = target.tagName;
                if (tagName === "TR" || tagName === "TBODY" || tagName === "TABLE") {
                    return;
                }
                var td           = $(target).closest("td");
                //解决IE8下，mouseover的event.target不精确问题
                if(!td.length){
                    return;
                }
                var tdIndex     = td[0].cellIndex,
                    gridFixedS = td.find(".grid-fixed-s"),
                    contentBox  = gridFixedS.length ? gridFixedS : td,
                    bindNameI  = bindName[tdIndex],
                    trIndex;

                tr               = td.closest("tr");
                trIndex         = tr.attr("index");
                if (!trIndex) {
                    trIndex = tr[0].rowIndex - 1 + self.trStart;
                    tr.attr("index", trIndex);
                }
                tr.addClass("grid-tr-over");
                if (typeof bindNameI !== "number" && !td.attr("title")) {
                    if (typeof titlerender === "function") {
                        title = titlerender(self.data[trIndex], bindNameI);
                        if (title) {
                            td.attr("title", title);
                        } else {
                            title = $.trim(contentBox.text());
                            if (title) {
                                td.attr("title", title);
                            }
                        }

                    } else {
                        title = $.trim(contentBox.text());
                        if (title) {
                            td.attr("title", title);
                        }
                    }
                }
            }).on("mouseout", function () {
                    if (tr) {
                        tr.removeClass("grid-tr-over");
                    }
                });
        },
        /**
         * 模拟滚动条
         * @private
         */
        __imitateScroll: function () {
            var self            = this,
                guid            = self.guid,
                gridHeadTable = this.gridHeadTable[0],
                gridStyle      = this.gridStyle[0],
                el              = this.el[0],
                left, leftCache;
            var fixcolumnnumber = this.options.fixcolumnnumber;
            if (this.writeStyle) {
                this.gridScroll.on("scroll", function () {
                    left = this.scrollLeft;
                    if (leftCache === left) {
                        return ;
                    }
                    leftCache = left;
                    gridStyle.innerHTML = [
                        '<style type="text/css">.',
                        guid,
                        ' .grid-fixed .grid-fixed-s{left:',
                        left,
                        'px}.',
                        guid,
                        ' .grid-body-table, .',
                        guid,
                        ' .grid-head-table{margin-left:-',
                        left,
                        'px}</style>'
                    ].join("");
                });
            } else {
                this.gridScroll.on("scroll", function () {
                    left = this.scrollLeft + "px";
                    if (leftCache === left) {
                        return ;
                    }
                    leftCache = left;
                    var marginLeft = "-" + left;
                    gridHeadTable.style.marginLeft = marginLeft;
                    el.style.marginLeft = marginLeft;
                    var domFixed = self.domFixed;
                    for (var i = domFixed.length; i--;) {
                        var domFixedI = domFixed[i];
                        for (var j = fixcolumnnumber; j--;) {
                            domFixedI[j].style.left = left;
                        }
                    }
                    var tdsPackage = self.tdsPackage;
                    for (var k = 0; k < fixcolumnnumber; k += 1) {
                        tdsPackage[k].html = tdsPackage[k].html.replace(/(style="left:)\d*?px/, "$1" + left);
                    }
                });
            }
        },
        /**
         * resize事件
         * @private
         */
        _resizeEventBind: function () {
            var opts = this.options,
                self = this;
            if (opts.resizeheight || opts.resizewidth) {
                $(window).on("resize", function () {
                    self.resize();
                });
            }
        },
        /**
         * 根据回调设置宽高
         */
        resize: function () {
            var opts = this.options;
            try {
                var height = opts.resizeheight();
                if (typeof height === 'number' && height > 0 && !this.autoHeight) {
                    this.setHeight(height);
                }
            } catch (e) {
            }
            try {
                var width = opts.resizewidth();
                if (typeof width === 'number' && width > 0) {
                    this.setWidth(width);
                }
            } catch (e) {
            }

            if(this.autoHeight){
                this._setAutoHeight();
            }
        },
        /**
         * 滚动触发加载
         * @private
         */
        __boxScrollEventBind: function () {
            var self = this;
            if (!this.options.lazy || this.autoHeight) {
                return;
            }
            this.gridBody.on("scroll", function () {
                self._lazyload(true);
            });
        },
        /**
         * 延迟加载
         * @private
         */
        _lazyload: function (timeout) {
            var self = this,
                opts = this.options,
                scrollTop = this.gridBody[0].scrollTop,
                oldEndRow = self.endRow,
                newStartRow = parseInt(scrollTop / 28, 10),
                newEndRow = parseInt(this.boxHeight / 28, 10) + newStartRow + 20 + 1;
            if (opts.ellipsis) {
                clearTimeout(this.renderTimeout);
                if (timeout) {
                    this.renderTimeout = setTimeout(function () {
                        try{
                            self._clearAndLoad(newStartRow - 20, oldEndRow, newEndRow);
                        }catch(e){}
                    }, 10);
                } else {
                    self._clearAndLoad(newStartRow - 20, oldEndRow, newEndRow);
                }
            } else {
                if (!this.renderComplete && this.appendRowsComplete && newEndRow > oldEndRow) {
                    clearTimeout(this.renderTimeout);
                    if (timeout) {
                        this.renderTimeout = setTimeout(function () {
                            try{
                                self.appendRowsComplete = false;
                                self._appendRows(oldEndRow, newEndRow);
                            }catch(e){}
                        }, 10);
                    } else {
                        self.appendRowsComplete = false;
                        self._appendRows(oldEndRow, newEndRow);
                    }
                }
            }
        },
        /**
         * 不换行,且大数据时调用
         */
        _clearAndLoad: function (newTrStart, oldEndRow, newTrEnd) {
            var rowSize = this.rowSize,
                domTr,
                gridTbody = this.gridTbody[0],
                gridTableBoxCss = this.gridTableBox[0].style,
                trFrag = this.trFrag,
                trStart = this.trStart,
                trEnd = this.trEnd;
            newTrEnd = this.trEnd = Math.min(rowSize, newTrEnd);
            newTrStart = this.trStart = Math.max(newTrStart, 0);
            var i, j, k, l;
            //转换成dom
            if (newTrEnd > oldEndRow) {
                var dom        = this._dataToDom(this.data, oldEndRow, newTrEnd);
                var tr = dom.domTr;
                this.domTr    = this.domTr.concat(tr);
                this.domTd    = this.domTd.concat(dom.domTd);
                this.domFixed = this.domFixed.concat(dom.domFixed);
                this.endRow   = newTrEnd;
                for ( l = tr.length; l --;) {
                    trFrag.appendChild(tr[l]);
                }
            }
            domTr = this.domTr;
            if(newTrStart > trStart || newTrEnd > trEnd) { //滚动条向下滚
                //top删除
                for (i = trStart, j = Math.min(trEnd, newTrStart); i < j; i ++) {
                    trFrag.appendChild(domTr[i]);
                }
                //bottom添加
                for (k = Math.max(newTrStart, trEnd); k < newTrEnd; k ++) {
                    gridTbody.appendChild(domTr[k]);
                }
            } else if (newTrStart < trStart){
                //top插入
                var firstRow = domTr[trStart];
                for (i = newTrStart, j = Math.min(trStart, newTrEnd); i < j; i ++ ) {
                    gridTbody.insertBefore(domTr[i], firstRow);
                }
                //bottom删除
                for (k = Math.max(trStart, newTrEnd); k < trEnd; k ++) {
                    trFrag.appendChild(domTr[k]);
                }
            }
            gridTableBoxCss.paddingTop = newTrStart * 28 + "px";
            gridTableBoxCss.paddingBottom = ( rowSize - newTrEnd) * 28 + "px";
        },
        /**
         * 设置组件宽度样式.
         * @private
         */
        _setStyleWidth: function () {
            this.gridContainer.css("width", this.gridWidth);
            this.el.css("width", this.tableWidth);
            this.gridHeadTable.css("width", this.tableWidth);
        },
        /**
         * 设置组件高度样式.
         * @private
         */
        _setStyleHeight: function () {
            this.gridContainer.css("height", this.gridHeight);
            this.gridHead.css("height", this.theadHeight);
            this.gridOverlay.css("height", this.theadHeight);
            this.gridBody.css("height", this.boxHeight);
        },
        /**
         * 加载中...
         * @param status "show", "hide"
         */
        _loading: function (status) {
            if (!this.options.loadtip) {
                return;
            }
            this.loading[status]();
            if (this.unRender && status === "hide") {
                this.gridContainer.find(".grid-loading-bg").removeClass("grid-loading-bg-over");
            }
        },
        /**
         * 属性初始创建
         * @private
         */
        _createPropertys : function () {
            //获取表头中的属性
            this.__getTagsPropertys();
            //初始化每一列宽度
            this.__initColWidth();
        },
        /**
         * 更多初始创建
         * @private
         */
        _createContent: function () {
            //渲染head和body
            this.__renderHead();
            this.__renderBody();
            //设置列宽
            this._setColWidthStyle();
            //tbody内容渲染相关
            this.__packageTds();
            //初始列隐藏
            this._colHidden(true);
            //扩展功能,拖动列宽和隐藏列
            this.ittab._init(this);
            var opts = this.options;
            if (opts.colhidden) {
                this.hideCol._init(this);
            }
            if (opts.colmove && this.theadMap.length === 0) {
                this.moveCol._init(this);
            }
            if(opts.afterdrag_callback){
                var moveRow = new gridMoveRowPlugin(this);
            }

        },
        /**
         * 获取模版中的列属性.
         */
        __getTagsPropertys: function () {
            var domTh         = this.domTh,
                opts           = this.options,

                colSize       = this.colSize,

                renderStyle   = this.renderStyle,
                bindName      = this.bindName,
                bindDotName  = this.bindDotName,
                sort           = this.sort = [],
                theadText     = this.theadText,
                colwidth      = this.colWidth,
                colRender     = this.colRender,
                fixedFnClick = this.fixedFnClick,
                colHidden = this.colHidden,
                disabled = this.disabled;
            //设置列宽备份
            for (var i = 0; i < colSize; i += 1) {
                //设置colIndex
                var thI = domTh[i];
                colwidth.push(thI.style.width || thI.getAttribute("width") || "");
                //初始状态为隐藏
                colHidden[i] = thI.getAttribute("hide") === "true" || $(thI).css("display") === "none";
                //不可隐藏设置
                disabled[i] = thI.getAttribute("disabled") === "true";
                thI.removeAttribute("disabled");
                //获取渲染样式。
                var renderStyleAttrI = thI.getAttribute("renderStyle") || "";
                var renderStyleI = renderStyleAttrI
                    .replace(/padding.+?(;|$)/, "")
                    .replace(/display\s*?:\s*?none\s*?(;|$)/, "") + ";";
                renderStyle.push(renderStyleI);
                //获取bindName
                var bindNameI = thI.getAttribute("bindName") || "";
                bindName[i] = bindNameI;
                if (/\./.test(bindNameI)) {
                    bindDotName[i] = bindNameI.split(".");
                } else {
                    bindDotName[i] = undefined;
                }
                if (isNaN(this.numCol) && bindNameI.length && !isNaN(bindNameI - 0)) {//编号列
                    this.numCol = i;
                    bindName[i] = bindNameI - 0;
                    bindNameI = "";
                }
                //sort
                if (bindNameI === "") {
                    sort[i] = false;
                } else {
                    sort[i] = thI.getAttribute("sort") === "true" || false;
                }
                //题头文字
                theadText.push(thI.innerHTML);
                //渲染函数. 优先级 format < colRender < render  固定render在其他基础上取;
                var format    = thI.getAttribute("format"),
                    colrender = opts.colrender,
                    render    = thI.getAttribute("render");
                colRender[i] = [];
                //format
                if (format !== null) {
                    if (/money/.test(format)) {
                        colRender[i][1] = {
                            "format": Number(format.split("-")[1] || 2),
                            "callback": this.formatFn.money
                        };
                    } else if (/(dd|MM|yy)/i.test(format)) {
                        colRender[i][1] = {
                            "format": format,
                            "callback": this.formatFn.date
                        };
                    }
                }
                //单元格渲染总函数
                if (typeof colrender === "function") {
                    colRender[i][0] = {
                        "render": "colrenderFn",
                        "callback": colrender
                    };
                }
                //单列固定渲染
                if (typeof render === "string") {
                    if (new RegExp(render).test("a;button;image")) {
                        var options = thI.getAttribute("options");
                        if (options !== null) {
                            if (/{/.test(options)) {
                                try {
                                    options = JSON.parse(options);
                                } catch (e) {
                                    options = (new Function('return ' + options + ";"))();
                                } finally {
                                    if (typeof options !== "object") {
                                        options = undefined;
                                    }
                                }
                            } else {
                                options = window[options];
                            }
                        }
                        if (options) {
                            var click = options.click;
                            click = typeof click === "string" ? window[click] : click;
                            if (typeof click === "function") {
                                options.click = fixedFnClick.push(click) - 1;
                            } else {
                                options.click = "";
                            }
                            colRender[i][0] = {
                                "render" : "fiexdFn",
                                "method" : render,
                                "options": options
                            };
                        }
                    } else {
                        var renderFn = window[render];
                        if (renderFn) {
                            var colJson = {
                                "format"     : format || undefined,
                                "render"     : renderFn,
                                "renderStyle": renderStyleAttrI,
                                "text"       : theadText[i]
                            };
                            colRender[i][0] = {
                                "render"  : "renderFn",
                                "colJson": colJson,
                                "callback": renderFn
                            };
                        }
                    }
                }
                //add by 2015年5月16日14:36:26 使用方式 <th bindName="english" url="a.json" options="{'display':'id','value':'text'}">英语</th>
                this.url = thI.getAttribute("url");
                if(this.url){
                    var options = thI.getAttribute("options");
                    options = (new Function('return ' + options + ";"))();
                    $.ajax({
                          type: "GET",
                          url: this.url,
                          dataType: "json",
                          async:false
                    }).done(function(item){
                        if($.isPlainObject(item)){
                            if(item.data){
                                item = item.data;
                            }
                        }
                        colRender[i][0] = {
                        "render"  : "renderFn",
                        "colJson": {"options":options||{display:'id',value:'text'},data:item},
                        "callback": function(data,bindname,col){
                                var value = data[col.bindName];
                                $.each(col.data,function(i,item){
                                    if(item[col.options.display]==value){
                                        value = item[col.options.value];
                                        return false;
                                    }
                                });
                                return value;
                            }
                        };
                    });
                }
            }
            //重置bindName
            var selectrows = opts.selectrows;
            if (selectrows === "multi" || selectrows === "single") {
                bindName[0] = -1;
            }
        },
        /**
         * 计算初始每一列的宽度。
         * @private
         */
        __initColWidth: function () {
            var gridWidth  = this.gridWidth,
                tableWidth = this.tableWidth || gridWidth,
                colwidth   = this.colWidth,
                colWidthBackup = this.colWidthBackup,
                sumWidth   = 0,
                setedWidth = 0,
                colSize    = this.colSize,
                autoCol    = [];
            for (var i = this.colSize; i--;) {
                var colwidthI = colwidth[i];
                colWidthBackup[i] = -1;
                if (colwidthI === "") {
                    colwidthI  = 0;
                    colwidth[i] = 200;
                    autoCol.push(i);
                } else if (/%/.test(colwidthI)) {
                    colwidthI  = Math.round(tableWidth * parseInt(colwidthI, 10) / 100);
                    colwidth[i] = colwidthI;
                } else {
                    colwidthI  = parseInt(colwidthI, 10);
                    colwidth[i] = colwidthI;
                }
                sumWidth   += colwidth[i];
                setedWidth += colwidthI;
            }
            var autoColSize   = autoCol.length;
            var remainingWidth = tableWidth - setedWidth;
            if (autoColSize > 0 && remainingWidth > autoColSize) {
                var remainingColwidth = Math.round(remainingWidth / autoColSize);
                for (var m = 0; m < autoColSize; m++) {
                    colwidth[autoCol[m]] = remainingColwidth;
                }
                colwidth[autoCol[m - 1]] += remainingWidth - remainingColwidth * autoColSize;
                this.tableWidth = tableWidth;
            } else {

                if (isNaN(this.tableWidth) && sumWidth >= gridWidth) {
                    this.tableWidth = sumWidth;
                } else {//重设
                    if (!this.tableWidth) {
                        this.tableWidth = gridWidth;
                    }
                    var newColwidth = [];
                    var allWidth = 0;
                    var last = 0;
                    for (var j = colSize; j--;) {
                        var width = Math.round(colwidth[j] * tableWidth / sumWidth);
                        allWidth += width;
                        newColwidth[j] = width;
                        last = j;
                    }
                    newColwidth[last] += tableWidth - allWidth;
                    this.colWidth = newColwidth;
                }
            }
            this.initColWidth = $.extend([], this.colWidth);
        },
        /**
         * 渲染表头 并创建相关dom
         * @private
         */
        __renderHead: function () {
            var opts            = this.options,
                domTh          = this.domTh,
                theadMap       = this.theadMap,
                theadMapLen   = this.theadMap.length,
                domHeadCol    = this.domHeadCol,
                domFixedJ     = this.domFixed[0] = [],
                theadText      = this.theadText,
                colSize        = this.colSize,
                fixcolumnnumber = opts.fixcolumnnumber,
                colhidden       = this.options.colhidden,
                sort            = this.sort,
                tr           = document.createElement("tr"),
                titleellipsis     = opts.titleellipsis;
            tr.className = "grid-width-norm";
            if (theadMapLen) {
                //控制空th的emptyth，多行表头需要。
                var emptyTh = document.createElement("th");
                emptyTh.className = "grid-empty-th";
                tr.appendChild(emptyTh);
                //去掉宽度
                for (var k = theadMapLen - 1; k--;) {
                    var theadMapK = theadMap[k];
                    for (var l = theadMapK.length; l--;) {
                        var theadMapKL = theadMapK[l];
                        theadMapKL.removeAttribute("width");
                        theadMapKL.style.width = "";
                    }
                }
            }
            for (var i = 0; i < colSize; i += 1) {
                //生成控制宽度的dom
                var th = domHeadCol[i] = document.createElement("th");
                tr.appendChild(th);
                //渲染th
                var domThI = domTh[i];
                if (i < fixcolumnnumber) {
                    $(domThI).addClass("grid-fixed");
                }
                if (sort[i]) {
                    $(domThI).addClass("grid-sort");
                }
                //CSS
                domThI.removeAttribute("width");
                domThI.style.width = "";
                //html
                var theadTextI = theadText[i];
                var thHtml = [
                    '<div class="grid-fixed-d">',
                    '<span class="grid-fixed-s">'

                ];
                if (sort[i]) {
                    thHtml.push('<b class="grid-sort-icon-desc cui-icon">&#xf0d7;</b><b class="grid-sort-icon-asc cui-icon">&#xf0d8;</b>');
                }
                thHtml.push('<a class="grid-thead-text');
                if (titleellipsis) {
                    thHtml.push('" title="', $.trim(theadTextI.replace(/<.*?>/g, "")));
                }
                thHtml.push('">' , theadTextI ,'</a>');
                if (colhidden) {
                    thHtml.push('<a class="grid-select cui-icon">&#xf0b0;</a>');
                }
                thHtml.push('<em class="grid-ittab"></em>');
                thHtml.push('</span>');
                if (i < fixcolumnnumber && !titleellipsis) {
                    thHtml.push(theadTextI);
                }
                thHtml.push('</div>');
                domThI.innerHTML = thHtml.join("");
            }

            this.gridHeadTable.html(this.elCache.find("thead").eq(0).prepend(tr));
            this.elCache.parent().remove(); //内存里面的内容没有用了，删除。
            delete this.elCache;
            //创建fixed dom 并设z-index样式
            for (var j = 0; j < fixcolumnnumber; j += 1) {
                domTh[j].getElementsByTagName("div")[0].style.zIndex = fixcolumnnumber + 1 - j;
                domFixedJ.push(domTh[j].getElementsByTagName("span")[0]);
            }
            //多选设置
            var domTh0 = $(domTh[0]);
            if (opts.selectrows === "multi") {
                domTh0.find(".grid-select").eq(0).remove();
                domTh0.find(".grid-fixed-s").addClass("grid-no-move");
                var gridTheadText = $(domTh[0]).find(".grid-thead-text").addClass("grid-all-checkbox");
                gridTheadText.html(gridTheadText.text() + "<b></b>");
                this.gridAllCheck = gridTheadText;
            }
            //单选设置 去掉隐藏列按钮
            if (opts.selectrows === "single") {
                domTh0.find(".grid-select").eq(0).remove();
                domTh0.find(".grid-fixed-s").addClass("grid-no-move");
            }
        },
        /**
         * 创建tbody基础don
         * @private
         */
        __renderBody: function () {
            var el           = this.el,
                colSize     = this.colSize,
                domBodyCol = this.domBodyCol,
                tr           = document.createElement("tr");
            tr.className = "grid-width-norm";
            for (var i = 0; i < colSize; i += 1) {
                var th = domBodyCol[i] = document.createElement("th");
                tr.appendChild(th);
            }
            el.html("<thead></thead><tbody></tbody>");
            el.find("thead").append(tr);
            this.gridTbody = el.find("tbody").eq(0);
        },
        /**
         * 加快tbody的渲染适度,生成每一行的模板.
         */
        __packageTds: function () {
            var opts            = this.options,
                fixcolumnnumber = opts.fixcolumnnumber,
                renderStyle    = this.renderStyle,
                selectrows      = opts.selectrows,
                selectrowsClass = this.selectrowsClass = {
                    "no"    : "",
                    "multi" : "grid-checkbox",
                    "single": "grid-radio"
                }[selectrows],
                colSize = this.colSize,
                leftCss = "";
            if (!this.writeStyle) {
                leftCss = "left:0px;";
            }
            //生成每一行模板。
            var firstRow = [];
            var start = 0;
            if (selectrowsClass !== "") {
                start += 1;
                var td0 = firstRow[0] = {};
                if (fixcolumnnumber > 0) {
                    td0.html = [
                        '<div class="grid-fixed-d" style="z-index:',
                        fixcolumnnumber + 1,
                        ';"><span class="grid-fixed-s ',
                        selectrowsClass,
                        '" style="',
                        leftCss,
                        renderStyle[0],
                        '/**/">',
                        '</span></div>'
                    ].join("");
                    td0.style = "";
                } else {
                    td0.style = renderStyle[0];
                    td0.className = selectrowsClass;
                }
            }
            for (var i = start; i < colSize; i += 1) {
                var tdI = firstRow[i] = {};
                if (i < fixcolumnnumber) {
                    tdI.html = [
                        '<div class="grid-fixed-d" style="z-index:',
                        fixcolumnnumber + 1 - i,
                        ';"><span class="grid-fixed-s" style="' ,
                        leftCss,
                        renderStyle[i],
                        '/**/"><!---->',
                        '</div>'
                    ].join("");
                    tdI.style = "";
                } else {
                    tdI.style = renderStyle[i];
                }
            }
            this.tdsPackage = firstRow;
        },
        /**
         * 分配列宽,隐藏列不分配宽度.
         * adaptive === true, 且 gridWidth === tableWidth 的时候用到.
         * @returns {*}
         * @private
         */
        _setColWidth: function (scrolling) {
            var initColwidth = this.initColWidth,
                colHidden     = this.colHidden,
                tableWidth    = this.tableWidth,
                colSize       = this.colSize,
                sumWidth      = 0;
            for (var i = colSize; i--;) {
                if (colHidden[i] === false) { //显示
                    sumWidth += initColwidth[i];
                }
            }
            var newColwidth = [];
            var allWidth = 0;
            var last = 0;
            for (var j = colSize; j--;) {
                if (colHidden[j] === false) {
                    var width        = Math.round(initColwidth[j] * tableWidth / sumWidth);
                    allWidth       += width;
                    newColwidth[j] = width;
                    last             = j;
                } else {
                    newColwidth[j] = 0;
                }
            }
            newColwidth[last] += tableWidth - allWidth;
            this.colWidth       = newColwidth;
            this._setColWidthStyle();
            if (scrolling) {
                this._isScrolling(true);
            }
        },
        /**
         * 设置每列宽度
         * @private
         */
        _setColWidthStyle: function (index) {
            var colwidth    = this.colWidth,
                domHeadCol = this.domHeadCol,
                domBodyCol = this.domBodyCol,
                k            = this.colSize,
                colwidthK  = "",
                colwidthIndex;
            if (typeof index === "number") {
                colwidthIndex = colwidth[index] - 1 + "px";
                domHeadCol[index].style.width = colwidthIndex;
                domBodyCol[index].style.width = colwidthIndex;
            } else {
                for (; k--;) {
                    colwidthK = colwidth[k] === 0 ? 0 : colwidth[k] - 1 + "px";
                    domHeadCol[k].style.width = colwidthK;
                    domBodyCol[k].style.width = colwidthK;
                }
            }
            if(comtop.Browser.isIE){
                this._bugFix();
            }

        },
        /**
         * 解决IE8高版本IE一个兼容问题
         * 出现条件：有固定列，IE8以上版本的IE，然后在隐藏固定列，则出现表头错乱问题
         * 原因：表格使用table-layout:fixed属性，导致在删减对应两个table计算有些差距
         * 解决：使用自身属性再次重排一下列如：boder-collapse
         * @private
         */
        _bugFix:function(){
            $(".grid-container table").css({"border-collapse":"separate"});
            setTimeout(function(){
                $(".grid-container table").css({"border-collapse":"collapse"});
            },1)
        },
        /**
         * 隐藏列
         */
        _colHidden: function (init) {
            var endRow         = this.endRow,
                domTh           = this.domTh,
                domTd           = this.domTd,
                tdsPackage      = this.tdsPackage,
                domHeadCol     = this.domHeadCol,
                domBodyCol     = this.domBodyCol,
                colHidden       = this.colHidden,
                colwidth        = this.colWidth,
                colWidthBackup = this.colWidthBackup,
                tableWidth      = this.tableWidth,
                theadMap        = this.theadMap,
                extendTh        = this.extendTh,
                th               = null,
                thisDomTh      = null;
            for (var i = this.colSize; i--;) {
                if (colHidden[i] === true) {
                    if (colWidthBackup[i] === -1 || init) {
                        domHeadCol[i].style.display = "none";
                        thisDomTh = domTh[i];

                        if (theadMap.length) {
                            for (var p = theadMap.length; p--;) {
                                if (!extendTh[p][i]) {
                                    th = theadMap[p][i];
                                    if (th.colSpan > 1) {
                                        th.colSpan--;
                                    } else {
                                        th.style.display = "none";
                                    }
                                }
                            }
                        } else {
                            thisDomTh.style.display = "none";
                        }
                        for (var m = endRow; m--;) {
                            domTd[m][i].style.display = "none";
                        }
                        domBodyCol[i].style.display = "none";
                        tdsPackage[i].style += "display:none;";
                        colWidthBackup[i] = colwidth[i];
                        tableWidth -= colwidth[i];
                        colwidth[i] = 0;
                    }
                } else {
                    if (colWidthBackup[i] !== -1) {
                        domHeadCol[i].style.display = "";
                        thisDomTh = domTh[i];

                        if (theadMap.length) {
                            for (var q = theadMap.length; q--;) {
                                if (!extendTh[q][i]) {
                                    th = theadMap[q][i];
                                    if (th.style.display === "none") {
                                        th.style.display = "";
                                    } else {
                                        th.colSpan += 1;
                                    }
                                }
                            }
                        } else {
                            thisDomTh.style.display = "";
                        }
                        for (var n = endRow; n--;) {
                            domTd[n][i].style.display = "";
                        }
                        domBodyCol[i].style.display = "";
                        tdsPackage[i].style = tdsPackage[i].style.replace(/display.*?($|;)/g, "");
                        colwidth[i] = colWidthBackup[i];
                        tableWidth += colWidthBackup[i];
                        colWidthBackup[i] = -1;
                    }
                }
            }
            if (!this.options.adaptive) {
                this.tableWidth = tableWidth;
            } else {
                //自适应宽度
                this.isIttab = false;
            }
            this._setLayout();
            //持久化触发
            if (this.persistence && !init) {
                this._triggerStatusChange();
            }
        },
        /**
         * 持久化触发
         * @private
         */
        _triggerStatusChange: function () {
            var opts = this.options,
                query = this.query,
                colWidth = this.colWidth,
                colWidthBackup = this.colWidthBackup,
                colHidden = this.colHidden,
                colIndex = this.colIndex,
                isWidth = !opts.adaptive,
                isIndex = this.theadMap.length === 0 && opts.colmove,
                overall = 0,
                ret, width, index, i,newJson,
                hide = [];
            for (i = this.colSize; i--;) {
                if (colHidden[i]) {
                    colWidth[i] = colWidthBackup[i];
                    hide[i] = 1;
                } else {
                    hide[i] = 0;
                }
                overall += colWidth[i];
            }
            newJson = {
                "hide" : colHidden,
                "sortName" : query.sortName,
                "sortType" : query.sortType,
                "overall" : overall
            };
            if(window.JSON && JSON.stringify) {
                if (isIndex){
                    newJson.index = colIndex;
                }
                if (isWidth) {
                    newJson.width = colWidth;
                }
                ret = JSON.stringify(newJson);
            } else {
                ret = ["{",
                    isIndex ? ["\"index\":[", colIndex.join(","), "],"].join("") : "",
                    isWidth ? ["\"width\":[", colWidth.join(","), "],"].join("") : "",
                    "\"hide\":[", hide.join(","), "],",
                    "\"sortName\":[\"", query.sortName.join("\",\""), "\"],",
                    "\"sortType\":[\"", query.sortType.join("\",\""), "\"],",
                    //"\"width-backup\":[", colWidthBackup.join(","), "],",
                    "\"overall\":", overall,
                    "}"
                ].join("");
            }
            this.options.onstatuschange(ret);
        },
        /**
         * 判断横竖方向是否有滚动条
         * @private
         */
        _isScrolling: function (unSetColwidth) {
            var el             = this.el,
                gridWidth     = this.gridWidth + 2,
                tableWidth    = this.tableWidth,
                boxHeight     = this.boxHeight,
                contentHeight = el.height(),
                gridScroll    = this.gridScroll;
            if (this.options.adaptive && !this.isIttab) {
                //竖滚动条
                if (boxHeight < contentHeight) {
                    tableWidth = this.tableWidth = gridWidth - 17;
                } else {//没有滚动条
                    this.tableWidth = gridWidth;
                    tableWidth = gridWidth + 1;
                }
                el.css("width", tableWidth);
                this.gridHeadTable.css("width", tableWidth);
                // gridScroll[0].scrollLeft = 0;
                gridScroll.css("left", "-999999px");
                if (!unSetColwidth) {
                    this._setColWidth(true);
                    this._setLayout(true);
                }
            } else {
                //只有竖向滚动条
                if (boxHeight < contentHeight &&
                    gridWidth >= tableWidth + 17) {
                    this.gridTableHide.css("marginBottom", 0);
                    gridScroll.css({"left": "-999999px", "width" : gridWidth - 17});
                }
                //只有横向滚动条
                if (gridWidth < tableWidth &&
                    boxHeight >= contentHeight + 17) {
                    gridScroll.css({"width": gridWidth, "left" : 0, "bottom": ""});
                    gridScroll.css("bottom", 0);
                    this.gridTableHide.css("marginBottom", 17);
                }
                //双向滚动条;
                if (gridWidth < tableWidth + 17 &&
                    boxHeight < contentHeight || gridWidth < tableWidth &&
                    boxHeight < contentHeight + 17) {
                    gridScroll.css({"width": gridWidth - 17, "left" : 0, "bottom": ""});
                    gridScroll.css("bottom", 0); //由于Grid高度改变时，gridScroll的位置并不跟着改变（IE6）
                    this.gridTableHide.css("marginBottom", 17); //有横向
                    //fixed the vertical scroll bar will appears when drag table headers. 2015-1-13
                    if(this.autoHeight){
                        this.gridBody.css("height", this.boxHeight+17);
                        this.gridContainer.css("height", this.gridHeight+17);
                        gridScroll.css({"width": gridWidth});
                    }
                }
                //没有滚动条
                if (boxHeight >= contentHeight &&
                    gridWidth >= tableWidth) {
                    this.gridTableHide.css("marginBottom", 0);
                    gridScroll.css({"left": "-999999px", "width" : gridWidth});
                }
            }
            gridScroll.find("div").eq(0).css("width", tableWidth);
            //重置滚动条
            clearTimeout(this.sc);
            this.sc = setTimeout (function () {
                try {
                    gridScroll.scroll();
                }catch(e){}
            }, 10);
        },
        /**
         * 高度自适应的时候,重新设置高度
         * @private
         */
        _setAutoHeight: function () {
            var gridTableBox, lineHeight;
            if (this.autoHeight) {
                gridTableBox = this.gridTableBox;
                lineHeight = 28;
                var marginBottom = parseInt(gridTableBox.css("marginBottom"), 10) || 1;
                var tableHeight;
                if(this.rowSize===0){
                    tableHeight=50;
                }else{
                    tableHeight = gridTableBox.height() || this.rowSize * lineHeight;
                }
               // var tableHeight = Math.max(gridTableBox.height() || this.rowSize * lineHeight, 50);

                this._setHeight(tableHeight + marginBottom + this.theadHeight + (this.options.pagination && this.rowSize ? 41 : 0) + 2);
            }
        },
        /**
         * 布局:包括外框宽高设置,col宽度设置.
         * @private
         */
        _setLayout: function (notSetScrolling) {
            this._setStyleWidth();
            //重设题头高度
            if (this.options.fixcolumnnumber || !this.options.titleellipsis) {
                this._setTheadHeight();
            }

            if(this.autoHeight){
                this._setAutoHeight();
            }

            this._setStyleHeight();

            if (!notSetScrolling) {
                this._isScrolling();
            }

        },
        /**
         * 题头允许换行时需要调用
         * @private
         */
        _setTheadHeight: function () {
            this.gridHead.css("height", "auto");
            var newTheadHeight = this.theadHeight = this.gridHead.height(),
                domFixed0      = this.domFixed[0],
                isQm = this.isQm;
            this.boxHeight      = this.gridHeight - this.paginationHeight - newTheadHeight - 1;
            this.gridOverlay.css("height", newTheadHeight);
            for (var i = domFixed0.length; i--;) {
                var domFixed0I = domFixed0[i],
                    div = $(domFixed0I).parent(),
                    thHeight = parseInt(div.parent().height(), 10),
                    paddingTop = parseInt((thHeight - (div.height() || 21)) / 2, 10);
                paddingTop = paddingTop < 0 ? 0 : paddingTop;
                domFixed0I.style.paddingTop = paddingTop + "px";
                domFixed0I.style.height = thHeight - (isQm ? 0 : (paddingTop + 1)) + "px";
            }
        },
        /**
         * 设置持久化数据
         * @param {String} config
         */
        setConfig: function (config) {
            if (this.persistence && this.unRender) {
                this._setPersistence(config);
            }
            this.options.datasource(this, this.getQuery());
        },
        /**
         * 加载数据
         */
        setDatasource: function (data, totalSize, persistenceConf) {
            if (this.persistence && this.unRender && typeof persistenceConf === "string") {
                this._setPersistence(persistenceConf);
            }
            data = data || [];
            totalSize = totalSize || 0;
            this.rowSize = data.length;
            this.data = $.extend(true, [], data);
            //处理分页
            if (this.options.pagination) {
                this.totalSize = totalSize;
                //第一次渲染,加载分页
                if (this.unRender) {
                    this.__createPagination();
                } else {
                    this._changepages();
                }
            }
            this._isEmpty();
            //渲染开始
            this._initProperty();
            this._renderTbody(NaN, NaN);

            this._loading("hide");
            this._loadComplateCallBack();
            this.__setSortStyle();

            if(this.autoHeight && typeof this.options.resizewidth === "function") {
                this.resize();
                this._setLayout();
            } else {
                this._setLayout();
            }
            delete this.unRender;
        },
        /**
         * 持久化还原设置
         * @private
         */
        _setPersistence : function (conf) {
            var json,
                opts = this.options,
                colSize = this.colSize,
                index, sortName,sortType, hide, width, i;
            if (typeof conf === "string") {
                try {json = $.parseJSON(conf);} catch(e) {}
                if (json) {
                    if (json.overall) {
                        this.tableWidth = json.overall;
                        this.gridHeadTable.css("width", this.tableWidth);//是否要设置table的宽度
                    }
                    index = json.index;
                    if (this.theadMap.length === 0 && opts.colmove &&
                        typeof index === "object" && colSize === index.length) {
                        this.colIndex = index;
                        this._sortPropertys(index);
                    }
                    this._createPropertys();
                    sortName = json.sortName;
                    sortType = json.sortType;
                    if ($.type(sortName) === "array" && $.type(sortType) === "array") {
                        this.setQuery({
                            sortName : sortName,
                            sortType : sortType
                        });
                    }
                    hide = json.hide;
                    if (typeof hide === "object" && colSize === hide.length) {
                        for (i = 0; i < colSize; i ++) {
                            hide[i] = !!hide[i];
                        }
                        this.colHidden = hide;
                    }
                    width = json.width;
                    if (!opts.adaptive && typeof width === "object" &&
                        colSize === width.length) {//自适应模式下，不支持列宽持久化。
                        this.colWidth = width;
                    }
                } else {
                    this._createPropertys();
                }
            } else {
                this._createPropertys();
            }
            this._createContent();
        },
        /**
         * 持久化设置排序
         * @private
         */
        _sortPropertys: function (index) {
            var colSize = this.colSize, thsBox,
                domTh, newDomTh, i;
            domTh = this.domTh;
            newDomTh = [];
            thsBox = domTh[0].parentNode;
            for (i = 0; i < colSize; i++) {
                newDomTh[i] = domTh[index[i]];
                thsBox.appendChild(newDomTh[i]);
            }
            this.domTh = newDomTh;
        },
        /**
         * 是否数据是空
         * @private
         */
        _isEmpty: function () {
            var opts = this.options;
            var rowSize = this.rowSize;
            //判断是否显示分页

            if (rowSize === 0) {
                this.gridEmpty.show();
                this.gridTfoot.hide();
                this.paginationHeight = 0;
                var self = this;
                this.gridTableBoxTimer=setTimeout(function(){
                    try{
                        self.gridTableBox.hide();
                    }catch(e){}
                },10);
            } else {
                this.gridEmpty.hide();
                this.gridTableBox.show();
                clearTimeout(this.gridTableBoxTimer);
                if (opts.pagination) {
                    this.gridTfoot.show();
                    this.paginationHeight = 41;
                }
            }
            //根据分页 重设boxHeight
            this.boxHeight = this.gridHeight - this.paginationHeight - this.theadHeight;
        },
        /**
         * 重载数据,需要初始化属性
         * @private
         */
        _initProperty: function () {
            var self = this,
                gridTbody,
                hasTrs = this.domTr.length > 0;
            setTimeout(function () {
                try{
                    self.gridBody[0].scrollTop = 0;
                }catch(e){
                }
            }, 1);
            this.gridTableBox.removeAttr("style");
            this.heightLight     = [];
            this.domTr           = [];
            this.domTd           = [];
            this.domFixed.length = 1;
            this.multiChecked    = [];
            this.multiCheckedNum= 0;
            this.singleChecked   = NaN;
            this.disabledIndex = [];
            this.odd              = false;
            this.endRow          = 0;
            this.renderComplete  = false;
            if (this.gridAllCheck) {
                this.gridAllCheck.removeClass("grid-all-checkbox-checked");
            }
            if (hasTrs) {
                this.el[0].removeChild(this.gridTbody[0]);
                gridTbody = document.createElement("tbody");
                this.el[0].appendChild(gridTbody);
                this.gridTbody = $(gridTbody);
            }
            //this.gridTbody.html("");
            //大数据量的两个参数
            this.trStart = 0;
            this.trEnd = 0;
        },
        /**
         * 载入数据
         */
        loadData: function () {
            this._loading("show");
            this.options.datasource(this, this.getQuery());
        },
        /**
         * 追加数据
         * @public
         */
        addData: function (data, position) {
            if ($.type(data) === "object") {
                data = [data];
            }
            var len = data.length,
                opts = this.options,
                disabledIndex = this.disabledIndex;
            if (len === 0) {
                return;
            }
            data = $.extend(true, [], data);
            if (this.unRender) { //如果未 setDatasource过.
                this.setDatasource(data);
                return;
            }
            var selectrows  = opts.selectrows;
            if (typeof position === "number" && position < this.rowSize) {
                this._spliceArray(this.data, position, data);
                if (opts.primarykey && disabledIndex.length) {
                    this._spliceArray(disabledIndex, position, new Array(len));
                }
                if (selectrows === "multi") {
                    this._spliceArray(this.multiChecked, position, new Array(len));
                } else if (selectrows === "single" && position < this.singleChecked) {
                    this.singleChecked += len;
                }
            } else {
                this.data = this.data.concat(data);
            }
            this.rowSize += len;
            this._isEmpty();
            this._renderTbody(len, position);
            if (this.paginationObj) {
                this._changepages();
            }

            var adddataCallback = opts.adddata_callback;
            if (typeof adddataCallback === "function") {
                adddataCallback.call(this, data);
            }
            if(this.autoHeight && typeof opts.resizewidth === "function") {
                this.resize();
            } else {
                this._setLayout();
            }
        },
        setPagerText:function(text){
            if(typeof text==="string"){
                this.customerText =text;
            }
        },
        /**
         * 渲染分页
         * @private
         */
        __createPagination: function () {
            var opts = this.options,
                query = this.query;
            if (!opts.pagination) {
                return;
            }
            var self = this;
            window.cui(this.gridTfoot).pagination({
                count         : this.totalSize,
                pagesize      : query.pageSize,
                pageno        : query.pageNo,
                pagesize_list : opts.pagesize_list,
                tpls          : {pagination: opts.pagination_model},
                cls           : opts.pagination_model,
                customerText  : this.customerText,
                custom_pagesize: query.custom_pagesize,
                on_page_change: function (pageno, pagesize) {
                    query.pageNo = pageno;
                    query.pageSize = pagesize;
                    self.loadData();
//                    self._changepages();
                }
            });
            this.paginationObj = window.cui(this.gridTfoot);
        },
        /**
         * 翻页事件
         * @private
         */
        _changepages: function () {
            var query = this.query;
            this.paginationObj.setInitData({
                custom_pagesize:query.custom_pagesize,
                count : this.totalSize,
                pagesize : query.pageSize,
                pageno   : query.pageNo
            });
            this.paginationObj.reDraw();
        },
        /**
         * 中间插入数组
         * @private
         */
        _spliceArray: function (source, position, target) {
            Array.prototype.splice.apply(source, [position, 0].concat(target));
            return source;
        },
        /**
         * 渲染tbody
         * @private
         */
        _renderTbody: function (addSize, position) {
            var data        = this.data,
                endRow     = this.endRow,
                rowSize    = this.rowSize,
                renderRows = parseInt(this.boxHeight / 28, 10) + 20,
                ellipsis    = this.options.ellipsis;
            if (rowSize === 0) {
                this.renderComplete      = true;
                this.appendRowsComplete = true;
                return;
            }
            this.renderComplete = false;
            if (!isNaN(addSize)) {
                //全选取消选中
                if (this.gridAllCheck) {
                    this.gridAllCheck.removeClass("grid-all-checkbox-checked");
                }
                if (typeof position === "number" && position < endRow) {
                    //中间插入行
                    //删除index属性.
                    var domTr = this.domTr;
                    for (var j = position; j < endRow; j += 1) {
                        domTr[j].removeAttribute("index");
                    }
                    var positionTr = domTr[position],
                    //获取dom
                        dom = this._dataToDom(data, position, position + addSize),
                        addTr = dom.domTr;
                    this._spliceArray(this.domTr, position, addTr);
                    this._spliceArray(this.domTd, position, dom.domTd);
                    this._spliceArray(this.domFixed, position + 1, dom.domFixed);
                    //插入dom
                    if (position >= this.trStart && position < this.trEnd || !ellipsis) {
                        var gridTbody = this.gridTbody[0];
                        for (var i = 0; i < addSize; i += 1) {
                            gridTbody.insertBefore(addTr[i], positionTr);
                        }
                        if (ellipsis) {
                            this.trEnd += addSize;
                        }
                    } else {
                        if (position < this.trStart && ellipsis) {
                            this.trStart += addSize;
                            this.trEnd += addSize;
                        }
                        var trFrag = this.trFrag;
                        for (var k = 0; k < addSize; k += 1) {
                            trFrag.appendChild(addTr[k]);
                        }
                    }
                    this.endRow += addSize;
                    this._setAutoHeight();
                    this._setOddEven(position);
                    this._setNum(position);
                } else {
                    this._lazyload();
                }
            } else {
                var end = Math.min(rowSize, endRow + renderRows + 1);
                if (ellipsis) {
                    this.trEnd = end;
                }
                this._appendRows(endRow, end);
            }
        },
        /**
         * 渲染完成回调
         * @private
         */
        _loadComplateCallBack: function () {
            var loadcomplateCallback = this.options.loadcomplate_callback;
            if (typeof loadcomplateCallback === "function") {
                loadcomplateCallback.call(this, this);
            }
        },
        /**
         * 设置排序样式
         * @private
         */
        __setSortStyle: function () {
            var query = this.query,
                sortType = query.sortType,
                sortName = query.sortName,
                len = sortName.length,
                bindName     = this.bindName,
                domTh        = this.domTh,
                i, j, domThJ, bindNameJ, className,
                sortStr = {"DESC":"desc", "ASC" : "asc"};
            loopOuter:for (j = this.colSize; j--;) {
                bindNameJ = bindName[j];
                //如果是选择列，则跳出
                if(bindNameJ === -1){
                    continue loopOuter;
                }
                domThJ = $(domTh[j]);
                domThJ.find("span > b").hide();
                for (i = 0; i < len; i++) {
                    if (sortName[i] === bindNameJ) {
                        domThJ.find(".grid-sort-icon-" + sortStr[sortType[i]].toLocaleLowerCase()).show();
                        continue loopOuter;
                    }
                }
            }
        },
        /**
         * data转换成每一行的dom
         * @param data
         * @param start
         * @param end
         * @returns {{domTd: Array, domTr: Array, domFixed: Array}}
         * @private
         */
        _dataToDom: function (data, start, end) {
            var opts                = this.options,
                oddEvenClass        = this.oddEvenClass,
                oddevenrow          = opts.oddevenrow,
                ellipsis            = opts.ellipsis,
                colSize            = this.colSize,
                domTh              = this.domTh,
                tdsPackage         = this.tdsPackage,
                bindName           = this.bindName,
                bindDotName       = this.bindDotName,
                fixcolumnnumber     = opts.fixcolumnnumber,
                numCol             = this.numCol,
            //单元格内容渲染
                colRender          = this.colRender,
            //样式渲染
                rowstylerender      = opts.rowstylerender,
                colstylerender      = opts.colstylerender,
                rowstylerenderAble = typeof rowstylerender === "function",
                colstylerenderAble = typeof colstylerender === "function",
                renderMethod       = this.renderMethod,
                heightLight        = this.heightLight,
                colStart           = (this.selectrowsClass !== "") ? 1 : 0,
                odd                 = this.odd,
                primarykey          = opts.primarykey,
                ispk                = typeof data[0] === "object" && data[0].hasOwnProperty(primarykey),
                createDomBox      = this.createDomBox,
                table = ['<table>'];
            for (var j = start; j < end; j += 1) {
                table.push('<tr class="');
                if (oddevenrow) {
                    if (odd) {
                        table.push(oddEvenClass);
                    }
                    odd = !odd;
                }
                if (heightLight[j]) {
                    table.push(" grid-highlight");
                }
                table.push('"');
                var dataJ = data[j];
                if (ispk && dataJ.hasOwnProperty(primarykey)) {
                    table.push(' pkey="');
                    table.push(String(dataJ[primarykey]));
                    table.push('"');
                }
                if (rowstylerenderAble) {
                    var rowstyle = rowstylerender(dataJ);
                    if (typeof rowstyle === "string") {
                        table.push(' style="', rowstyle, '"');
                    }
                }
                table.push('>');
                if (colStart === 1) {
                    var tdsPackage0 = tdsPackage[0];
                    table.push('<td class="grid-select-input ');
                    if (fixcolumnnumber > 0) {
                        table.push('grid-fixed');
                        table.push('" style="', tdsPackage0.style, '">', tdsPackage0.html, '</td>');
                    } else {
                        table.push(tdsPackage0.className);
                        table.push('" style="', tdsPackage0.style, '"></td>');
                    }

                }
                var tdsPackageI   = "",
                    colstyle        = "",
                    bindNameI     = "",
                    bindDotNameI = "",
                    value           = "",
                    tmpValue    =    "",
                    render          = "",
                    colRenderI    = null,
                    colRenderI0  = null,
                    colRenderI1  = null,
                    colJson        = null;
                for (var i = colStart; i < fixcolumnnumber; i += 1) {
                    bindNameI = bindName[i];
                    bindDotNameI = bindDotName[i];
                    //渲染文字
                    if (numCol === i) {
                        value = j + bindNameI;
                    } else {
                        if (!bindNameI) {
                            value = "";
                        } else {
                            if (typeof bindDotNameI === "undefined") {
                                value = dataJ[bindNameI];
                            } else {
                                value = dataJ[bindDotNameI[0]];
                                if (value && typeof value === "object") {
                                    value = value[bindDotNameI[1]] || "";
                                } else {
                                    value = "";
                                }
                            }
                        }
                    }
                    
                    //value = C.String.htmlEncode(value, opts.XSSDefense);

                    var tagHtml   = "", method = "";
                    colRenderI   = colRender[i];
                    colRenderI0 = colRenderI[0];
                    colRenderI1 = colRenderI[1];
                    if (colRenderI1) {
                        value = colRenderI1.callback(value, colRenderI1.format) || value;
                    }
                    if (colRenderI0) {
                        render = colRenderI0.render;
                        method = colRenderI0.method;
                        switch (render) {
                            case "colrenderFn" :
                                value = colRenderI0.callback(dataJ, bindNameI) || value;
                                break;
                            case "renderFn" :
                                colJson = colRenderI0.colJson;
                                colJson.el = domTh[i];
                                colJson.bindName = bindNameI;
                                value = colRenderI0.callback(dataJ, j, colJson) || value;
                                break;
                            case "fiexdFn" :
                                value = renderMethod[method](dataJ, colRenderI0.options, value) || value;
                                break;
                        }
                    }
                    value =replaceScript(value);
                    if (method === "button" || ellipsis) {
                        tagHtml = [value, "</span>"].join("");
                    } else {
                        tagHtml = [value, "</span>", value].join("");
                    }
                    tdsPackageI = tdsPackage[i];
                    var html = tdsPackageI.html.replace("<!---->", tagHtml);
                    table.push('<td class="grid-fixed" style="', tdsPackageI.style, '">');
                    if (colstylerenderAble) {
                        colstyle = colstylerender(dataJ, bindNameI);
                        if (typeof colstyle === "string") {
                            html = html.replace("/**/", colstyle);
                        }
                    }
                    table.push(html, '</td>');
                }
                for (; i < colSize; i += 1) {
                    bindNameI = bindName[i];
                    bindDotNameI = bindDotName[i];
                    tdsPackageI = tdsPackage[i];
                    if (numCol === i) {
                        value = j + bindNameI;
                    } else {
                        if (!bindNameI) {
                            value = "";
                        } else {
                            if (typeof bindDotNameI === "undefined") {
                                value = dataJ[bindNameI];
                            } else {
                                value = dataJ[bindDotNameI[0]];
                                if (value && typeof value === "object") {
                                    value = value[bindDotNameI[1]] || "";
                                } else {
                                    value = "";
                                }
                            }
                        }
                    }
                    
                    //value = C.String.htmlEncode(value);

                    colRenderI   = colRender[i];
                    colRenderI0 = colRenderI[0];
                    colRenderI1 = colRenderI[1];
                    if (colRenderI1) {
                        tmpValue = colRenderI1.callback(value, colRenderI1.format);
                        value = (tmpValue === null || tmpValue === undefined) ? value : tmpValue;
                    }
                    if (colRenderI0) {
                        render = colRenderI0.render;
                        switch (render) {
                            case "colrenderFn" :
                                tmpValue = colRenderI0.callback(dataJ, bindNameI);
                                value = (tmpValue === null || tmpValue === undefined) ? value : tmpValue;
                                break;
                            case "renderFn" :
                                colJson          = colRenderI0.colJson;
                                colJson.el       = domTh[i];
                                colJson.bindName = bindNameI;
                                tmpValue         = colRenderI0.callback(dataJ, j, colJson);
                                value            = (tmpValue === null || tmpValue === undefined) ? value : tmpValue;
                                break;
                            case "fiexdFn" :
                                tmpValue = renderMethod[colRenderI0.method](dataJ, colRenderI0.options, value);
                                value = (tmpValue === null || tmpValue === undefined) ? value : tmpValue;
                                break;
                        }
                    }
                    //绑定td样式
                    var tdStyle = tdsPackageI.style;
                    if (colstylerenderAble) {
                        colstyle = colstylerender(dataJ, bindNameI);
                        if (typeof colstyle === "string") {
                            tdStyle += ";" + colstyle;
                        }
                    }
                    value =replaceScript(value);
                    table.push('<td style="', tdStyle, '">', value, '</td>');
                }
                table.push('</tr>');
            }
            this.odd = odd;
            table.push('</table>');

            createDomBox.innerHTML = table.join("");
            var domTr           = [],
                domTd           = [],
                domFixed        = [],
                selectedRowClass = " " + this.selectedRowClass,
                disableIndex = this.disabledIndex,
                multiChecked    = this.multiChecked,
                singleChecked   = this.singleChecked,
                domTable        = createDomBox.getElementsByTagName("table")[0];
            for (var m = 0, len = end - start; m < len; m += 1) {
                var domTrM = domTable.rows[m];
                domTr.push(domTrM);
                var domTdM = [];
                var domFixedM = [];
                for (var n = 0; n < colSize; n += 1) {
                    var domThN = domTrM.cells[n];
                    domTdM.push(domThN);
                    if (n < fixcolumnnumber) {
                        domFixedM.push(domThN.getElementsByTagName("span")[0]);
                    }
                }
                if (disableIndex[m + start]) {
                    domTrM.addClass("grid-disable-row");
                } else if (multiChecked[m + start]) {
                    domTrM.className += selectedRowClass;
                    //因为此版本已经不存在checkbox，所以要把下面代码删除掉
                    //domTrM.cells[0].getElementsByTagName("input")[0].setAttribute("checked", "checked");
                }
                domTd.push(domTdM);
                domFixed.push(domFixedM);
            }
            if (!isNaN(singleChecked) &&
                singleChecked >= start &&
                singleChecked < end && !disableIndex[singleChecked]) {
                var selectRow = domTable.rows[singleChecked - start];
                selectRow.className += selectedRowClass;
                //因为此版本已经不存在checkbox，所以要把下面代码删除掉
                //selectRow.cells[0].getElementsByTagName("input")[0].setAttribute("checked", "checked");
            }
            return {
                domTd: domTd,
                domTr: domTr,
                domFixed: domFixed
            };

        },
        /**
         * 后面插入行
         * @param start
         * @param end
         * @private
         */
        _appendRows: function (start, end) {
            var rowSize   = this.rowSize;
            if (this.autoHeight || !this.options.lazy) {
                end = rowSize;
            }
            end            = this.endRow = Math.min(rowSize, end);
            var dom        = this._dataToDom(this.data, start, end);
            this.domTr    = this.domTr.concat(dom.domTr);
            this.domTd    = this.domTd.concat(dom.domTd);
            this.domFixed = this.domFixed.concat(dom.domFixed);
            var domTr     = this.domTr;
            var gridTbody = this.gridTbody[0];
            for (var i = start; i < end; i += 1) {
                gridTbody.appendChild(domTr[i]);
            }
            this.gridTableBox.css("paddingBottom", (rowSize - end) * 28);
            this.renderComplete = end === rowSize;
            this.appendRowsComplete = true;
            this._setAutoHeight();
        },
        /**
         * 重新设置奇数偶数行样式
         * @private
         */
        _setOddEven: function (position) {
            var opts         = this.options;
            if (!opts.oddevenrow) {
                return;
            }
            var domTr       = this.domTr,
                endRow      = this.endRow,
                oddEvenClass = this.oddEvenClass,
                odd          = this.odd = position % 2 === 0,
                i            = position;
            for (; i < endRow; i += 1) {
                if (!odd) {
                    $(domTr[i]).addClass(oddEvenClass);
                } else {
                    $(domTr[i]).removeClass(oddEvenClass);
                }
                odd = !odd;
            }
        },
        /**
         * 重设行号
         * @private
         */
        _setNum: function (position) {
            if (isNaN(this.numCol)) {
                return;
            }
            var domTd    = this.domTd,
                domFixed = this.domFixed,
                numCol   = this.numCol,
                start     = this.bindName[numCol],
                i         = position,
                endRow   = this.endRow;
            if (this.options.fixcolumnnumber > numCol) {
                for (; i < endRow; i += 1) {
                    var domFixedI = domFixed[i + 1][numCol];
                    var value = i + start;
                    domFixedI.innerHTML = value;
                    if(domFixedI.nextSibling){
                        domFixedI.nextSibling.nodeValue = value;
                    }
                }
            } else {
                for (; i < endRow; i += 1) {
                    domTd[i][numCol].innerHTML = i + start;
                }
            }
        },
        /**
         * 隐藏列
         * @param hideBindName
         */
        hideCols: function (hideBindName) {
            if ($.type(hideBindName) !== "object") {
                return;
            }
            var colHidden = this.colHidden,
                colSize   = this.colSize,
                bindName  = this.bindName;
            for (var i = 0; i < colSize; i += 1) {
                var falg = hideBindName[bindName[i]];
                if (typeof falg === "boolean") {
                    colHidden[i] = falg;
                }
            }
            this._colHidden(false);
        },
        disableColFilter:function(opt){
            if ($.type(opt) !== "object") {
                return;
            }
            var  bindName =this.bindName,
                colSize = this.colSize,
                disabled =this.disabled,
                index=[], i, j=bindName[0]===-1?1: 0,
                domA =this.hideCol.domA;
            for(i=0;i<colSize;i++){
                var flag = opt[bindName[i]];
                if(typeof flag==="boolean"){
                    index.push({index:i-j,dis:flag});
                    disabled[i]=flag?"true":null;
                }
            }
            for(i=0;i<index.length;i++){
                if(index[i].dis){
                    $(domA[index[i].index]).addClass("grid-hide-disabled");
                }else{
                    $(domA[index[i].index]).removeClass("grid-hide-disabled");
                }
            }
        },
        /**
         * 获取查询参数
         */
        getQuery: function () {
            var newQuery = $.extend(true, {}, this.query),
                customQuery = this.customQuery;
            if (!customQuery) {
                return newQuery;
            }
            customQuery.pageSize = newQuery.pageSize;
            customQuery.pageNo = newQuery.pageNo;
            customQuery.sortName = $.extend([], newQuery.sortName);
            customQuery.sortType = $.extend([], newQuery.sortType);
            return customQuery;
        },
        /**
         * 设置查询参数
         * @param query
         */
        setQuery: function (query) {
            if (typeof query === "object") {
                this.customQuery = query;
            }
            query         = query || this.backupQuery;
            var sortstyle = this.options.sortstyle,
                newQuery = this.query;
            if (typeof query.pageSize === "number") {
                newQuery.pageSize = query.pageSize;
            }
            if (typeof query.pageNo === "number") {
                newQuery.pageNo = query.pageNo;
            }
            if ($.type(query.sortName) === "array") {
                newQuery.sortName = $.extend([], query.sortName);
                if (newQuery.sortName.length > sortstyle) {
                    newQuery.sortName.length = sortstyle;
                }
            }
            if ($.type(query.sortType) === "array") {
                newQuery.sortType = $.extend([], query.sortType);
                if (newQuery.sortType.length > sortstyle) {
                    newQuery.sortType.length = sortstyle;
                }
            }
//            this._setPageSize();
            this._setSortTypeObj();
        },
        /**
         * 内部用的设置高度
         * @param height
         * @private
         */
        _setHeight: function (height) {
            if (typeof height !== "number"){// || height - 2 === this.gridHeight) {
                return false;
            }
            height          -= 1;
            this.boxHeight -= this.gridHeight - height;
            this.gridHeight = height;
            //this.isIttab = false;
            //高度改变,触发延迟加载
            this._lazyload();
            //this._setLayout();
            if (this.options.colhidden && this.hideCol.hideCol) {
                this.hideCol.hideCol.blur();
            }
            return true;
        },
        /**
         * 设置组件高度
         */
        setHeight: function (height) {//这个函数 要考虑分页部分的高度.
            this.autoHeight = !this._setHeight(height);
            this._setLayout();
        },
        /**
         * 设置组件宽度
         */
        setWidth: function (width) {
            if (typeof width !== "number" || width - 2 === this.gridWidth) {
                return;
            }
            var ittab = this.ittab; //修复IE下面出现滚动条，触发resize的bug
            if (ittab && ittab.ittabActive) {
                return;
            }
            width -= 2;
            if (this.options.adaptive) {
                this.tableWidth = width - 17;
                this.isIttab = false;
            }
            this.gridWidth = width;
            this._setLayout();
            if (this.options.colhidden && this.hideCol.hideCol) {
                this.hideCol.hideCol.blur();
            }
        },
        /**
         * 设置行高亮
         * @param pk
         * @param flag
         */
        setHighLight: function (pk, flag) {
            var primarykey = this.options.primarykey,
                data = this.data,
                endRow = this.endRow;
            if (data[0] && data[0].hasOwnProperty(primarykey)) {
                for (var j = this.rowSize; j--;) {
                    if (data[j][primarykey] === pk) {
                        if (j < endRow) {
                            if (flag !== false) {
                                $(this.domTr[j]).addClass("grid-highlight");
                            } else {
                                $(this.domTr[j]).removeClass("grid-highlight");
                            }
                        }
                        this.heightLight[j] = flag !== false;
                        break;
                    }
                }
            }
        },
        /**
         * 通过序列选择行
         * @param index
         * @param flag
         * @returns {Array}
         */
        selectRowsByIndex: function (index, flag) {
            flag = flag !== false;
            var opts = this.options,
                selectrows = opts.selectrows,
                data = this.data,
                ret = [],
                index0, indexI,
                disabledIndex = this.disabledIndex;
            if (selectrows === "no" || index >= this.rowSize) {
                return [];
            }
            if (flag !== false) {
                flag = true;
            }
            if (typeof index === "number") {
                index = [index];
            }
            if (selectrows === "single") {
                index0 = index[0];
                if (index0 > -1 && !disabledIndex[index0]) {
                    this._selectRows(index0, flag);
                    ret.push(data[index0]);
                }
            } else {
                for (var i = 0, len = index.length; i < len; i += 1) {
                    indexI = index[i];
                    if (!disabledIndex[i]) {
                        this._selectRows(indexI, flag);
                        ret.push(data[indexI]);
                    }
                }
            }
            return ret;
        },
        /**
         * 通过主键获取行号
         * @param pks
         * @param getInvalid
         * @returns {Array}
         * @private
         */
        _pkToIndex: function (pks, getInvalid) {
            var data = this.data,
                rowSize = this.rowSize,
                primarykey = this.options.primarykey;
            if (data[0].hasOwnProperty(primarykey) === false || pks === undefined) {
                return [];
            }
            if ($.type(pks) !== "array") {
                pks = [pks];
            }
            var len = pks.length;
            var indexs = [];
            for (var i = 0; i < len; i += 1) {
                var pksI = pks[i],
                    hasVal = false;
                for (var j = rowSize; j--;) {
                    if (data[j][primarykey] === pksI) {
                        indexs.push(j);
                        hasVal = true;
                        break;
                    }
                }
                if (!hasVal && getInvalid) {
                    indexs.push(-1);
                }
            }
            return indexs;
        },
        /**
         * 根据主键查找索引号
         * @param pk
         */
        getIndexByPk: function (pk) {
            if (pk === undefined) {
                return;
            }
            return this._pkToIndex(pk, true)[0];
        },

        /**
         * 通过主键选择行
         * @param pks
         * @param flag
         * @returns {*}
         */
        selectRowsByPK: function (pks, flag) {
            var opts = this.options;
            if ("array string number".indexOf($.type(pks)) === -1 ||
                opts.selectrows === "no" || !this.rowSize ||
                this.data[0].hasOwnProperty(opts.primarykey) === false) {
                return [];
            }
            return this.selectRowsByIndex(this._pkToIndex(pks, true), flag);
        },
        /**
         * 禁用pk为啥啥啥的不能被选择，选中的便取消。
         * @param pks
         * @param flag
         */
        disableRows: function (pks, flag) {
            var
                opts = this.options,
                type = $.type(pks),
                indexs, indexsI,
                i, len,
                domTr, tr,
                disabledIndex = this.disabledIndex;
            if ("array string number".indexOf(type) === -1 ||
                opts.selectrows === "no" || !this.rowSize ||
                this.data[0].hasOwnProperty(opts.primarykey) === false) {
                return;
            }
            flag = flag === undefined ? true : flag;
            if (flag) {
                this.selectRowsByPK(pks, false);
            }

            indexs = this._pkToIndex(pks, false);

            domTr = this.domTr;
            for (i = 0, len = indexs.length; i < len; i++) {
                indexsI = indexs[i];
                tr = $(domTr[indexsI]);
                if (flag) {
                    tr.addClass("grid-disable-row");
                } else {
                    tr.removeClass("grid-disable-row");
                }
                disabledIndex[indexsI] = flag;
            }
        },

        /**
         * 删除行操作.
         */
        _removeRow: function (row) {
            var data = this.data;
            var removeData = data[row];
            this.data.splice(row, 1);
            $(this.domTr[row]).remove();
            this.domTr.splice(row, 1);
            this.domTd.splice(row, 1);
            this.multiChecked.splice(row, 1);
            this.disabledIndex.splice(row, 1);
            if (this.singleChecked > row){
                this.singleChecked--;
            }
            this.domFixed.splice(row + 1, 1);
            return removeData;
        },
        /**
         * 删除行
         */
        removeData: function (rows) {
            if (typeof rows === "number" || $.type(rows) === "array") {
                if (typeof rows === "number") {
                    rows = [rows];
                }
                rows.sort(function (a, b) {
                    return a - b;
                });
                var len            = rows.length,
                    removeDatas   = [],
                    singleChecked = this.singleChecked,
                    multiChecked  = this.multiChecked,
                    opts           = this.options,
                    selectrows     = opts.selectrows,
                    ellipsis       = opts.ellipsis,
                    endRow = this.endRow;
                for (var i = 0; i < len; i += 1) {
                    var rowsI = rows[i] - i;
                    var thisRowSize = this.rowSize;
                    if (isNaN(rowsI) || rowsI >= thisRowSize) {
                        rows[i] = 0;
                        break;
                    }
                    this.rowSize = thisRowSize - 1;
                    if (rowsI < endRow) {
                        if (ellipsis) {
                            if (rowsI < this.trEnd) {
                                this.trEnd--;
                            }
                            if (rowsI < this.trStart){
                                this.trStart--;
                            }
                        }
                        this.endRow --;
                    }
                    //选中重设
                    if (selectrows === "multi") {
                        if (multiChecked[rowsI] === true) {
                            this.multiCheckedNum--;
                        }
                    } else if (selectrows === "single" && singleChecked === rowsI) {
                        this.singleChecked = NaN;
                    }
                    var removeData = this._removeRow(rowsI);
                    if (removeData) {
                        removeDatas.push(removeData);
                    }
                }
                var rowSize = this.rowSize;
                //判断是否需要跳转上一页
                if (rowSize <= 0) {
                    if (this.query.pageNo > 1) {
                        this.query.pageNo -= 1;
                    }
                    this.rowSize = 0;
                    this._isEmpty();
                } else {
                    //判断是否全选
                    if (opts.selectrows === "multi") {
                        if (this.multiCheckedNum === rowSize) {
                            this.gridAllCheck.addClass("grid-all-checkbox-checked");
                        } else {
                            this.gridAllCheck.removeClass("grid-all-checkbox-checked");
                        }
                    }
                    //重设index
                    var domTr = this.domTr;
                    for (var j = this.endRow; j--;) {
                        domTr[j].removeAttribute("index");
                    }
                    var rows0 = rows[0] - 0;
                    this._setOddEven(rows0);
                    this._setNum(rows0);
                    this._lazyload();
                }
                if(this.autoHeight && typeof this.options.resizewidth === "function") {
                    this.resize();
                } else {
                    this._setLayout();
                }
                //回调
                var removedataCallback = opts.removedata_callback;
                if (typeof removedataCallback === "function") {
                    removedataCallback.call(this, removeDatas);
                }
            }
        },
        removeDataByPk: function (pks) {
            this.removeData(this._pkToIndex(pks, false));
        },
        /**
         * 改变某行数据
         * @param newData
         * @param index
         */
        changeData: function (newData, index) {
            if ($.type(newData) !== "object") {
                return;
            }
            var opts = this.options,
                primarykey = opts.primarykey,
                pkValue = newData[primarykey];
            if (typeof pkValue !== "undefined") {
                var newIndex = this._pkToIndex(pkValue, false)[0];
                index = newIndex === undefined ? index : newIndex;
            }
            if (typeof index !== "number" || index < 0 || index >= this.rowSize) {
                return;
            }
            this.data[index] = $.extend(true, this.data[index], newData);
            if (index >= this.endRow) {
                return;
            }
            //获取dom
            var dom             = this._dataToDom([newData], 0, 1),
                newDomTd      = dom.domTd[0],
                oldDomTd      = this.domTd[index],
                bindName       = this.bindName,
                fixcolumnnumber = opts.fixcolumnnumber;
            //替换数据
            this.odd = !this.odd;
            for (var i = this.colSize; i--;) {
                var bindNameI = bindName[i],
                    oldTdI = $(oldDomTd[i]);
                oldTdI.removeAttr("title");
                if (i < fixcolumnnumber) {
                    if (typeof bindNameI !== "number") {
                        var oldSpan = oldTdI.find(".grid-fixed-s")[0];
                        var value    = $(newDomTd[i]).find(".grid-fixed-s")[0].innerHTML;
                        oldSpan.innerHTML = value;
                        if(oldSpan.nextSibling){
                            oldSpan.nextSibling.nodeValue = value;
                        }
                    }
                } else if (typeof bindNameI !== "number") {
                    oldTdI.html(newDomTd[i].innerHTML);
                }
            }
        },
        /**
         * 获取数据
         */
        getData: function () {
            return $.extend(true, [], this.data);
        },
        /**
         * 获取选中行数据集
         * @returns {Array}
         */
        getSelectedRowData: function () {
            var selectrows = this.options.selectrows;
            if (selectrows === "no") {
                return [];
            }
            var data = this.data;
            if (selectrows === "single") {
                return isNaN(this.singleChecked) ? [] : [data[this.singleChecked]];
            }
            if (this.multiCheckedNum === this.rowSize) {
                return this.data;
            }
            var multiChecked = this.multiChecked;
            var rowSize = this.rowSize;
            var ret = [];
            for (var i = 0; i < rowSize; i += 1) {
                if (multiChecked[i]) {
                    ret.push(data[i]);
                }
            }
            return ret;
        },
        /**
         * 获取选中行主键
         * @returns {Array}
         */
        getSelectedPrimaryKey: function () {
            var opts        = this.options,
                selectrows  = opts.selectrows,
                primarykey  = opts.primarykey,
                selectData = this.getSelectedRowData(),
                len         = selectData.length;
            if (selectrows === "no" ||
                !len ||
                selectData[0].hasOwnProperty(primarykey) === false) {
                return [];
            }
            var ret = [];
            for (var i = 0; i < len; i += 1) {
                ret.push(selectData[i][primarykey]);
            }
            return ret;
        },
        /**
         * 获取被选中的行数
         * @returns {Array}
         */
        getSelectedIndex: function () {
            var selectrows = this.options.selectrows;
            if (selectrows === "no") {
                return [];
            }
            if (selectrows === "single") {
                return [this.singleChecked];
            }
            var multiChecked = this.multiChecked;
            var rowSize = this.rowSize;
            var ret = [];
            for (var i = 0; i < rowSize; i += 1) {
                if (multiChecked[i]) {
                    ret.push(i);
                }
            }
            return ret;
        },
        /**
         * 通过索引号获取行数据
         * @param rows
         * @returns {*}
         */
        getRowsDataByIndex: function (rows) {
            var data = this.data;
            if (typeof rows === "number") {
                return [data[rows]];
            }
            if ($.type(rows) === "array") {
                var len = rows.length;
                var ret = [];
                for (var i = 0; i < len; i += 1) {
                    var dataI = data[rows[i]];
                    if (dataI) {
                        ret.push(dataI);
                    }
                }
                return ret;
            }
        },
        /**
         * 根据主键获取对象
         * @param pks
         * @returns {*}
         */
        getRowsDataByPK: function (pks) {
            var primarykey = this.options.primarykey;
            var data = this.data;
            if (data[0] && data[0].hasOwnProperty(primarykey)) {
                if ($.type(pks) !== "array") {
                    pks = [pks];
                }
                var len = pks.length;
                var ret = [];
                for (var i = 0; i < len; i += 1) {
                    var pksI = pks[i];
                    for (var j = this.rowSize; j--;) {
                        if (data[j][primarykey] === pksI) {
                            ret.push(data[j]);
                            break;
                        }
                    }
                }
                return ret;
            } else {
                return null;
            }
        },
        /**
         * 交换列
         * @param start
         * @param end
         */
        _switchCol: function (start, end) {
            var domHeadCol    = this.domHeadCol,
                domBodyCol    = this.domBodyCol,
                domTd          = this.domTd,
                domTh          = this.domTh,
                domFixed       = this.domFixed,
                domTr          = this.domTr,
                fixcolumnnumber = this.options.fixcolumnnumber,
                numCol         = this.numCol;
            //属性
            this._switchArrayValue(this.bindName, start, end);
            this._switchArrayValue(this.bindDotName, start, end);
            this._switchArrayValue(this.colIndex, start, end);
            this._switchArrayValue(this.theadText, start, end);
            this._switchArrayValue(this.renderStyle, start, end);
            this._switchArrayValue(this.colRender, start, end);
            this._switchArrayValue(this.colWidth, start, end);
            this._switchArrayValue(this.initColWidth, start, end);
            this._switchArrayValue(this.colWidthBackup, start, end);
            this._switchArrayValue(this.colHidden, start, end);
            this._switchArrayValue(this.tdsPackage, start, end);
            //排序列位置确定
            if (!isNaN(numCol)) {
                if (start === numCol) {
                    this.numCol = end - (start > end ? 0 : 1);
                } else if (start > numCol && end <= numCol){
                    this.numCol = numCol + 1;
                } else if (start < numCol && end > numCol) {
                    this.numCol = numCol - 1;
                }
            }
            //dom替换
            var domTdI = null;
            var i = this.endRow;
            var hideCol = this.hideCol;
            var domA = hideCol.domA;
            var gridHideColList = hideCol.gridHidecolList;
            if (end === this.colSize) {
                var domThStart = $(domTh[start]);
                domThStart.appendTo(domThStart.parent());
                var domBodyColStart = $(domBodyCol[start]);
                domBodyColStart.appendTo(domBodyColStart.parent());
                var domHeadColStart = $(domHeadCol[start]);
                domHeadColStart.appendTo(domHeadColStart.parent());
                for (; i--;) {
                    domTdI = domTd[i];
                    domTr[i].appendChild(domTdI[start]);
                    this._switchArrayValue(domTdI, start, end);
                }
                if (gridHideColList) {
                    if (this.selectrowsClass !== "") {
                        gridHideColList.appendChild(domA[start - 1]);
                    } else {
                        gridHideColList.appendChild(domA[start]);
                    }
                }
            } else {
                $(domTh[start]).insertBefore(domTh[end]);
                $(domBodyCol[start]).insertBefore(domBodyCol[end]);
                $(domHeadCol[start]).insertBefore(domHeadCol[end]);
                for (; i--;) {
                    domTdI = domTd[i];
                    domTr[i].insertBefore(domTdI[start], domTdI[end]);
                    this._switchArrayValue(domTdI, start, end);
                }
                if (gridHideColList) {
                    if (this.selectrowsClass !== "") {
                        gridHideColList.insertBefore(domA[start - 1], domA[end - 1]);
                    } else {
                        gridHideColList.insertBefore(domA[start], domA[end]);
                    }
                }
            }
            //dom变量
            this._switchArrayValue(domTh, start, end);
            if (start < fixcolumnnumber || end < fixcolumnnumber) {
                //配置固定列的zIndex
                var min = Math.min(start, end),
                    max = Math.max(start, end);
                fixcolumnnumber++;
                for (var j = 0, rowSize = this.rowSize + 1; j < rowSize; j++) {
                    this._switchArrayValue(domFixed[j], start, end);
                    for (var k = min; k <= max; k++) {
                        $(domFixed[j][k]).parent().css("zIndex", fixcolumnnumber - k);
                    }
                }
            }
            this._switchArrayValue(domBodyCol, start, end);
            this._switchArrayValue(domHeadCol, start, end);
            //持久化
            if (this.persistence) {
                this._triggerStatusChange();
            }
        },
        /**
         * 交换数组的值
         * @param arr
         * @param start
         * @param end
         * @private
         */
        _switchArrayValue: function (arr, start, end) {
            if (arr.length < end) {
                arr[end] = undefined;
            }
            if (start > end) {
                arr.splice(end, 0, arr.splice(start, 1)[0]);
            } else {
                arr.splice(end - 1, 0, arr.splice(start, 1)[0]);
            }
        },
        //列宽拖动
        ittab: {
            ittabActive: false,
            _init: function (self) {
                var that         = this,
                    gridOverlay = self.gridOverlay,
                    gridLine    = self.gridLine,
                    colwidth    = [],
                    start        = 0,
                    end          = 0,
                    reTrigger   = true,
                    index        = NaN,
                    adaptive     = self.options.adaptive;
                self.gridHeadTable.find(".grid-ittab").show();
                self.gridHeadTable.on("mousedown", function (event) {
                    var target = event.target;
                    end = 0;
                    if (target.className === "grid-ittab") {
                        colwidth = self.colWidth;
                        index     = self._thIndex($(target).parents("th")[0]);
                        gridOverlay.show().css("cursor", "col-resize");
                        var left  = gridOverlay.offset().left;
                        start     = event.pageX - left;
                        gridLine.show().css("left", start);
                        reTrigger = false;
                        gridOverlay.off("mousemove").on("mousemove", function (event) {
                            event.stopPropagation();
                            end = event.pageX - left;
                            if (colwidth[index] + end - start < 24) {
                                end = 24 + start - colwidth[index];
                            }
                            gridLine.css("left", end);
                            return false;
                        });
                    }
                    return false;
                });
                gridOverlay.on("mouseup mouseout", function () {
                    if (reTrigger || isNaN(index)) {
                        return;
                    }
                    reTrigger = true;
                    $(this).hide();
                    gridLine.hide();
                    if (end === 0) {
                        return;
                    }
                    var change            = end - start;
                    self.isIttab         = true;
                    self.colWidth[index] = colwidth[index] + change;
                    self.tableWidth      = self.tableWidth + change;
                    that.ittabActive = true;
                    self._setColWidthStyle(!adaptive ? index : undefined);
                    if (self.persistence) {
                        self._triggerStatusChange();
                    }
                    self._setLayout();
                    that.ittabActive = false;
                    start = end = 0;
                    index = NaN;
                });
            }
        },
        //隐藏列
        hideCol: {
            /**
             * 初始化
             * @param self
             * @private
             */
            _init: function (self) {
                var hideCol = this.hideCol = document.createElement("div"),
                    that = this;

                that.ban = 0;
                hideCol.className = "grid-hidecol";
                var theadHeight   = self.theadHeight;
                hideCol.style.top = theadHeight + "px";
                hideCol.tabIndex  = "1";
                //self.gridContainer.append(hideCol);
                $('body').append(hideCol);

                hideCol   = $(hideCol);

                var  text = $.extend(true, [], self.theadText),
                     disabled = $.extend(true, [], self.disabled),
                     colmax = self.options.colmaxheight;

                 if (self.selectrowsClass !== "") {
                     text = text.splice(1, text.length);
                     disabled = disabled.splice(1, text.length);
                 }

                 var html = '<div class="grid-hidecol-list" hidefocus="true" >';
                 
                if (colmax != 0) {
                    html += createColums(text, disabled, text.length);
                } else {
                    html += createList(text, disabled);
                }

                html +='</div>' + '<div class="grid-hidecol-button">' + 
                    '<a href="javascript:;" hidefocus="true" class="cui-button blue-button grid-hidecol-confirm">确定</a>' + 
                    '<a href="javascript:;" hidefocus="true" class="cui-button red-button grid-hidecol-cancel">取消</a>' + 
                    '</div>';

                hideCol.html(html);
                this.gridHidecolList = hideCol.find(".grid-hidecol-list")[0];
                this.domA             = this.gridHidecolList.getElementsByTagName("a");
                this.bindEvent(self, hideCol);

                function createColums(txtArr, disabledArr, len){
                    var colMaxHeight = C.Tools.fixedNumber(self.options.colmaxheight),
                        height = 0,
                        listMax = len,
                        col = 1,
                        text = txtArr,
                        disabled = disabledArr
                        html = '';

                    //如果设有最大高度，则度最大高度执行
                    switch (colMaxHeight){
                        case 'auto':
                            height = Math.max(self.boxHeight + self.paginationHeight - 50, 60);
                            $(that.hideCol).height(height);
                            break;
                        default :
                            //设置隐藏列下拉框高度
                            if(colMaxHeight && colMaxHeight >= 60){
                                height = colMaxHeight;
                            }
                    }
                    
                    listMax = (typeof height === 'number') ? (height / 28 | 0) : len;
                    col = Math.ceil(len / listMax);
                    $(that.hideCol).width(col * 130);

                    while(col--){
                        html += createList(text.splice(0, listMax), disabled.splice(0, listMax));
                    }
                    return html;
                }

                function createList(txtArr, disabledArr){
                    var listMax = txtArr.length,
                        i = 0,
                        str = '',
                        banHideHtml = '',
                        html = [];

                    for (; i < listMax; i += 1) {

                        str = $.trim(txtArr[i].replace(/<.*?>/g, ""));
                        if (disabledArr[i]) {
                            that.ban++;
                            banHideHtml = ' class="grid-hide-disabled"';
                        } else {
                            banHideHtml = '';
                        }
                        
                        html.push(
                            '<a href="javascript:;" hidefocus="true"', banHideHtml, ' title=',
                            str,
                            '>',
                            str,
                            '</a>'
                        );
                    }
                    return html.join('');
                }
            },
            /**
             * 事件绑定
             * @param self
             * @param obj
             */
            bindEvent: function (self, obj) {
                var that = this,
                    colSize = self.colSize,
                    gridBox = self.gridBox,
                    parent = null,
                    focus = false,
                    start = 0,
                    prevIndex = -1,
                    domA = this.domA,
                    span = document.createElement("span");
                if (self.selectrowsClass !== "") {
                    start += 1;
                }
                self.gridHeadTable.on("click", function (event) {
                    var target = $(event.target);

                    if (target.hasClass("grid-select")) {
                        if (parent) {
                            obj.blur();
                        }
                       
                        parent = target.parents("th").addClass("grid-thead-select");

                        var offsetLeft = target.offset().left;
                        var left = offsetLeft - 117;

                        if(left + $('.grid-hidecol').width() > $(document).width()){
                            left = $(document).width() - $('.grid-hidecol').width();
                        }
                        //超过左边界，或同时超过左右边界，对齐左边界
                        if(left < gridBox.offset().left){
                            left = gridBox.offset().left;
                        }

                        var height = obj.children(".grid-hidecol-list").css("height")
                        obj.children(".grid-hidecol-list").css("height", 28 * (colSize - that.ban) > height ? height : '');
                        //计算出hidecol中Top
                        var h =($(target).parents("tr").first().outerHeight() + $(target).outerHeight())/2 +1.5;
                        obj.css({"left": left, "top": target.offset().top + h}).show().focus().attr("hidefocus", "true");
                        reStart();
                        var index = self._thIndex(parent[0]) - start;
                        $(domA).removeClass("grid-hidecol-disabled");
                        $(domA[index]).addClass("grid-hidecol-disabled");
                        prevIndex = index;
                        focus = false;
                    } else {
                        $(obj).blur();
                    }
                });
                obj.on("blur", function () {
                    if (focus) {
                        obj.focus();
                        return;
                    }
                    if (parent) {
                        parent.removeClass("grid-thead-select");
                    }
                    $(obj).hide();
                });
                obj.on("mouseover", function () {
                    focus = true;
                });
                obj.on("mouseout", function () {
                    focus = false;
                });

                var hideCol = self.colHidden;
                obj.on("click", function (event) {
                    var target = $(event.target);
                    if (target.hasClass("grid-hidecol-confirm")) {
                        for (var i = start; i < colSize; i += 1) {
                            hideCol[i] = $(domA[i - start]).hasClass("grid-hidecol-nochecked");
                        }
                        focus = false;
                        self._colHidden(false);
                        $(this).blur();
                        if(comtop.Browser.isIE){
                            self._bugFix();
                        }
                        return false;
                    }
                    if (target.hasClass("grid-hidecol-cancel")) {
                        reStart();
                        focus = false;
                        $(this).blur();
                        return false;
                    }
                    if (target.prop("tagName") === "A") {
                        if (!target.hasClass("grid-hidecol-disabled")) {
                            target.toggleClass("grid-hidecol-nochecked");
                        }
                        return false;
                    }
                    this.focus();
                });

                function reStart () {
                    for (var j = start; j < colSize; j+=1) {
                        if(hideCol[j]) {
                            $(domA[j - start]).addClass("grid-hidecol-nochecked");
                        } else {
                            $(domA[j - start]).removeClass("grid-hidecol-nochecked");
                        }
                    }
                }
                setTimeout(reStart, 100);
            }
        },
        /**
         * 列拖动
         */
        moveCol: {
            _init: function (self) {
                //插入dom
                var gridColMoveInsert = $("<div></div>"),
                    gridColMoveTag    = $("<div></div>"),
                    gridHeadTable      = self.gridHeadTable.addClass("grid-col-move");
                gridColMoveInsert.addClass("grid-col-move-insert");
                gridColMoveTag.addClass("grid-col-move-tag");
                self.gridHead.append(gridColMoveTag).append(gridColMoveInsert);
                //获取属性
                var opts             = self.options,
                    gridOverlay     = self.gridOverlay,
                    fixcolumnnumber  = opts.fixcolumnnumber,
                    selectrowsClass  = self.selectrowsClass,
                    colHidden       = null,
                    fixedWidth      = 0,
                    insertPosition  = [],
                    mousePosition   = [],
                    index            = NaN,
                    complate         = NaN,
                    isFixed         = false,
                    moveTrigger     = true;
                gridHeadTable.on("mousedown", function (event) {
                    var target = $(event.target);
                    if (!target.hasClass("grid-fixed-s") || target.hasClass("grid-no-move")) {
                        return;
                    }
                    if (opts.colhidden) {
                        self.hideCol.hideCol.blur();
                    }
                    //获取属性
                    moveTrigger         = false;
                    colHidden           = self.colHidden;
                    var colwidth        = self.colWidth,
                        colSize         = self.colSize,
                        domTh           = self.domTh,
                        domFixed0      = self.domFixed[0],
                        headOffsetLeft = Math.round(gridHeadTable.offset().left),
                        scrollLeft      = self.gridScroll[0].scrollLeft,
                        end              = 0,
                    //获取当前th
                        height           = self.theadHeight,
                        parent           = target.parents('th');
                    index                = self._thIndex(parent[0]);
                    //计算各th的位置
                    fixedWidth          = 0;
                    insertPosition      = [];
                    mousePosition       = [];
                    var i = 0, colWidthI = null, position = 0, leftIndex = 0;
                    if (index < fixcolumnnumber) {
                        isFixed = true;
                        for (; i < fixcolumnnumber; i += 1) {
                            colWidthI = colwidth[i];
                            fixedWidth += colWidthI;
                            position = Math.round($(domFixed0[i]).offset().left) - headOffsetLeft - scrollLeft;
                            if (colHidden[i] === true) {
                                position = -100;
                            }
                            insertPosition.push(position);
                            mousePosition.push(position);
                            if (!colHidden[i]) {
                                mousePosition[i] = position + colWidthI / 2;
                            }
                        }
                        insertPosition.push(fixedWidth - scrollLeft);
                        mousePosition.push(fixedWidth - scrollLeft - 1);
                        if (selectrowsClass) {
                            insertPosition[0] = mousePosition[0] = -100;
                        }
                        leftIndex = insertPosition[index] - 1;
                    } else {
                        isFixed = false;
                        for (i = fixcolumnnumber; i < colSize; i += 1) {
                            colWidthI = colwidth[i];
                            position = Math.round($(domTh[i]).offset().left) - headOffsetLeft - scrollLeft;
                            if (colHidden[i] === true) {
                                position = -100;
                            }
                            insertPosition.push(position);
                            mousePosition.push(position);
                            if (!colHidden[i]) {
                                mousePosition[i - fixcolumnnumber] = position + colWidthI / 2;
                            }
                        }
                        insertPosition.push(self.tableWidth - scrollLeft);
                        mousePosition.push(self.tableWidth - scrollLeft - 1);
                        if (fixcolumnnumber === 0 && selectrowsClass) {
                            insertPosition[0] = mousePosition[0] = -100;
                        }
                        leftIndex = insertPosition[index - fixcolumnnumber] - 1;
                    }
                    //设置框位置和大小
                    gridColMoveTag.show().css({
                        left       : leftIndex,
                        width      : parent.width(),
                        height     : height - 1,
                        lineHeight : height - 1 + "px"
                    }).html(parent.find(".grid-thead-text").eq(0).html());
                    gridColMoveInsert.show().css("height", height - 5);
                    gridOverlay.show().css("cursor", "move");
                    var start = event.pageX;
                    //事件
                    gridColMoveInsert.css("left", -1000);
                    gridOverlay.off("mousemove").on("mousemove", function (event) {

                        event.stopPropagation();
                        end = event.pageX;
                        gridColMoveTag.css("left", leftIndex - start + end);
                        var len = mousePosition.length;
                        for (var i = 0; i < len; i += 1) {
                            var mousePositionI = mousePosition[i];
                            if (mousePositionI < 0) {
                                continue;
                            }
                            if (end < mousePositionI) {

                                gridColMoveInsert.css("left", insertPosition[i]);
                                if (isFixed) {
                                    complate = i;
                                } else {
                                    complate = i + fixcolumnnumber;
                                }
                                break;
                            }
                        }
                        return false;
                    });
                });
                gridOverlay.on("mouseup", function () {
                    if (moveTrigger) {
                        return;
                    }
                    moveTrigger = true;
                    gridOverlay.hide();
                    gridColMoveInsert.hide();
                    gridColMoveTag.hide();
                    if (isNaN(complate) || isNaN(index) || complate === index || complate === index + 1) {
                        return;
                    }
                    if (index > complate) {
                        self._switchCol(index, complate);
                        complate = index = NaN;
                        return;
                    }
                    for (var i = index + 1; i < complate; i += 1) {
                        if (!colHidden[i]) {
                            self._switchCol(index, complate);
                            complate = index = NaN;
                            break;
                        }
                    }

                });
                gridOverlay.on("mouseout", function () {
                    gridOverlay.hide();
                    gridColMoveInsert.hide();
                    gridColMoveTag.hide();
                    complate = index = NaN;
                });
            }
        },
        /**
         * 销毁
         */
        destroy: function(){
            var self = this,
                opts = self.options;
            self._super();
            $('.' + this.guid).remove();
        }
    });



    function gridMoveRowPlugin(self){
        this._self = self;
        this.options = $.extend({},this.constructor.defaults);
        this._init();
    }

    gridMoveRowPlugin.defaults={
        name:"GridMoveRowPlugin"
    }
    $.extend(gridMoveRowPlugin.prototype,{
        _init:function(){
            var that = this,self = this._self;
            self.el.on("mousedown.moveRow","tr",function(event){
                that._mouseDownEvent = event;
                $("body").addClass("cui-userselectnone").attr("unselectable","on").attr("onselectstart","javascript:return false;");
                self.el.on("mousemove.moveRow","tr",function(e){
                    if(that.__mouseStarted){
                        that._mouseDrag(e);
                        return e.preventDefault();
                    }
                    if(that._mouseDistanceMet(e)){
                        that.__mouseStarted = that._mouseStart(e);
                    }
                }).on("mouseup.moveRow","tr",function(e){
                        that._mouseStop(e);
                    });
            })
        },
        /**
         * 创建浮动层
         * @private
         */
        _createEmptyTr:function(){
            var that = this,self = this._self;
            var html ='<div style="width:'+self.tableWidth+'px;z-index:1000;cursor:move;background-color:#ffd398;height: 28px;position: absolute;opacity: .8;filter:alpha(opacity=80);-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(opacity=80)";">'+that._buildHtml(that.startData)+'</div>';
            this._Emptydom = $(html).appendTo(self.gridTableBox);
            this._Emptydom.css({left:$(self.gridTbody).offset().left-9});

            this._Emptydom.on("mouseup.moveRow",function(e){
                that._mouseStop(e);
            }).on("mousemove.moveRow",function(e){
                    that._mouseDrag(e);
                })
        },
        /**
         * 字符串替换函数,example:
         * var str = "{name},hello world!"
         * repalce(str,{name:"Tom"})
         * @param str
         * @param obj
         * @returns {*|replace|replace|replace|replace|XML}
         */
        repalce:function(str,obj){
            function getNestedValue(obj, prop) {
                var props = prop.split('.'); // split property names
                for (var i = 0; i < props.length; i++) {
                    if (typeof prop != "undefined") {
                        obj = obj[props[i]]; // go next level
                    }
                }
                return obj;
            }

            var out = str.replace(/{([^}]+)}/g, function(wholematch,firstmatch) {
                var value = getNestedValue(obj, firstmatch);
                return typeof value !== 'undefined' ? value : "&nbsp";
            });
            return out;
        },
        _buildHtml:function(data){
            var that = this,html="";
            $.each(that._self.bindName,function(i,name){
                html+='<span style="line-height: 27px; text-align:center;width: '+that._self.initColWidth[i]+'px ;display: block;float:left;">{'+name+'}</span>'
            })
            html=that.repalce(html,data);
            return html;
        },
        _mouseDistanceMet: function(event) {
            return (Math.max(
                Math.abs(this._mouseDownEvent.pageX - event.pageX),
                Math.abs(this._mouseDownEvent.pageY - event.pageY)
            ) >= 1
                );
        },
        _getDatabyPkey:function(pkey){
            var data = this._self.data,result,that = this;
            $.each(data,function(i,item){
                if(item[that._self.options.primarykey]==pkey){
                    result = item;
                    return false;
                }
            });
            return result;
        },
        _mouseStart:function(event){
            this.startData = this._getDatabyPkey($(this._mouseDownEvent.currentTarget).attr("pkey"));
            this._createEmptyTr();
            this._mouseDrag(event);
            return true;
        },
        _mouseDrag:function(event){
            var that = this;
            $.each(this._self.domTr,function(i,item){
                $("td",item).css({"border-bottom-color":"#eee","border-bottom-width":"1px"});
                var t = that._Emptydom.offset().top - $(item).offset().top;
                if(0<t&&t<28){
                    $("td",item).css({"border-bottom-color":"#ff0000","border-bottom-width":"2px"});
                    that.endData = that._getDatabyPkey($(item).attr("pkey"));
                };
            })
            var toffset = $(this._self.gridTableBox).offset().top
            this._Emptydom.css({
                top:event.pageY-toffset-10
            })
        },
        _mouseStop:function(event){
            var that = this;
            this._Emptydom.remove();
            var subData = this._self.data,startIndex,endIndex;

            $("body").removeClass("cui-userselectnone").removeAttr("unselectable").removeAttr("onselectstart");
            this._self.el.off("mousemove.moveRow");
            this._self.el.off("mouseup.moveRow");
            if(that.startData[that._self.options.primarykey]!=that.endData[that._self.options.primarykey]){
                $.each(subData,function(i,item){
                    if(item[that._self.options.primarykey] == that.startData[that._self.options.primarykey]){
                        that._self.removeData(i)
                        startIndex =i+1;
                        return false;
                    }
                });

                $.each(subData,function(i,item){
                    if(item[that._self.options.primarykey] == that.endData[that._self.options.primarykey]){
                        that._self.addData(that.startData,i+1)
                        endIndex = i+2;
                        return false;
                    }
                })
            }
            var moveRow = endIndex - startIndex;
            that._self.options.afterdrag_callback && that._self.options.afterdrag_callback.call(that,that.startData,that.endData,moveRow);

            this.__mouseStarted = false;
        }
    });
})(window.comtop);

/**
 * 新grid
 * @author 王伟
 * @since 2013-6-31
 */
;(function (C) {
    'use strict';
    var $ = C.cQuery,
        UI = C.UI,
        fiexNumber = C.Tools.fixedNumber || function (a) {return a;},
        /*匹配编辑Grid支持的类型*/
        editUiType = /^((i|I)nput|(c|C)lickInput|(p|((s|S)ingle|(m|M)ulti)?P)ullDown|(c|C)alender|(t|T)extarea)|((c|C)heckbox|(r|R)adio)Group$/,
        dictType = /(ullDown|Group)$/,
        inputType = /(nput|textarea)$/,
        rule = {
            /**
             * 验证是否存在(扩展字段 req)
             * 参数 解释数据
             * m: 出错信息字符串
             * emptyVal:包含在其中的也算为空
             */
            required: function (value, paramsObj) {
                var params = $.extend({
                        m: "不能为空!"
                    }, paramsObj || {}),
                    emptyVal = params.emptyVal,
                    msg = params.m,
                    i, len, valueI;
                if(value === '' || value === null || value === undefined) {
                    return msg;
                }
                if (emptyVal) {
                    for (i = 0, len = emptyVal.length; i < len; i++) {
                        if (value == emptyVal[i]) {
                            return msg;
                        }
                    }
                }
                if ($.type(value) === 'array') {
                    len = value.length;
                    if (len === 0) {
                        return msg;
                    }
                    for (i = 0; i < len; i++) {
                        valueI = value[i];
                        if (valueI === '' || valueI === null || valueI === undefined) {
                            return msg;
                        }
                    }
                }
                return true;
            },

            /**
             * 验证数值类型(扩展字段 num)
             * 参数 解释                                 数据
             *  oi： 是否只能为Integer （onlyInteger）     true/false
             *  min: 最小数                               数字
             *  max: 最大数                               数字
             *  is:  必须和该数字相等                      数字
             *  wrongm: 输入不和 is 相等的数字时提示信息       数字
             *  notnm：不为数字时提示信息                    字符串
             *  notim：不为整数时提示信息                    字符串
             *  minm：小于 min 数字时提示信息               字符串
             *  maxm：大于 max 数字时提示信息               字符串
             */
            numeric: function (value, paramsObj) {
                if ('' === value) {
                    return true;
                }
                var suppliedValue = value,
                    params, msg;
                value = Number(value);
                paramsObj = paramsObj || {};
                params = {
                    notANumberMessage:  paramsObj.notnm || "必须为数字!",
                    notAnIntegerMessage: paramsObj.notim || "必须为整数!",
                    wrongNumberMessage: paramsObj.wrongm || "必须为 " + paramsObj.is + "!",
                    tooLowMessage: paramsObj.minm || "必须大于 " + paramsObj.min + "!",
                    tooHighMessage: paramsObj.maxm || "必须小于 " + paramsObj.max + "!",
                    is: (paramsObj.is || paramsObj.is === 0) ? paramsObj.is : null,
                    minimum: (paramsObj.min || paramsObj.min === 0) ? paramsObj.min : null,
                    maximum: (paramsObj.max || paramsObj.max === 0) ? paramsObj.max : null,
                    onlyInteger:  paramsObj.oi || false
                };
                if (!isFinite(value)) {
                    return params.notANumberMessage;
                }
                if (params.onlyInteger && !/^\d+$/.test(String(suppliedValue))) {
                    return params.notAnIntegerMessage;
                }
                switch(true){
                    case (params.is !== null):
                        if( value !== Number(params.is) ) {
                            return params.wrongNumberMessage;
                        }
                        break;
                    case (params.minimum !== null && params.maximum !== null):
                        msg = this.numeric(value, {minm: params.tooLowMessage, min: params.minimum});
                        if (msg !== true) {
                            return msg;
                        }
                        msg = this.numeric(value, {maxm: params.tooHighMessage, max: params.maximum});
                        if (msg !== true) {
                            return msg;
                        }
                        break;
                    case (params.minimum !== null):
                        if( value < Number(params.minimum) ) {
                            return params.tooLowMessage;
                        }
                        break;
                    case (params.maximum !== null):
                        if( value > Number(params.maximum) ) {
                            return params.tooHighMessage;
                        }
                        break;
                }
                return true;
            },

            /**
             * 正则表达式验证 (扩展字段 format)
             *  参数   解释                                 数据
             *  m:     出错信息                             字符串
             *  pattern: 验证正则表达式                     字符串
             *  negate: 是否忽略本次验证（negate）           true/false
             */
            format: function(value, paramsObj){
                if ('' === value) {
                    return true;
                }
                value = String(value);
                var params = $.extend({
                    m: "不符合规定格式!",
                    pattern:  /./ ,
                    negate: false
                }, paramsObj || {});
                params.pattern = $.type(params.pattern) === "string" ?
                    new RegExp(params.pattern) : params.pattern;
                if(!params.negate && !params.pattern.test(value)) {//不忽略
                    return params.m;
                }
                return true;
            },

            /**
             * 邮箱格式验证 (扩展字段 email)
             * 参数 解释                                 数据
             *  m:   出错信息                             字符串
             */
            email: function(value, paramsObj){
                if ('' === value) {
                    return true;
                }
                var params = $.extend({
                    m: "邮箱格式输入不合法!"
                }, paramsObj || {}),
                msg = this.format(value, {
                    m: params.m,
                    pattern: /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i
                });
                if (msg !== true) {
                    return msg;
                }
                return true;
            },

            /**
             * 日期格式验证 (扩展字段 date)考虑了闰年、二月等因素
             * 参数 解释                                 数据
             *  m:   出错信息                            字符串
             */
            dateFormat : function(value, paramsObj) {
                var params = $.extend({
                    m: "日期格式必须为yyyy-MM-dd形式！"
                }, paramsObj || {}),
                msg = this.format(value, {
                    m: params.m,
                    pattern: /^((((((0[48])|([13579][26])|([2468][048]))00)|([0-9][0-9]((0[48])|([13579][26])|([2468][048]))))-02-29)|(((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9][0-9])|([1-9][0-9][0-9][0-9]))-((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30))|(((0[1-9])|(1[0-2]))-((0[1-9])|(1[0-9])|(2[0-8]))))))$/i
                });
                if (msg !== true) {
                    return msg;
                }
                return true;
            },

            /**
             * 长度验证(扩展字段 len)
             * 参数 解释                               数据
             *  m:   出错信息                          字符串
             *  min: 最小长度                          数字
             *  max: 最大长度                          数字
             *  is:  必须和该长度相等                     数字
             *  wrongm: 输入长度和 is 不相等时提示信息        数字
             *  minm：长度小于 min 数字时提示信息            字符串
             *  maxm：长度大于 max 数字时提示信息            字符串
             */
            length: function(value, paramsObj){
                value = String(value);
                paramsObj = paramsObj || {};
                var params = {
                    wrongLengthMessage: paramsObj.wrongm || "长度必须为 " + paramsObj.is + " 字节!",
                    tooShortMessage:      paramsObj.minm || "长度必须大于 " + paramsObj.min + " 字节!",
                    tooLongMessage:       paramsObj.maxm || "长度必须小于 " + paramsObj.max + " 字节!",
                    is: (paramsObj.is || paramsObj.is === 0) ? paramsObj.is : null,
                    minimum: (paramsObj.min || paramsObj.min === 0) ? paramsObj.min : null,
                    maximum: (paramsObj.max || paramsObj.max === 0) ? paramsObj.max : null
                }, msg;
                switch(true){
                    case (params.is !== null):
                        if( value.replace(/[^\x00-\xff]/g, "xx").length !== Number(params.is) ) {
                            return params.wrongLengthMessage;
                        }
                        break;
                    case (params.minimum !== null && params.maximum !== null):
                        msg = this.length(value, {minm: params.tooShortMessage, min: params.minimum});
                        if (msg !== true) {
                            return msg;
                        }
                        msg = this.length(value, {maxm: params.tooLongMessage, max: params.maximum});
                        if (msg !== true) {
                            return msg;
                        }
                        break;
                    case (params.minimum !== null):
                        if( value.replace(/[^\x00-\xff]/g, "xx").length < Number(params.minimum) ) {
                            return params.tooShortMessage;
                        }
                        break;
                    case (params.maximum !== null):
                        if( value.replace(/[^\x00-\xff]/g, "xx").length > Number(params.maximum) ) {
                            return params.tooLongMessage;
                        }
                        break;
                    default:
                        return "长度验证必须提供长度值!";
                }
                return true;
            },

            /**
             * 包含验证 (扩展字段 inc)
             * 参数 解释                                 数据
             *  m:   出错信息                             字符串
             *  negate: 是否忽略                          true/false
             *  caseSensitive: 大小写敏感(caseSensitive)   true/false
             *  allowNull: 是否可以为空                    数字
             *  within:  集合                             数组
             *  partialMatch: 是否部分匹配                 true/false
             */
            inclusion: function(value, paramsObj){
                var params = $.extend({
                        m: "",
                        within: [],
                        allowNull: false,
                        partialMatch: false,
                        caseSensitive: true,
                        negate: false
                    }, paramsObj || {}),
                    within = params.within, lowerWithin,
                    i, len, item,
                    found = false,
                    msg = params.m || (value + "没有包含在数组" + params.within.join(',') + "中");
                if(params.allowNull && !value) {
                    return true;
                }
                if(!params.allowNull && !value) {
                    return params.m;
                }
                //if case insensitive, make all strings in the array lowercase, and the value too
                if (!params.caseSensitive) {
                    var lowerWithin = [];
                    $.each(params.within, function(index, item) {
                        if (typeof item == 'string') item = item.toLowerCase();
                        lowerWithin.push(item);
                    });
                    params.within = lowerWithin;
                    if (typeof value == 'string') value = value.toLowerCase();
                }
                $.each(params.within, function(index, item) {
                    if (item === value || params.partialMatch && value.indexOf(item) !== -1) {
                        found = true;
                        return false;
                    }
                });
                if (params.negate === found) {
                    return msg;
                }
                return true;
            },

            /**
             * 不包含验证 (扩展字段 exc)
             * 参数 解释                                 数据
             *  m:   出错信息                             字符串
             *  caseSensitive: 大小写敏感(caseSensitive)   true/false
             *  allowNull: 是否可以为空                    数字
             *  within:  集合                             数组
             *  partialMatch: 是否部分匹配                 true/false
             */
            exclusion: function(value, paramsObj){
                var params = $.extend({
                        m: "",
                        within: [],
                        allowNull: false,
                        partialMatch: false,
                        caseSensitive: true
                    }, paramsObj || {}),
                    msg;
                params.m = params.m || value + "不应该在数组" + params.within.join(',') + "中！";
                params.negate = true;// set outside of params so cannot be overridden
                msg = this.inclusion(value, params);
                if (msg !== true) {
                    return msg;
                }
                return true;
            },
            /**
             * 组合匹配一致验证，如用户名和密码 (扩展字段 confirm)
             * 参数 解释                                 数据
             *  m:   出错信息                             字符串
             *  match: 验证与之匹配的元素引用              元素或元素id
             */
            /* confirmation: function(value, paramsObj){
                if(!paramsObj.match) {
                    return "与之匹配的元素引用或元素id必须被提供!";
                }
                var params = $.extend({
                    m: "两者不一致!",
                    match: null
                }, paramsObj || {});
                params.match = $.type(params.match) === 'string' ? cui('#' + params.match) : params.match;
                if(!params.match || params.match.length == 0) {
                    throw new Error("Validate::Confirmation - 与之匹配的元素引用或元素不存在!");
                }
                if(value !== params.match.getValue()) {
                    Validate.fail(params.m);
                }
                return true;
            },*/
            /**
             * 验证值是否为true 主要是验证checkbox (扩展字段 accept)
             * 参数 解释                                 数据
             *  m:   出错信息                             字符串
             */
            acceptance: function(value, paramsObj){
                var params = $.extend({
                    m: "必须选择!"
                }, paramsObj || {});
                if(!value) {
                    return params.m;
                }
                return true;
            },
            /**
             * 自定义验证函数 (扩展字段 custom)
             * 参数 解释                                 数据
             *  m:   出错信息                             字符串
             *  against:  自定义的函数                    function
             *  args:   自定义的函数的参数                 对象
             * */
            custom: function(value, paramsObj){
                var params = $.extend({
                    against: function(){ return true; },
                    args: {},
                    m: "不合法!"
                }, paramsObj || {}),
                    cusFunction = params.against;
                if ($.type(cusFunction) === 'string') {
                    cusFunction = window[cusFunction];
                }
                if(!cusFunction(value, params.args)) {
                    return params.m;
                }
                return true;
            }
        },
        ruleType = /required|numeric|format|email|dateFormat|length|inclusion|exclusion|confirmation|acceptance|custom/;
    C.UI.EditableGrid = C.UI.Base.extend({
        options: {
            uitype                : "EditableGrid",
            gridwidth             : "600px",
            gridheight            : "500px",
            tablewidth            : "",
            primarykey            : "",
            readonly              : false,
            ellipsis              : true,
            titleellipsis         : true,
            adaptive              : true,
            oddevenrow            : false,
            selectrows            : "multi",
            fixcolumnnumber       : 0,
            config                : null,
            onstatuschange        : null,
            datasource            : null,
            titlerender           : null,
            colhidden             : true,
            colmove               : false,
            loadtip               : true,
            resizeheight          : null,
            resizewidth           : null,
            rowstylerender        : null,
            colstylerender        : null,
            colrender             : null, //可编辑列不能渲染
            sortstyle             : 1,
            sortname              : [],
            sorttype              : [],
            pageno                : 1,
            pagesize              : 50,
            pagesize_list         : [25, 50, 100],
            pagination            : true,
            pagination_model      : 'pagination_min_1',

            rowclick_callback     : null,
            loadcomplete_callback : null,//未确定
            selectall_callback    : null,
            rowdblclick_callback  : null,
            /*编辑Grid*/
            edittype              : {},
            submitdata            : null,
            editbefore          : null,
            editafter           : null,
            deletebefore        : null,
            deleteafter        : null
        },
        //格式化 money, date
        formatFn: {
            "date": C.Date.simpleformat,
            "money": C.Number.money
        },
        //列渲染
        renderMethod: {
            "a": function (rowData, options, value) {
                var html = ["<a"],
                    params = options.params,
                    search = "";
                if (params) {
                    params = params.split(";");
                    var arr = [];
                    for (var i = params.length; i--;) {
                        var paramsI = params[i];
                        if (rowData.hasOwnProperty(paramsI)) {
                            arr.push([paramsI, "=", rowData[paramsI]].join(""));
                        }
                    }
                    search = "?" + arr.join("&");
                }
                html.push(
                    " href='", (options.url || "") + search,
                    "' class='", options.className || "",
                    "' target='", options.targets || "-self",
                    "' clickid='", options.click,
                    "'>",
                    value,
                    "</a>"
                );
                return html.join("");
            },
            "image": function (rowData, options, value) {
                var html = ["<img"];
                html.push(" class='", options.className || "");
                var url      = options.url,
                    compare  = options.compare,
                    relation = options.relation,
                    title    = options.title,
                    t        = value;
                if (typeof relation === "string") {
                    if (/\./.test(relation)) {
                        var arrRelation = relation.split(".");
                        t = rowData[arrRelation[0]][arrRelation[1]];
                    } else {
                        t = rowData[relation];
                    }
                }
                if (title && title[t]) {
                    title = title[t];
                } else {
                    title = value;
                }
                if (compare) {
                    url = compare[t] || url;
                }
                html.push(
                    "' src='", url,
                    "' title='", title,
                    "' clickid='", options.click,
                    "' />"
                );
                return html.join("");
            },
            "button": function (rowData, options, value) {
                var html = ["<button class='"];
                html.push(
                    options.className || "",
                    "' clickid='", options.click,
                    "'>",
                    options.value || value,
                    "</button>"
                );
                return html.join("");
            }
        },
        /**
         * 初始化参数和属性
         */
        _init: function () {
            var opts = this.options,
                config = opts.config,
                onstatuschange = opts.onstatuschange,
                datasource = opts.datasource,
                sortstyle        = opts.sortstyle;
            if (!opts.primarykey) {
                window.alert("请设置primarykey!");
            }
            //检查sort属性,纠正传入错误的sort属性.
            opts.sortname.length = Math.min(opts.sortname.length, sortstyle);
            opts.sorttype.length = Math.min(opts.sorttype.length, sortstyle);
            //取数据函数
            if (typeof config === "string" && typeof window[config] === "function") {
                opts.config = window[config];
            }
            if (typeof onstatuschange === "string" && typeof window[onstatuschange] === "function") {
                opts.onstatuschange = window[onstatuschange];
            }
            if (typeof datasource === "string" && typeof window[datasource] === "function") {
                opts.datasource = window[datasource];
            }
            //设置初始属性
            this.el                = opts.el;
            this.elCache          = null; //dom存到内存，因为IE的table只读
            this.gridContainer    = null;
            this.gridBox           = null;
            this.gridStyle        = null;
            this.gridHead         = null;
            this.gridHeadTable   = null;
            this.gridTableHide   = null;
            this.gridBody         = null;
            this.gridTableBox    = null;
            this.gridTbody        = null;
            this.gridScroll       = null;
            this.gridLine         = null;
            this.gridEmpty        = null;
            this.gridTfoot        = null;
            this.loading           = null;
            this.gridOverlay      = null;
            this.gridAllCheck    = null;
            this.createDomBox    = document.createElement("div");
            //基础集合
            this.domTh            = [];
            this.domTr            = [];
            this.domTd            = [];
            this.domFixed         = [];
            this.domHeadCol      = [];
            this.domBodyCol      = [];
            this.theadMap         = [];
            this.extendTh         = [];
            this.trFrag           = document.createElement("tbody");
            //数据
            this.data              = [];
            this.backupQuery      = null;
            this.query             = null;
            this.customQuery      = null;
            //个数
            this.rowSize          = 0;
            this.colSize          = 0;
            //属性
            this.sortType         = {};
            this.theadText        = [];
            this.renderStyle      = [];
            this.colRender        = []; //单元格渲染函数集中
            this.bindName         = []; // -1 单选多选; 0,1 序号; "" 没有绑定; "string" 绑定了
            this.left    = 0; //滚动到左边的scrollLeft
            this.numCol           = NaN;
            this.colWidth         = [];
            this.initColWidth    = [];
            this.colWidthBackup  = [];
            this.multiChecked     = [];
            this.multiCheckedNum = 0;
            this.singleChecked    = NaN;
            this.disabledIndex = [];
            this.fixedFnClick    = [];
            this.colHidden        = [];
            this.disabled = [];
            this.totalSize        = 0;
            this.guid              = "eg-" + C.guid();
            this.heightLight      = [];
            this.colIndex         = [];
            //样式
            this.gridWidth        = 0;
            this.gridHeight       = 0;
            this.tableWidth       = 0;
            this.theadHeight      = 30;
            this.boxHeight        = 0;
            this.paginationHeight = opts.pagination ? 41 : 0;
            //html片段
            this.selectrowsClass   = "";
            this.tdsPackage       = [];

            //判断标识
            this.renderComplete   = false;
            this.odd               = false;
            this.unRender         = true;
            this.autoHeight       = false;
            this.isIttab          = false;
            this.arrIndex         = Array.prototype.indexOf;
            this.isQm             = C.Browser.isQM;
            this.persistence       = typeof onstatuschange === "function" && typeof config === "function";
            this.oddEvenClass          = "eg-even-row";
            this.selectedRowClass      = "eg-select-row";
            //判断是否动态写入style标签
            try {
                var head = $("head");
                head.append('<style type="text/css"></style>');
                head.find("style").last()[0].innerHTML = "";//如果style只读这行报错
                this.writeStyle = true;
            } catch (e) {
                this.writeStyle = false;
            }

            //可编辑Grid属性
            this.editType = {};
            this.editDict = {};
            this.editObj = null;
            this.changeEditData = {
                "insertData" : {},
                "updateData" : {},
                "deleteData" : []
            };

            /**验证对象结构
            this.validateState = {
                "insert": {
                    "insertId" : {
                        "bindName1" : "错误提示1",
                        "bindName2" : "错误提示2",
                    }
                },
                "update": {
                    "pkValue" : {
                        "bindName1" : "错误提示1",
                        "bindName2" : "错误提示2",
                    }
                },
            }*/
            this.validateState = {
                "insert": {},
                "update": {}
            };
            this.insertId = 0; //给插入行的数据设置一个不重复的id；见insertRow方法

            //备份data，用于是否被修改的比较
            this.dataBackup = {};
            this.isChanged = false;
			
			this._createHeadDom();
            //备份query
            this._backupQuery();
            //初始化pagesize
            this._setPageSize();
            //生成排序对象
            this._setSortTypeObj();
            //获取表头dom
            this.__getDomTh();
            //初始化整体宽度
            this.__initWidthAndHeight();
        },
		_createHeadDom:function(){
            var self = this,
                opt = this.options,
                header = "<thead><tr>",
                mheader = "<thead>",
                isM = false;

            if (opt.columns) {
                $.each(opt.columns, function(i, item) {
                    if ($.isArray(item)) {
                        isM = true;
                        mheader += "<tr>"
                        $.each(item, function(j, obj) {
                            mheader += self._createHeadTr(obj);
                        })
                        mheader += "</tr>"
                    } else {
                        if (i === 0 && opt.selectrows != "no") {
                            header += "<th width='40px'></th>";
                        };
                        header += self._createHeadTr(item);
                    }
                    
                });
                mheader += "<thead>";
                header += "</tr><thead>";
                this.el.append(isM ? mheader : header);
            }
        },
		_createHeadTr:function(item){
			var th ="<th ",html = item.name;
			if(item.type && item.type=="checkbox"){
				html = '<input type="checkbox" />';
			}
			$.each(item,function(key,value){
				if(key=="type" || key=="name"){
					return true;
				}
				th += [key,'="',value,'"'].join("");
				th +=" ";
			})
			th +=">"+html+"</th>";
			return th;
		},
        /**
         * 备份查询条件
         * @private
         */
        _backupQuery: function () {
            var opts = this.options,
                query = {
                    pageSize : opts.pagesize,
                    pageNo   : opts.pageno,
                    sortName : $.extend([], opts.sortname),
                    sortType : $.extend([], opts.sorttype)
                };
            this.backupQuery = $.extend(true, {}, query);
            this.query = query;
        },
        /**
         * 设置pagesize
         * @private
         */
        _setPageSize: function () {
            var opts          = this.options,
                query         = this.query,
                pagesizeList = opts.pagesize_list,
                pageSize     = query.pageSize;
            for (var i = pagesizeList.length; i--;) {
                if (pageSize === pagesizeList[i]) {
                    return;
                }
            }
            query.pageSize = pagesizeList[1];
        },
        /**
         * 设置排序属性到sorttype对象
         * @private
         */
        _setSortTypeObj: function () {
            var query     = this.query,
                sortname  = query.sortName,
                sorttype  = query.sortType,
                len       = sortname.length,
                sortType = this.sortType = {};
            for (var i = 0; i < len; i += 1) {
                var sorttypeI = sorttype[i].toUpperCase();
                sorttype[i] = sorttypeI;
                sortType[sortname[i]] = sorttypeI;
            }
        },
        /**
         * 获取题头th,生产多行题头map
         * @private
         */
        __getDomTh: function () {
            var el = this.el,
                elChache,
                tr,
                trLen,
                colIndex = this.colIndex,
                extendTh = this.extendTh;
            elChache = $(document.createElement("div")).html([
                '<table><thead>',
                el.find("thead").html() || el.find("tbody").html() || el.html(),
                '</thead></table>'
            ].join("")).find("table").eq(0);
            //读取内存里面的tr
            this.elCache = elChache;
            tr = elChache.find("tr");
            trLen = tr.length;
            if (trLen === 1) {//单行题头
                var ths = elChache[0].getElementsByTagName("th"),
                    domTh = [];
                for (var g = 0, h = ths.length; g < h; g += 1) {
                    domTh.push(ths[g]);
                    colIndex[g] = g;
                }
                this.domTh = domTh;
            } else {//多行题头
                var theadMap = this.theadMap = [],
                    i, j, l,
                    theadMapL;
                //colSpan替换
                for (i = 0; i < trLen; i += 1) {//每一行
                    var trI = tr.eq(i)[0],
                        thI = trI.cells,
                        lenThI = thI.length,
                        allCellSpan = 0;
                    extendTh[i] = [];
                    if (!theadMap[i]) {
                        theadMap[i] = [];
                    }
                    for (j = 0; j < lenThI; j += 1) {//每一列
                        var thIJ = thI[j],
                            cellSpan = thIJ.colSpan;
                        for (l = 0; l < cellSpan; l += 1) {//cellspan
                            theadMap[i][allCellSpan + l] = thIJ;
                        }
                        allCellSpan += cellSpan;
                    }
                    var emptyTh = document.createElement("th");
                    emptyTh.className = "eg-empty-th";
                    trI.insertBefore(emptyTh, thI[0]);
                }
                //rowSpan替换
                for (i = trLen; i --;) {//每一行
                    var mapI = theadMap[i],
                        lenMapI = mapI.length;
                    for (j = 0; j < lenMapI; j += 1) {//每一列
                        var mapIJ = mapI[j],
                            rowSpan = mapIJ.rowSpan;
                        if (rowSpan > 1 && !extendTh[i][j]) {
                            rowSpan += i;
                            for (l = i + 1; l < rowSpan; l += 1) {//rowspan
                                theadMapL = theadMap[l];
                                if (theadMapL) {
                                    extendTh[l][j] = true;
                                    theadMapL.splice(j, 0, mapIJ);
                                }
                            }
                        }
                    }
                }
                this.domTh = $.extend([], theadMap[trLen - 1]);
            }
            this.colSize = this.domTh.length;
        },
        /**
         * 计算初始的宽高
         * @private
         */
        __initWidthAndHeight: function () {
            var opts        = this.options,
            //外框宽度高度
                rewidth     = typeof opts.resizewidth === "function" ? opts.resizewidth() : undefined,
                reheight    = typeof opts.resizeheight === "function" ? opts.resizeheight() : undefined,
                gridwidth = opts.gridwidth = fiexNumber(opts.gridwidth),
                gridheight = opts.gridheight = fiexNumber(opts.gridheight);
            this.gridWidth = ( rewidth || gridwidth) - 2;
            if (gridheight === "auto") {
                gridheight       = 500;
                this.autoHeight = true;
            }
            this.gridHeight  = ( reheight || gridheight ) - 2;
            //table的宽高
            this.theadHeight = this.elCache.find("tr").length * 30;
            this.boxHeight   = this.gridHeight - this.paginationHeight - this.theadHeight;
            this.tableWidth  = opts.adaptive ? this.gridWidth - 17 : fiexNumber(opts.tablewidth) || this.gridWidth;
        },
        /**
         * 创建组件dom
         * @private
         */
        _create: function () {
            //创建外框
            this.__createLayoutDom();
            //事件委托
            this.__theadClickEventBind();
            this.__theadMouseEventBind();
            this.__tbodyMouseEventBind();
            this.__tbodyKeyEventBind();
            //回调
            this.__imitateScroll();
            this._resizeEventBind();
            //设置初始宽高样式
            this._setStyleWidth();
            this._setStyleHeight();
            //如果没有持久化，直接渲染内容
            this._loading("show");
            var opts = this.options,
                datasource = opts.datasource,
                config = opts.config;
            if (typeof datasource !== "function") {
                return;
            }
            if (this.persistence) {
                config(this);
            } else {
                this._createPropertys();
                this._createContent();
                datasource(this, this.getQuery());
            }
            //添加document事件监听，执行编辑取消动作
            /*var self = this;
            $(document).on('click.editablegrid', function(){
                if(self.editObj){
                    self._destroyFormEle();
                }
            });*/
        },
        /**
         * 创建外框 div
         * @private
         */
        __createLayoutDom: function () {
            var opts            = this.options,
                el              = this.el,
            //生成dom
                container       = document.createElement("div");
            container.className = "eg-container";
            var html = [
                '<div class="eg-style"></div>',
                '<div class="eg-box">',
                '<div class="eg-head">',
                '<table class="eg-head-table"></table>',
                '</div>',
                '<div class="eg-body">',
                '<div class="eg-empty">本列表暂无记录</div>',
                '<div class="eg-table-box"><div class="eg-table-hide"></div></div>',
                '</div>',
                '<div class="eg-scroll">',
                '<div></div>',
                '</div>',
                '<div class="eg-line"></div>',
                '<div class="eg-overlay"></div>',
                '</div>',
                '<div class="eg-tfoot"></div>',
                '<div class="eg-loading-bg eg-loading-bg-over"></div>',
                '<div class="eg-loading-box"><span>正在加载...</span></div>'
            ];
            container.innerHTML = html.join("");
            el[0].parentNode.insertBefore(container, el[0]);
            //创建jq对象
            var gridContainer   = this.gridContainer = $(container).addClass(this.guid);
            if (this.isQm) {
                gridContainer.addClass("eg-container-qm");
            }
            this.gridTableBox  = $(".eg-table-box", gridContainer);
            var gridBox         = this.gridBox = gridContainer.children(".eg-box");
            this.gridStyle      = gridContainer.find(".eg-style").eq(0);
            this.gridHead       = gridBox.find(".eg-head").eq(0);
            this.gridBody       = gridBox.children(".eg-body").eq(0);
            this.gridOverlay    = gridBox.children(".eg-overlay").eq(0);
            this.gridHeadTable = this.gridHead.children(".eg-head-table").eq(0);
            this.gridLine       = gridBox.children(".eg-line").eq(0);
            this.gridScroll     = gridBox.children(".eg-scroll").eq(0);
            this.gridTfoot      = gridContainer.children(".eg-tfoot").eq(0);
            this.gridEmpty      = this.gridBody.children(".eg-empty").eq(0);
            this.loading         = gridContainer.children(".eg-loading-bg").next().andSelf();
            //调整dom属性
            this.gridTableHide = $(".eg-table-hide", gridContainer).eq(0).append(el.addClass("eg-body-table"));
            if (opts.ellipsis) { //是否能换行
                el.addClass("eg-ellipsis");
            }
            if (opts.titleellipsis) {//题头是否换行
                this.gridHeadTable.addClass("eg-ellipsis");
            }
        },
        /**
         * 表头点击事件
         * @private
         */
        __theadClickEventBind: function () {
            var opts      = this.options,
                bindName = this.bindName,
                primarykey = opts.primarykey,
                self      = this;
            this.gridHeadTable.on("click", function (event) {
                event.stopPropagation();
                var target = $(event.target);
                var className = target.attr("class");
                if (className === "eg-select" || className === "eg-ittab") {
                    return;//这里 可以调用 隐藏列 函数
                }
                //全选

                if (target.hasClass("eg-all-checkbox")) {
                    var domTr           = self.domTr,
                        multiChecked    = self.multiChecked,
                        selectedRowClass = self.selectedRowClass,
                        allCheckClass    = "eg-all-checkbox-checked",
                        rowSize         = self.rowSize,
                        checkAll = target.hasClass(allCheckClass),
                        disabledIndex = self.disabledIndex,
                        rows = 0,
                        data = self.data,
                        dataK;
                    // $(target).blur();
                    if (checkAll) {
                        for (var j = rowSize; j--;) {
                            multiChecked[j] = false;
                            $(domTr[j]).removeClass(selectedRowClass);
                        }
                        target.removeClass(allCheckClass);
                        self.multiCheckedNum = 0;
                    } else {
                        for (var k = rowSize; k--;) {
                            dataK = data[k];
                            if (dataK.hasOwnProperty(primarykey) && disabledIndex[k]) {
                                continue;
                            }
                            rows++;
                            multiChecked[k] = true;
                            $(domTr[k]).addClass(selectedRowClass);
                        }
                        target.addClass(allCheckClass);
                        self.multiCheckedNum = rows;
                    }
                    var selectallCallback = opts.selectall_callback;
                    if (typeof selectallCallback === "function") {
                        var checked = !checkAll;
                        selectallCallback.call(self, checked ? self.data : [], checked);
                    }
                    return;
                }
                //排序
                var gridSort = target.parents(".eg-sort");
                if (gridSort.length && className === "eg-thead-text") {
                    var sortType       = self.sortType,
                        bindNameI     = bindName[self._thIndex(gridSort[0])],
                        sortTypeI     = sortType[bindNameI],// || "ASC",
                        newSortTypeI = sortTypeI !== "DESC" ? "DESC" : "ASC";
                    self._setOptsSortNameAndSoryType(bindNameI, newSortTypeI);
                    //持久化排序
                    if (self.persistence) {
                        self._triggerStatusChange();
                    }
                    //提交，如不需要提交则直接加载
                    if (self.submit() === "noChange") {
                        self.loadData();
                    }
                }
            });
        },
        /**
         * 获取当前列的索引,题头不规则只能用此函数
         * @param thDom
         * @returns {*}
         * @private
         */
        _thIndex: function (thDom) {
            var domTh = this.domTh,
                arrIndex = this.arrIndex;
            if(arrIndex) {
                return arrIndex.call(domTh, thDom);
            }
            //IE
            for (var i = this.colSize; i--;) {
                if (domTh[i] === thDom) {
                    return i;
                }
            }
            return -1;
        },
        /**
         * 设置this.query中sortname和sorttype
         * @private
         */
        _setOptsSortNameAndSoryType: function (name, type) {
            var query      = this.query,
                sortstyle = this.options.sortstyle,
                sortName  = query.sortName,
                sortType  = query.sortType;
            for (var i = sortstyle; i--;) {
                if (name === sortName[i]) {
                    sortType.splice(i, 1);
                    sortName.splice(i, 1);
                    break;
                }
            }
            if (sortName.length === sortstyle) {
                sortType.shift();
                sortName.shift();
            }
            sortName.push(name);
            sortType.push(type);
            this._setSortTypeObj();
        },
        /**
         * th鼠标over,out事件
         * @private
         */
        __theadMouseEventBind: function () {
            this.gridHeadTable.on("mouseover",function (event) {
                var target       = $(event.target);
                var gridFixedS = target.closest(".eg-fixed-s").eq(0);
                if (gridFixedS.length) {
                    gridFixedS.parents("th").addClass("eg-thead-mouseover");
                }
            }).on("mouseout", function (event) {
                    var target = $(event.target);
                    var gridFixedS = target.closest(".eg-fixed-s").eq(0);
                    if (gridFixedS.length) {
                        gridFixedS.parents("th").removeClass("eg-thead-mouseover");
                    }
                });
        },
        /**
         * 表格主体鼠标事件
         * @private
         */
        __tbodyMouseEventBind: function () {
            var self = this,
                opts = this.options,
                editType = this.editType,
                td, tr, rowIndex, editing,
                bindNameI, editTypeI, rowData,
                rowdblclickCallback = opts.rowdblclick_callback,
                selectrows = opts.selectrows,
                timeout, retainTags = "A;BUTTON;IMG";
            this.el.delegate("td","mouseover",  function (event) {
                var newTd, newTr, cellIndex, isEdit;
                event.stopPropagation();
                newTd = $(event.target).closest("td").eq(0);
                if (!newTd.length || newTd === td) {
                    return;
                }
                newTr = newTd.closest("tr").eq(0);
                if (!newTr.closest("tbody").length) {
                    return;
                }
                td = newTd;
                tr = newTr;
                rowIndex = tr[0].rowIndex - 1;
                rowData = self.data[rowIndex];
                cellIndex = newTd[0].cellIndex;
                bindNameI = self.bindName[cellIndex];
                editTypeI = editType[bindNameI];
                //高亮行
                tr.addClass("eg-tr-over");
                //正在编辑ing
                editing = td.hasClass("eg-editing");
                if (editing) {
                    return;
                }
                //可编辑，
                if (editTypeI) {
                    isEdit = true;
                    td.addClass("eg-editable-td");
                }
                //渲染title
                self._renderTitle(td, bindNameI, rowIndex, isEdit);
            })
            .on("mouseout", function (event) {
                event.stopPropagation();
                if (td) {
                    tr.removeClass("eg-tr-over");
                    td.removeClass("eg-editable-td");
                    tr = td = editing = rowIndex = bindNameI = editTypeI = undefined;
                }
            })
            .on("dblclick", function (event) {
                event.stopPropagation();
                if (typeof opts.rowdblclick_callback === "function" && td && !editTypeI) {
                    clearTimeout(timeout);
                    opts.rowdblclick_callback.call(self, rowData, rowIndex);
                }
            });
            this.gridBody.on("click", function (event) {
                var target = $(event.target),
                    tagName, clickid;
                event.stopPropagation();
                if (td) {
                    if (editing) {
                        return;
                    }
                    //完成上一个编辑
                    if (self.editObj) {
                        self._destroyFormEle();
                    }
                    if (editTypeI) {
                        //编辑单元格
                        self.__startEdit(editTypeI, td, rowIndex, bindNameI);
                        return;
                    }
                    //非编辑单元格
                    tagName = target.prop("tagName");
                    clickid = target.attr("clickid") || "";
                    if (retainTags.indexOf(tagName) !== -1) {
                        if (clickid !== "") {
                            self.fixedFnClick[clickid](rowData, rowIndex);
                        }
                        return;
                    }
                    if (tagName === "INPUT"){
                        return;
                    }

                    if (target.closest('td').hasClass("eg-select-input")) {
                        self._selectRows(rowIndex, undefined);
                    }

                    //单击
                    if (rowdblclickCallback) {
                        clearTimeout(timeout);
                        timeout = setTimeout(function () {
                            clickCallback(rowIndex);
                        }, 300);
                    } else {
                        clickCallback(rowIndex);
                    }
                }
                //完成上一个编辑
                if (self.editObj) {
                    self._destroyFormEle();
                }
            });
            function clickCallback(rowIndex) {
                //选择行回调
                var flag = false;
                if (selectrows === "multi") {
                    flag = self.multiChecked[rowIndex];
                } else if (selectrows === "single") {
                    flag = rowIndex === self.singleChecked;
                }
                if (typeof opts.rowclick_callback === "function") {
                    opts.rowclick_callback.call(self, rowData, flag, rowIndex);
                }
            }
        },
        /**
         * 按键，用于编辑时的tab切换
         * @private
         */
        __tbodyKeyEventBind: function () {
            var self = this;
            $(document).on("keydown", function (event) {
                var editObj = self.editObj,
                    index;
                if (editObj) {
                    if (event.keyCode === 9) {
                        event.preventDefault();
                        self._destroyFormEle();
                        index = editObj.index;
                        if (!self.__createNextEditObj(index, editObj.bindName) &&
                            (index + 1) < self.rowSize) {
                            //切换到下一行
                            self.__createNextEditObj(index + 1, self.bindName[0]);
                        }
                    }
                }
            });
        },
        /**
         * 创建下一个编辑
         * @private
         */
        __createNextEditObj: function (index, bindNameP) {
            var colSize = this.colSize,
                i, bindNameI, editTypeI,
                bindName = this.bindName,
                editType = this.editType,
                gridTableBox = this.gridTableBox,
                isNext, td;
            for (i = 0; i < colSize; i++) {
                bindNameI = bindName[i];
                editTypeI = editType[bindNameI];
                if (editTypeI) {
                    if (isNext) {
                        td = $(this.domTd[index][i]);
                        if (this.__startEdit(editTypeI, td, index, bindNameI, true)) {
                            //this.gridScroll[0].scrollLeft =  td[0].offsetLeft + td.outerWidth() - this.gridWidth;
                            this.gridScroll.scrollLeft(gridTableBox.scrollLeft() + this.left);
                            gridTableBox.scrollLeft(0);
                            return true;
                        } else {
                            continue;
                        }
                    }
                }
                if (bindNameI === bindNameP) {
                    isNext = true;
                }
            }
        },
        /**
         * 为单元格渲染title属性
         * @private
         */
         _renderTitle: function (td, bindNameI, rowIndex, isEdit) {
            var titlerender = this.options.titlerender,
                title, fixedS;
            if (typeof bindNameI !== "number" && !td.attr("title")) {
                fixedS = td.find(".eg-fixed-s");
                fixedS = fixedS.length ? fixedS : null;
                if (typeof titlerender === "function") {
                    title = titlerender(this.data[rowIndex], bindNameI);
                    title ? isEdit = false : ""; 
                }

                title = title || $.trim((fixedS || td).text());
                title && isEdit ? title += " (点击编辑)" : "";
                title && td.attr("title", title);
            }
        },
        /**
         * 开始编辑渲染
         * @param editTypeI
         * @param td
         * @param rowIndex
         * @param bindNameI
         * @param isTab
         * @returns {boolean}
         * @private
         */
        __startEdit: function (editTypeI, td, rowIndex, bindNameI, isTab) {
            var editbefore = this.options.editbefore,
                newEditObj, uiType;
            if (typeof editbefore === "function") {
                newEditObj = editbefore.call(this, this.data[rowIndex], bindNameI,rowIndex);
                if ($.type(newEditObj) === "object") {
                    uiType = newEditObj.uitype;
                    newEditObj.uitype = uiType.charAt(0).toLowerCase() + uiType.slice(1);
                    editTypeI = newEditObj;
                }
            }
            if(this.options.readonly){
                return false;
            }
            if (newEditObj !== false) {
                td.removeAttr("title");
                this._createFormEle(td, editTypeI, rowIndex, bindNameI, isTab);
                return true;
            } else {
                return false;
            }
        },
        setReadonly:function(flag){
            this.options.readonly =  !!flag;
        },
        /**
         * 选择行
         * @param index
         * @param flag
         * @private
         */
        _selectRows: function (index, flag) {
            var domTr           = this.domTr,
                domTrIndex     = domTr[index],
                opts             = this.options,
                selectrows       = opts.selectrows,
                selectedRowClass = this.selectedRowClass,
                tr               = $(domTrIndex);
            if (this.disabledIndex[index]) {
                //当前行被禁用选择
                return;
            }
            if (selectrows === "multi") {
                var multiChecked = this.multiChecked;
                var multiCheckedIndex = multiChecked[index];
                if (flag === undefined) {
                    flag = multiCheckedIndex !== true;
                } else if (flag === multiCheckedIndex) {
                    return;
                }
                multiChecked[index] = flag;
                if (!domTrIndex) {
                    return;
                }
                if (flag === false) {
                    tr.removeClass(selectedRowClass);
                    this.multiCheckedNum--;
                    this.gridAllCheck.removeClass("eg-all-checkbox-checked");
                } else {
                    tr.addClass(selectedRowClass);
                    this.multiCheckedNum += 1;
                    if (this.multiCheckedNum === this.rowSize) {
                        this.gridAllCheck.addClass("eg-all-checkbox-checked");
                    }
                }
            } else if (selectrows === "single") {
                var singleChecked = this.singleChecked;
                this.singleChecked = singleChecked === index && flag === false ? NaN : index;
                if (!domTrIndex) {
                    return;
                }
                if (flag === false) {
                    tr.removeClass(selectedRowClass);
                } else {
                    if (!isNaN(singleChecked)) {
                        $(domTr[ singleChecked ]).removeClass(selectedRowClass);
                    }
                    tr.addClass(selectedRowClass);
                }
            }
        },
        /**
         * 模拟滚动条
         * @private
         */
        __imitateScroll: function () {
            var self            = this,
                guid            = self.guid,
                gridHeadTable = this.gridHeadTable[0],
                gridStyle      = this.gridStyle[0],
                el              = this.el[0],
                left, leftCache;
            var fixcolumnnumber = this.options.fixcolumnnumber;
            if (this.writeStyle) {
                this.gridScroll.on("scroll", function () {
                    left = self.left = this.scrollLeft;
                    if (leftCache === left) {
                        return ;
                    }
                    leftCache = left;
                    gridStyle.innerHTML = [
                        '<style type="text/css">.',
                        guid,
                        ' .eg-fixed .eg-fixed-s{left:',
                        left,
                        'px}.',
                        guid,
                        ' .eg-body-table, .',
                        guid,
                        ' .eg-head-table{margin-left:-',
                        left,
                        'px}</style>'
                    ].join("");
                });
            } else {
                this.gridScroll.on("scroll", function () {
                    left = self.left = this.scrollLeft;
                    left = left + "px";
                    if (leftCache === left) {
                        return ;
                    }
                    leftCache = left;
                    var marginLeft = "-" + left;
                    gridHeadTable.style.marginLeft = marginLeft;
                    el.style.marginLeft = marginLeft;
                    var domFixed = self.domFixed;
                    for (var i = domFixed.length; i--;) {
                        var domFixedI = domFixed[i];
                        for (var j = fixcolumnnumber; j--;) {
                            domFixedI[j].style.left = left;
                        }
                    }
                    var tdsPackage = self.tdsPackage;
                    for (var k = 0; k < fixcolumnnumber; k += 1) {
                        tdsPackage[k].html = tdsPackage[k].html.replace(/(style="left:)\d*?px/, "$1" + left);
                    }
                });
            }
            //竖向滚动，清除编辑渲染
            this.gridBody.on("scroll", function () {
                if (self.editObj) {
                    self._destroyFormEle();
                }
            });
        },
        /**
         * resize事件
         * @private
         */
        _resizeEventBind: function () {
            var opts = this.options,
                self = this;
            if (opts.resizeheight || opts.resizewidth) {
                $(window).on("resize", function () {
                    self.resize();
                });
            }
        },
        /**
         * 根据回调设置宽高
         */
        resize: function () {
            var opts = this.options,callAutoHeight=false;
            try {
                var height = opts.resizeheight();
                if (typeof height === 'number' && height > 0) {
                    this._setHeight(height);
                }
            } catch (e) {
            }
            try {
                var width = opts.resizewidth();
                if (typeof width === 'number' && width > 0) {
                    callAutoHeight =this.setWidth(width);
                }
            } catch (e) {
            }
            if(callAutoHeight){
               this._setAutoHeight();
            }
        },
        /**
         * 设置组件宽度样式.
         * @private
         */
        _setStyleWidth: function () {
            this.gridContainer.css("width", this.gridWidth);
            this.el.css("width", this.tableWidth);
            this.gridHeadTable.css("width", this.tableWidth);
        },
        /**
         * 设置组件高度样式.
         * @private
         */
        _setStyleHeight: function () {
            this.gridContainer.css("height", this.gridHeight);
            this.gridHead.css("height", this.theadHeight);
            this.gridOverlay.css("height", this.theadHeight);
            this.gridBody.css("height", this.boxHeight);
        },
        /**
         * 加载中...
         * @param status "show", "hide"
         */
        _loading: function (status) {
            if (!this.options.loadtip) {
                return;
            }
            this.loading[status]();
            if (this.unRender && status === "hide") {
                this.gridContainer.find(".eg-loading-bg").removeClass("eg-loading-bg-over");
            }
        },
        /**
         * 属性初始创建
         * @private
         */
        _createPropertys : function () {
            //获取表头中的属性
            this.__getTagsPropertys();
            //初始化编辑对象
            this._initEditType();
            //初始化每一列宽度
            this.__initColWidth();
        },
        /**
         * 更多初始创建
         * @private
         */
        _createContent: function () {
            //渲染head和body
            this.__renderHead();
            this.__renderBody();
            //设置列宽
            this._setColWidthStyle();
            //tbody内容渲染相关
            this.__packageTds();
            //初始列隐藏
            this._colHidden(true);
            //扩展功能,拖动列宽和隐藏列
            this.ittab._init(this);
            var opts = this.options;
            if (opts.colhidden) {
                this.hideCol._init(this);
            }
            if (opts.colmove && this.theadMap.length === 0) {
                this.moveCol._init(this);
            }
        },
        /**
         * 获取模版中的列属性.
         */
        __getTagsPropertys: function () {
            var domTh         = this.domTh,
                opts           = this.options,
                colSize       = this.colSize,
                renderStyle   = this.renderStyle,
                bindName      = this.bindName,
                sort           = this.sort = [],
                theadText     = this.theadText,
                colwidth      = this.colWidth,
                colRender     = this.colRender,
                fixedFnClick = this.fixedFnClick,
                colHidden = this.colHidden,
                disabled = this.disabled,
                i;
            //设置列宽备份
            for (i = 0; i < colSize; i += 1) {
                //设置colIndex
                var thI = domTh[i];
                colwidth.push(thI.style.width || thI.getAttribute("width") || "");
                //初始状态为隐藏
                colHidden[i] = thI.getAttribute("hide") === "true" || $(thI).css("display") === "none";
                //不可隐藏设置
                disabled[i] = thI.getAttribute("disabled") === "true";
                thI.removeAttribute("disabled")
                //获取渲染样式。
                var renderStyleAttrI = thI.getAttribute("renderStyle") || "";
                var renderStyleI = renderStyleAttrI
                    .replace(/padding.+?(;|$)/, "")
                    .replace(/display\s*?:\s*?none\s*?(;|$)/, "") + ";";
                renderStyle.push(renderStyleI);
                //获取bindName
                var bindNameI = thI.getAttribute("bindName") || "";
                bindName[i] = bindNameI;
                if (isNaN(this.numCol) && bindNameI.length && !isNaN(bindNameI - 0)) {//编号列
                    this.numCol = i;
                    bindName[i] = bindNameI - 0;
                    bindNameI = "";
                }
                //sort
                if (bindNameI === "") {
                    sort[i] = false;
                } else {
                    sort[i] = thI.getAttribute("sort") === "true" || false;
                }
                //题头文字
                theadText.push(thI.innerHTML);
                //渲染函数. 优先级 format < colRender < render  固定render在其他基础上取;
                var format    = thI.getAttribute("format"),
                    colrender = opts.colrender,
                    render    = thI.getAttribute("render");
                colRender[i] = [];
                //format
                if (format !== null) {
                    if (/money/.test(format)) {
                        colRender[i][1] = {
                            "format": Number(format.split("-")[1] || 2),
                            "callback": this.formatFn.money
                        };
                    } else if (/(dd|MM|yy)/i.test(format)) {
                        colRender[i][1] = {
                            "format": format,
                            "callback": this.formatFn.date
                        };
                    }
                }
                //单元格渲染总函数
                if (typeof colrender === "function") {
                    colRender[i][0] = {
                        "render": "colrenderFn",
                        "callback": colrender
                    };
                }
                //单列固定渲染
                if (typeof render === "string") {
                    if (new RegExp(render).test("a;button;image")) {
                        var options = thI.getAttribute("options");
                        if (options !== null) {
                            if (/{/.test(options)) {
                                try {
                                    options = JSON.parse(options);
                                } catch (e) {
                                    options = (new Function('return ' + options + ";"))();
                                } finally {
                                    if (typeof options !== "object") {
                                        options = undefined;
                                    }
                                }
                            } else {
                                options = window[options];
                            }
                        }
                        if (options) {
                            var click = options.click;
                            click = typeof click === "string" ? window[click] : click;
                            if (typeof click === "function") {
                                options.click = fixedFnClick.push(click) - 1;
                            } else {
                                options.click = "";
                            }
                            colRender[i][0] = {
                                "render" : "fiexdFn",
                                "method" : render,
                                "options": options
                            };
                        }
                    } else {
                        var renderFn = window[render];
                        if (renderFn) {
                            var colJson = {
                                "format"     : format || undefined,
                                "render"     : renderFn,
                                "renderStyle": renderStyleAttrI,
                                "text"       : theadText[i]
                            };
                            colRender[i][0] = {
                                "render"  : "renderFn",
                                "colJson": colJson,
                                "callback": renderFn
                            };
                        }
                    }
                }
            }
            //重置bindName
            var selectrows = opts.selectrows;
            if (selectrows === "multi" || selectrows === "single") {
                bindName[0] = -1;
            }
        },
        /**
         * 计算初始每一列的宽度。
         * @private
         */
        __initColWidth: function () {
            var gridWidth  = this.gridWidth,
                tableWidth = this.tableWidth || gridWidth,
                colwidth   = this.colWidth,
                colWidthBackup = this.colWidthBackup,
                sumWidth   = 0,
                setedWidth = 0,
                colSize    = this.colSize,
                autoCol    = [];
            for (var i = this.colSize; i--;) {
                var colwidthI = colwidth[i];
                colWidthBackup[i] = -1;
                if (colwidthI === "") {
                    colwidthI  = 0;
                    colwidth[i] = 200;
                    autoCol.push(i);
                } else if (/%/.test(colwidthI)) {
                    colwidthI  = Math.round(tableWidth * parseInt(colwidthI, 10) / 100);
                    colwidth[i] = colwidthI;
                } else {
                    colwidthI  = parseInt(colwidthI, 10);
                    colwidth[i] = colwidthI;
                }
                sumWidth   += colwidth[i];
                setedWidth += colwidthI;
            }
            var autoColSize   = autoCol.length;
            var remainingWidth = tableWidth - setedWidth;
            if (autoColSize > 0 && remainingWidth > autoColSize) {
                var remainingColwidth = Math.round(remainingWidth / autoColSize);
                for (var m = 0; m < autoColSize; m++) {
                    colwidth[autoCol[m]] = remainingColwidth;
                }
                colwidth[autoCol[m - 1]] += remainingWidth - remainingColwidth * autoColSize;
                this.tableWidth = tableWidth;
            } else {

                if (isNaN(this.tableWidth) && sumWidth >= gridWidth) {
                    this.tableWidth = sumWidth;
                } else {//重设
                    if (!this.tableWidth) {
                        this.tableWidth = gridWidth;
                    }
                    var newColwidth = [];
                    var allWidth = 0;
                    var last = 0;
                    for (var j = colSize; j--;) {
                        var width = Math.round(colwidth[j] * tableWidth / sumWidth);
                        allWidth += width;
                        newColwidth[j] = width;
                        last = j;
                    }
                    newColwidth[last] += tableWidth - allWidth;
                    this.colWidth = newColwidth;
                }
            }
            this.initColWidth = $.extend([], this.colWidth);
        },
        /**
         * 渲染表头 并创建相关dom
         * @private
         */
        __renderHead: function () {
            var opts            = this.options,
                domTh          = this.domTh,
                theadMap       = this.theadMap,
                theadMapLen   = this.theadMap.length,
                domHeadCol    = this.domHeadCol,
                domFixedJ     = this.domFixed[0] = [],
                theadText      = this.theadText,
                colSize        = this.colSize,
                fixcolumnnumber = opts.fixcolumnnumber,
                colhidden       = this.options.colhidden,
                sort            = this.sort,
                tr           = document.createElement("tr"),
                titleellipsis     = opts.titleellipsis,
                bindName = this.bindName,
                editType =this.editType,
                editTypeI,
                i, j, len;
            tr.className = "eg-width-norm";
            if (theadMapLen) {
                //控制空th的emptyth，多行表头需要。
                var emptyTh = document.createElement("th");
                emptyTh.className = "eg-empty-th";
                tr.appendChild(emptyTh);
                //去掉宽度
                for (var k = theadMapLen - 1; k--;) {
                    var theadMapK = theadMap[k];
                    for (var l = theadMapK.length; l--;) {
                        var theadMapKL = theadMapK[l];
                        theadMapKL.removeAttribute("width");
                        theadMapKL.style.width = "";
                    }
                }
            }
            for (i = 0; i < colSize; i += 1) {
                //生成控制宽度的dom
                var th = domHeadCol[i] = document.createElement("th");
                tr.appendChild(th);
                //渲染th
                var domThI = domTh[i];
                if (i < fixcolumnnumber) {
                    $(domThI).addClass("eg-fixed");
                }
                if (sort[i]) {
                    $(domThI).addClass("eg-sort");
                }
                //CSS
                domThI.removeAttribute("width");
                domThI.style.width = "";
                //html
                var theadTextI = theadText[i],
                    thHtml = [
                    '<div class="eg-fixed-d">',
                    '<span class="eg-fixed-s'
                    ];

                //判断可编辑列,并判断是否为必需
                editTypeI = editType[bindName[i]];
                if(editTypeI) {
                    $(domThI).addClass("eg-editable");
                    if (editTypeI.validate) {
                        editTypeI = editTypeI.validate;
                        for (j = 0, len = editTypeI.length; j < len; j++)  {
                            if (editTypeI[j].type === "required") {
                                theadTextI = '<i>*</i>' + theadTextI;
                                break;
                            }
                        }
                    }
                }

                thHtml.push('">');
                if (sort[i]) {
                    thHtml.push('<b class="eg-sort-icon-desc cui-icon">&#xf0d7;</b><b class="eg-sort-icon-asc cui-icon">&#xf0d8;</b>');
                }
                thHtml.push('<a class="eg-thead-text');
                if (titleellipsis) {
                    thHtml.push('" title="', $.trim(theadTextI.replace(/<.*?>/g, "")));
                }
                thHtml.push('">', theadTextI ,'</a>');

                thHtml.push( );
                if (colhidden) {
                    thHtml.push('<a class="eg-select cui-icon">&#xf0b0;</a>');
                }
                thHtml.push('<em class="eg-ittab"></em>');
                thHtml.push('</span>');
                if (i < fixcolumnnumber && !titleellipsis) {
                    thHtml.push(theadTextI);
                }
                thHtml.push('</div>');
                domThI.innerHTML = thHtml.join("");
            }

            this.gridHeadTable.html(this.elCache.find("thead").eq(0).prepend(tr));
            this.elCache.parent().remove(); //内存里面的内容没有用了，删除。
            delete this.elCache;
            //创建fixed dom 并设z-index样式
            for (j = 0; j < fixcolumnnumber; j += 1) {
                domTh[j].getElementsByTagName("div")[0].style.zIndex = fixcolumnnumber + 1 - j;
                domFixedJ.push(domTh[j].getElementsByTagName("span")[0]);
            }
            //多选设置
            var domTh0 = $(domTh[0]);
            if (opts.selectrows === "multi") {
                domTh0.find(".eg-select").eq(0).remove();
                domTh0.find(".eg-fixed-s").addClass("eg-no-move");
                var gridTheadText = $(domTh[0]).find(".eg-thead-text").addClass("eg-all-checkbox");
                gridTheadText.html(gridTheadText.text() + "<b></b>");
                this.gridAllCheck = gridTheadText;
            }
            //单选设置 去掉隐藏列按钮
            if (opts.selectrows === "single") {
                domTh0.find(".eg-select").eq(0).remove();
                domTh0.find(".eg-fixed-s").addClass("eg-no-move");
            }
        },
        /**
         * 创建tbody基础don
         * @private
         */
        __renderBody: function () {
            var el           = this.el,
                colSize     = this.colSize,
                domBodyCol = this.domBodyCol,
                tr           = document.createElement("tr");
            tr.className = "eg-width-norm";
            for (var i = 0; i < colSize; i += 1) {
                var th = domBodyCol[i] = document.createElement("th");
                tr.appendChild(th);
            }
            el.html("<thead></thead><tbody></tbody>");
            el.find("thead").append(tr);
            this.gridTbody = el.find("tbody").eq(0);
        },
        /**
         * 加快tbody的渲染速度,生成每一行的模板.
         */
        __packageTds: function () {
            var opts            = this.options,
                fixcolumnnumber = opts.fixcolumnnumber,
                renderStyle    = this.renderStyle,
                selectrows      = opts.selectrows,
                selectrowsClass = this.selectrowsClass = {
                    "no"    : "",
                    "multi" : "eg-checkbox",
                    "single": "eg-radio"
                }[selectrows],
                colSize = this.colSize,
                leftCss = "";
            if (!this.writeStyle) {
                leftCss = "left:0px;";
            }
            //生成每一行模板。
            var firstRow = [];
            var start = 0;
            if (selectrowsClass !== "") {
                start += 1;
                var td0 = firstRow[0] = {};
                if (fixcolumnnumber > 0) {
                    td0.html = [
                        '<div class="eg-fixed-d" style="z-index:',
                        fixcolumnnumber + 1,
                        ';"><span class="eg-fixed-s ',
                        selectrowsClass,
                        '" style="',
                        leftCss,
                        renderStyle[0],
                        '/**/">',
                        '</span></div>'
                    ].join("");
                    td0.style = "";
                } else {
                    td0.style = renderStyle[0];
                    td0.className = selectrowsClass;
                }
            }
            for (var i = start; i < colSize; i += 1) {
                var tdI = firstRow[i] = {};
                if (i < fixcolumnnumber) {
                    tdI.html = [
                        '<div class="eg-fixed-d" style="z-index:',
                        fixcolumnnumber + 1 - i,
                        ';"><span class="eg-fixed-s" style="' ,
                        leftCss,
                        renderStyle[i],
                        '/**/"><!---->',
                        '</div>'
                    ].join("");
                    tdI.style = "";
                } else {
                    tdI.style = renderStyle[i];
                }
            }
            this.tdsPackage = firstRow;
        },
        /**
         * 分配列宽,隐藏列不分配宽度.
         * adaptive === true, 且 gridWidth === tableWidth 的时候用到.
         * @returns {*}
         * @private
         */
        _setColWidth: function (scrolling) {
            var initColwidth = this.initColWidth,
                colHidden     = this.colHidden,
                tableWidth    = this.tableWidth,
                colSize       = this.colSize,
                sumWidth      = 0;
            for (var i = colSize; i--;) {
                if (colHidden[i] === false) { //显示
                    sumWidth += initColwidth[i];
                }
            }
            var newColwidth = [];
            var allWidth = 0;
            var last = 0;
            for (var j = colSize; j--;) {
                if (colHidden[j] === false) {
                    var width        = Math.round(initColwidth[j] * tableWidth / sumWidth);
                    allWidth       += width;
                    newColwidth[j] = width;
                    last             = j;
                } else {
                    newColwidth[j] = 0;
                }
            }
            newColwidth[last] += tableWidth - allWidth;
            this.colWidth       = newColwidth;
            this._setColWidthStyle();
            if (scrolling) {
                this._isScrolling(true);
            }
        },
        /**
         * 设置每列宽度
         * @private
         */
        _setColWidthStyle: function (index) {
            var colwidth    = this.colWidth,
                domHeadCol = this.domHeadCol,
                domBodyCol = this.domBodyCol,
                k            = this.colSize,
                colwidthK  = "",
                colwidthIndex;
            if (typeof index === "number") {
                colwidthIndex = colwidth[index] - 1 + "px";
                domHeadCol[index].style.width = colwidthIndex;
                domBodyCol[index].style.width = colwidthIndex;
            } else {
                for (; k--;) {
                    colwidthK = colwidth[k] === 0 ? 0 : colwidth[k] - 1 + "px";
                    domHeadCol[k].style.width = colwidthK;
                    domBodyCol[k].style.width = colwidthK;
                }
            }
        },
        /**
         * 隐藏列
         */
        _colHidden: function (init) {
            var rowSize         = this.rowSize,
                domTh           = this.domTh,
                domTd           = this.domTd,
                tdsPackage      = this.tdsPackage,
                domHeadCol     = this.domHeadCol,
                domBodyCol     = this.domBodyCol,
                colHidden       = this.colHidden,
                colwidth        = this.colWidth,
                colWidthBackup = this.colWidthBackup,
                tableWidth      = this.tableWidth,
                theadMap        = this.theadMap,
                extendTh        = this.extendTh,
                th               = null,
                thisDomTh      = null;
            for (var i = this.colSize; i--;) {
                if (colHidden[i] === true) {
                    if (colWidthBackup[i] === -1 || init) {
                        domHeadCol[i].style.display = "none";
                        thisDomTh = domTh[i];

                        if (theadMap.length) {
                            for (var p = theadMap.length; p--;) {
                                if (!extendTh[p][i]) {
                                    th = theadMap[p][i];
                                    if (th.colSpan > 1) {
                                        th.colSpan--;
                                    } else {
                                        th.style.display = "none";
                                    }
                                }
                            }
                        } else {
                            thisDomTh.style.display = "none";
                        }
                        for (var m = rowSize; m--;) {
                            domTd[m][i].style.display = "none";
                        }
                        domBodyCol[i].style.display = "none";
                        tdsPackage[i].style += "display:none;";
                        colWidthBackup[i] = colwidth[i];
                        tableWidth -= colwidth[i];
                        colwidth[i] = 0;
                    }
                } else {
                    if (colWidthBackup[i] !== -1) {
                        domHeadCol[i].style.display = "";
                        thisDomTh = domTh[i];

                        if (theadMap.length) {
                            for (var q = theadMap.length; q--;) {
                                if (!extendTh[q][i]) {
                                    th = theadMap[q][i];
                                    if (th.style.display === "none") {
                                        th.style.display = "";
                                    } else {
                                        th.colSpan += 1;
                                    }
                                }
                            }
                        } else {
                            thisDomTh.style.display = "";
                        }
                        for (var n = rowSize; n--;) {
                            domTd[n][i].style.display = "";
                        }
                        domBodyCol[i].style.display = "";
                        tdsPackage[i].style = tdsPackage[i].style.replace(/display.*?($|;)/g, "");
                        colwidth[i] = colWidthBackup[i];
                        tableWidth += colWidthBackup[i];
                        colWidthBackup[i] = -1;
                    }
                }
            }
            if (!this.options.adaptive) {
                this.tableWidth = tableWidth;
            } else {
                //自适应宽度
                this.isIttab = false;
            }
            this._setLayout();
            //持久化触发
            if (this.persistence && !init) {
                this._triggerStatusChange();
            }
        },
        /**
         * 持久化触发
         * @private
         */
        _triggerStatusChange: function () {
            var opts = this.options,
                query = this.query,
                colWidth = this.colWidth,
                colWidthBackup = this.colWidthBackup,
                colHidden = this.colHidden,
                colIndex = this.colIndex,
                isWidth = !opts.adaptive,
                isIndex = this.theadMap.length === 0 && opts.colmove,
                overall = 0,
                ret, width, index, i,newJson,
                hide = [];
            for (i = this.colSize; i--;) {
                if (colHidden[i]) {
                    colWidth[i] = colWidthBackup[i];
                    hide[i] = 1;
                } else {
                    hide[i] = 0;
                }
                overall += colWidth[i];
            }
            newJson = {
                "hide" : colHidden,
                "sortName" : query.sortName,
                "sortType" : query.sortType,
                "overall" : overall
            };
            if(window.JSON && JSON.stringify) {
                if (isIndex){
                    newJson.index = colIndex;
                }
                if (isWidth) {
                    newJson.width = colWidth;
                }
                ret = JSON.stringify(newJson);
            } else {
                ret = ["{",
                    isIndex ? ["\"index\":[", colIndex.join(","), "],"].join("") : "",
                    isWidth ? ["\"width\":[", colWidth.join(","), "],"].join("") : "",
                    "\"hide\":[", hide.join(","), "],",
                    "\"sortName\":[\"", query.sortName.join("\",\""), "\"],",
                    "\"sortType\":[\"", query.sortType.join("\",\""), "\"],",
                    //"\"width-backup\":[", colWidthBackup.join(","), "],",
                    "\"overall\":", overall,
                    "}"
                ].join("");
            }
            this.options.onstatuschange(ret);
        },
        /**
         * 判断横竖方向是否有滚动条
         * @private
         */
        _isScrolling: function (unSetColwidth) {
            var el             = this.el,
                gridWidth     = this.gridWidth + 2,
                tableWidth    = this.tableWidth,
                boxHeight     = this.boxHeight,
                contentHeight = el.height(),
                gridScroll    = this.gridScroll;
            if (this.options.adaptive && !this.isIttab) {
                //竖滚动条
                if (boxHeight < contentHeight) {
                    tableWidth = this.tableWidth = gridWidth - 17;
                } else {//没有滚动条
                    this.tableWidth = gridWidth;
                    tableWidth = gridWidth + 1;
                }
                el.css("width", tableWidth);
                this.gridHeadTable.css("width", tableWidth);
                // gridScroll[0].scrollLeft = 0;
                gridScroll.css("left", "-999999px");
                if (!unSetColwidth) {
                    this._setColWidth(true);
                    this._setLayout(true);
                }
            } else {
                //只有竖向滚动条
                if (boxHeight < contentHeight &&
                    gridWidth >= tableWidth + 17) {
                    this.gridTableHide.css("marginBottom", 0);
                    gridScroll.css({"left": "-999999px", "width" : gridWidth - 17});
                }
                //只有横向滚动条
                if (gridWidth < tableWidth &&
                    boxHeight >= contentHeight + 17) {
                    gridScroll.css({"width": gridWidth, "left" : 0, "bottom": ""});
                    gridScroll.css("bottom", 0);
                    this.gridTableHide.css("marginBottom", 17);
                }
                //双向滚动条;
                if (gridWidth < tableWidth + 17 &&
                    boxHeight < contentHeight || gridWidth < tableWidth &&
                    boxHeight < contentHeight + 17) {
                    gridScroll.css({"width": gridWidth - 17, "left" : 0, "bottom": ""});
                    gridScroll.css("bottom", 0); //由于Grid高度改变时，gridScroll的位置并不跟着改变（IE6）
                    this.gridTableHide.css("marginBottom", 17); //有横向
                }
                //没有滚动条
                if (boxHeight >= contentHeight &&
                    gridWidth >= tableWidth) {
                    this.gridTableHide.css("marginBottom", 0);
                    gridScroll.css({"left": "-999999px", "width" : gridWidth});
                }
            }
            gridScroll.find("div").eq(0).css("width", tableWidth);
            //重置滚动条
            clearTimeout(this.sc);
            this.sc = setTimeout (function () {
                gridScroll.scroll();
            }, 10);
        },
        /**
         * 高度自适应的时候,重新设置高度
         * @private
         */
        _setAutoHeight: function () {
            var gridTableBox, lineHeight;
            if (this.autoHeight) {
                gridTableBox = this.gridTableBox;
                lineHeight = 28;
                var marginBottom = parseInt(gridTableBox.css("marginBottom"), 10) || 1;
                var tableHeight = Math.max(gridTableBox.height() || this.rowSize * lineHeight, 50);
                this._setHeight(tableHeight + marginBottom + this.theadHeight + (this.options.pagination && this.rowSize ? 41 : 0) + 2);
            }
        },
        /**
         * 布局:包括外框宽高设置,col宽度设置.
         * @private
         */
        _setLayout: function (notSetScrolling) {
            if (this.editObj) {
                //销毁可编辑
                this._destroyFormEle();
            }
            this._setStyleWidth();
            //重设题头高度
            if (this.options.fixcolumnnumber || !this.options.titleellipsis) {
                this._setTheadHeight();
            }
            this._setStyleHeight();

            if (!notSetScrolling) {
                this._isScrolling();
            }
            this._setAutoHeight();
        },
        /**
         * 题头允许换行时需要调用
         * @private
         */
        _setTheadHeight: function () {
            this.gridHead.css("height", "auto");
            var newTheadHeight = this.theadHeight = this.gridHead.height(),
                domFixed0      = this.domFixed[0],
                isQm = this.isQm;
            this.boxHeight      = this.gridHeight - this.paginationHeight - newTheadHeight - 1;
            this.gridOverlay.css("height", newTheadHeight);
            for (var i = domFixed0.length; i--;) {
                var domFixed0I = domFixed0[i],
                    div = $(domFixed0I).parent(),
                    thHeight = parseInt(div.parent().height(), 10),
                    paddingTop = parseInt((thHeight - (div.height() || 21)) / 2, 10);
                paddingTop = paddingTop < 0 ? 0 : paddingTop;
                domFixed0I.style.paddingTop = paddingTop + "px";
                domFixed0I.style.height = thHeight - (isQm ? 0 : (paddingTop + 1)) + "px";
            }
        },
        /**
         * 设置持久化数据
         * @param {String} config
         */
        setConfig: function (config) {
            if (this.persistence && this.unRender) {
                this._setPersistence(config);
            }
            this.options.datasource(this, this.getQuery());
        },
        /**
         * 加载数据
         */
        setDatasource: function (data, totalSize, persistenceConf) {
            if (this.editObj) {
                this._destroyFormEle();
            }
            if (this.persistence && this.unRender && typeof persistenceConf === "string") {
                this._setPersistence(persistenceConf);
            }
            data = data || [];
            totalSize = totalSize || 0;
            this.rowSize = data.length;
            this.data = $.extend(true, [], data);
            //处理分页
            if (this.options.pagination) {
                this.totalSize = totalSize;
                //第一次渲染,加载分页
                if (this.unRender) {
                    this.__createPagination();
                } else {
                    //totalSize变化,重载分页
                    this._changepages();
                }
            }
            this._isEmpty();
            //渲染开始
            this._initProperty();
            this._renderTbody(NaN, NaN);
            if(this.autoHeight && typeof this.options.resizewidth === "function") {
                this.resize();
            } else {
                this._setLayout();
            }
            this._loading("hide");
            this._loadCompleteCallBack();
            this.__setSortStyle();
            delete this.unRender;
        },
        /**
         * 持久化还原设置
         * @private
         */
        _setPersistence : function (conf) {
            var json,
                opts = this.options,
                colSize = this.colSize,
                index, sortName,sortType, hide, width, i,
                bindName = this.bindName,
                editType = this.editType;
            if (typeof conf === "string") {
                try {json = $.parseJSON(conf);} catch(e) {}
                if (json) {
                    if (json.overall) {
                        this.tableWidth = json.overall;
                        this.gridHeadTable.css("width", this.tableWidth);//是否要设置table的宽度
                    }
                    index = json.index;
                    if (this.theadMap.length === 0 && opts.colmove &&
                        typeof index === "object" && colSize === index.length) {
                        this.colIndex = index;
                        this._sortPropertys(index);
                    }
                    this._createPropertys();
                    sortName = json.sortName;
                    sortType = json.sortType;
                    if ($.type(sortName) === "array" && $.type(sortType) === "array") {
                        this.setQuery({
                            sortName : sortName,
                            sortType : sortType
                        });
                    }
                    hide = json.hide;
                    if (typeof hide === "object" && colSize === hide.length) {
                        //可编辑列不能隐藏
                        for (i = 0; i < colSize; i ++) {
                            if (editType[bindName[i]]) {
                                hide[i] = false;
                            } else {
                                hide[i] = !!hide[i];
                            }
                        }
                        this.colHidden = hide;
                    }
                    width = json.width;
                    if (!opts.adaptive && typeof width === "object" &&
                        colSize === width.length) {//自适应模式下，不支持列宽持久化。
                        this.colWidth = width;
                    }
                } else {
                    this._createPropertys();
                }
            } else {
                this._createPropertys();
            }
            this._createContent();
        },
        /**
         * 持久化设置排序
         * @private
         */
        _sortPropertys: function (index) {
            var colSize = this.colSize, thsBox,
                domTh, newDomTh, i;
            domTh = this.domTh;
            newDomTh = [];
            thsBox = domTh[0].parentNode;
            for (i = 0; i < colSize; i++) {
                newDomTh[i] = domTh[index[i]];
                thsBox.appendChild(newDomTh[i]);
            }
            this.domTh = newDomTh;
        },
        /**
         * 是否数据是空
         * @private
         */
        _isEmpty: function () {
            var opts = this.options;
            var rowSize = this.rowSize;
            //判断是否显示分页
            if (rowSize === 0) {
                this.gridEmpty.show();
                this.gridTfoot.hide();
                //this.gridTableBox.hide();
                this.paginationHeight = 0;
                var self = this;
                this.gridTableBoxTimer=setTimeout(function(){
                    self.gridTableBox.hide();
                },10);
            } else {
                this.gridEmpty.hide();
                this.gridTableBox.show();
                clearTimeout(this.gridTableBoxTimer);
                if (opts.pagination) {
                    this.gridTfoot.show();
                    this.paginationHeight = 41;
                }
            }
            //根据分页 重设boxHeight
            this.boxHeight = this.gridHeight - this.paginationHeight - this.theadHeight;
        },
        /**
         * 重载数据,需要初始化属性
         * @private
         */
        _initProperty: function () {
            var self = this;
            setTimeout(function () {
                self.gridBody[0].scrollTop = 0;
            }, 1);
            this.gridTableBox.removeAttr("style");
            this.heightLight     = [];
            this.domTr           = [];
            this.domTd           = [];
            this.domFixed.length = 1;
            this.multiChecked    = [];
            this.multiCheckedNum= 0;
            this.singleChecked   = NaN;
            this.disabledIndex = [];
            this.odd              = false;
            this.renderComplete  = false;
            if (this.gridAllCheck) {
                this.gridAllCheck.removeClass("eg-all-checkbox-checked");
            }
            this.gridTbody.html("");
            //可编辑相关数据初始化
            this.editObj = null;
            this.changeEditData = {
                "insertData" : {},
                "updateData" : {},
                "deleteData" : []
            };
            this.insertId = 0;
            this.validateState = {
                "insert": {},
                "update": {}
            };
            this.isChanged = false;
            this.dataBackup = {};
        },
        /**
         * 载入数据
         */
        loadData: function () {
            this._loading("show");
            this.options.datasource(this, this.getQuery());
        },
        /**
         * 追加数据
         * @public
         */
        _addData: function (data, position) {
            if ($.type(data) === "object") {
                data = [data];
            }
            var opts = this.options,
                disabledIndex = this.disabledIndex,
                len = data.length;
            if (len === 0) {
                return;
            }
            data = $.extend(true, [], data);
            if (this.unRender) { //如果未 setDatasource过.
                this.setDatasource(data);
                return;
            }
            var selectrows  = opts.selectrows;
            if (typeof position === "number" && position < this.rowSize) {
                this._spliceArray(this.data, position, data);
                if (opts.primarykey && disabledIndex.length) {
                    this._spliceArray(disabledIndex, position, new Array(len));
                }
                if (selectrows === "multi") {
                    this._spliceArray(this.multiChecked, position, new Array(len));
                } else if (selectrows === "single" && position < this.singleChecked) {
                    this.singleChecked += len;
                }
            } else {
                this.data = this.data.concat(data);
            }
            this.rowSize += len;
            this._isEmpty();
            this._renderTbody(len, position);
            if (this.paginationObj) {
                this._changepages();
            }
            if(this.autoHeight && typeof opts.resizewidth === "function") {
                this.resize();
            } else {
                this._setLayout();
            }
        },
        /**
         * 渲染分页
         * @private
         */
        __createPagination: function () {
            var opts = this.options,
                query = this.query;
            if (!opts.pagination) {
                return;
            }
            var self = this;
            window.cui(this.gridTfoot).pagination({
                count         : this.totalSize,
                pagesize      : query.pageSize,
                pageno        : query.pageNo,
                pagesize_list : opts.pagesize_list,
                tpls          : {pagination: opts.pagination_model},
                cls           : opts.pagination_model,
                on_page_change: function (pageno, pagesize) {
                    var tmp = $.extend({}, query);
                    //前置，避免翻页提交时pageNo还在上一页
                    query.pageNo = pageno;
                    query.pageSize = pagesize;

                    var result = self.submit();
                    if (result === "fail") {
                        //验证不过
                        query.pageNo = tmp.pageNo;
                        query.pageSize = tmp.pageSize;
                        return false;
                    }
                    //提交，如不需要提交则直接加载
                    if (result === "noChange") {
                        self.loadData();
                    }
                    self._changepages();
                }
            });
            this.paginationObj = window.cui(this.gridTfoot);
        },
        /**
         * 翻页事件
         * @private
         */
        _changepages: function () {
            var query = this.query;
            this.paginationObj.setInitData({
                count : this.totalSize,
                pagesize : query.pageSize,
                pageno   : query.pageNo
            });
            this.paginationObj.reDraw();
        },
        /**
         * 中间插入数组
         * @private
         */
        _spliceArray: function (source, position, target) {
            Array.prototype.splice.apply(source, [position, 0].concat(target));
            return source;
        },
        /**
         * 渲染tbody
         * @private
         */
        _renderTbody: function (addSize, position) {
            var data        = this.data,
                rowSize    = this.rowSize,
                oldRowSize = rowSize - addSize,
                gridTbody = this.gridTbody[0];
            if (rowSize === 0) {
                this.renderComplete      = true;
                return;
            }
            this.renderComplete = false;
            if (!isNaN(addSize)) {

                //全选取消选中
                if (this.gridAllCheck) {
                    this.gridAllCheck.removeClass("eg-all-checkbox-checked");
                }
                if (typeof position === "number" && position < oldRowSize) {
                    //删除index属性.
                    var dom = this._dataToDom(data, position, position + addSize),
                        addTr = dom.domTr,
                        domTr = this.domTr,
                        domTrPosition = domTr[position];
                    for (var j = position; j < oldRowSize; j += 1) {
                        domTr[j].removeAttribute("index");
                    }
                    //获取dom
                    this._spliceArray(this.domTr, position, addTr);
                    this._spliceArray(this.domTd, position, dom.domTd);
                    this._spliceArray(this.domFixed, position + 1, dom.domFixed);
                    for (var i = 0; i < addSize; i += 1) {
                        gridTbody.insertBefore(addTr[i], domTrPosition);
                    }
                    this._setOddEven(position);
                    this._setNum(position);
                } else {
                    this._appendRows(oldRowSize, rowSize);
                }
                this._setAutoHeight();
            } else {
                this._appendRows(0, rowSize);
            }
        },
        /**
         * 渲染完成回调
         * @private
         */
        _loadCompleteCallBack: function () {
            var loadcompleteCallback = this.options.loadcomplete_callback;
            if (typeof loadcompleteCallback === "function") {
                loadcompleteCallback.call(this, this);
            }
        },
        /**
         * 设置排序样式
         * @private
         */
        __setSortStyle: function () {
            var query = this.query,
                sortType = query.sortType,
                sortName = query.sortName,
                len = sortName.length,
                bindName     = this.bindName,
                domTh        = this.domTh,
                i, j, domThJ, bindNameJ,
                sortStr = {"DESC":"desc", "ASC" : "asc"};
            loopOuter: for (j = this.colSize; j--;) {
                bindNameJ = bindName[j];
                domThJ = $(domTh[j]);
                domThJ.find("span > b").hide();
                for (i = 0; i < len; i++) {
                    if (sortName[i] === bindNameJ) {                      
                        domThJ.find(".eg-sort-icon-" + sortStr[sortType[i]].toLocaleLowerCase()).show();
                        continue loopOuter;
                    }
                }
            }
        },
        /**
         * data转换成每一行的dom
         * @param data
         * @param start
         * @param end
         * @param changeIndex  修改行数据的时候使用
         * @returns {{domTd: Array, domTr: Array, domFixed: Array}}
         * @private
         */
        _dataToDom: function (data, start, end,changeIndex) {
            var opts                = this.options,
                oddEvenClass        = this.oddEvenClass,
                oddevenrow          = opts.oddevenrow,
                ellipsis            = opts.ellipsis,
                colSize            = this.colSize,
                domTh              = this.domTh,
                tdsPackage         = this.tdsPackage,
                bindName           = this.bindName,
                fixcolumnnumber     = opts.fixcolumnnumber,
                numCol             = this.numCol,
                //单元格内容渲染
                colRender          = this.colRender,
                //样式渲染
                rowstylerender      = opts.rowstylerender,
                colstylerender      = opts.colstylerender,
                rowstylerenderAble = typeof rowstylerender === "function",
                colstylerenderAble = typeof colstylerender === "function",
                renderMethod       = this.renderMethod,
                heightLight        = this.heightLight,
                colStart           = (this.selectrowsClass !== "") ? 1 : 0,
                odd                 = this.odd,
                primarykey          = opts.primarykey,
                createDomBox      = this.createDomBox,
                table = ['<table>'];
            for (var j = start; j < end; j += 1) {
                table.push('<tr class="');
                if (oddevenrow) {
                    if (odd) {
                        table.push(oddEvenClass);
                    }
                    odd = !odd;
                }
                if (heightLight[j]) {
                    table.push(" eg-highlight");
                }
                table.push('"');
                var dataJ = data[j];
                if (dataJ.hasOwnProperty(primarykey)) {
                    table.push(' pkey="');
                    table.push(String(dataJ[primarykey]));
                    table.push('"');
                }
                if (rowstylerenderAble) {
                    var rowstyle = rowstylerender(dataJ);
                    if (typeof rowstyle === "string") {
                        table.push(' style="', rowstyle, '"');
                    }
                }
                table.push('>');
                if (colStart === 1) {
                    var tdsPackage0 = tdsPackage[0];
                    table.push('<td class="eg-select-input ');
                    if (fixcolumnnumber > 0) {
                        table.push('eg-fixed');
                        table.push('" style="', tdsPackage0.style, '">', tdsPackage0.html, '</td>');
                    } else {
                        table.push(tdsPackage0.className);
                        table.push('" style="', tdsPackage0.style, '"></td>');
                    }

                }
                var tdsPackageI   = "",
                    colstyle        = "",
                    bindNameI     = "",
                    value           = "",
                    render          = "",
                    colRenderI    = null,
                    colRenderI0  = null,
                    colRenderI1  = null,
                    colJson        = null;
                for (var i = colStart; i < fixcolumnnumber; i += 1) {
                    bindNameI = bindName[i];
                    //渲染文字
                    if (numCol === i) {
                        value = j + bindNameI;
                    } else {
                        if (!bindNameI) {
                            value = "";
                        } else {
                            value = dataJ[bindNameI];
                        }
                    }

                    //value = C.String.htmlEncode(value, opts.XSSDefense);
                    
                    var tagHtml   = "", method = "";
                    colRenderI   = colRender[i];
                    colRenderI0 = colRenderI[0];
                    colRenderI1 = colRenderI[1];
                    if (colRenderI1) {
                        value = colRenderI1.callback(value, colRenderI1.format) || value;
                    }
                    if (colRenderI0) {
                        render = colRenderI0.render;
                        method = colRenderI0.method;
                        switch (render) {
                            case "colrenderFn" :
                                value = colRenderI0.callback(dataJ, bindNameI) || value;
                                break;
                            case "renderFn" :
                                colJson = colRenderI0.colJson;
                                colJson.el = domTh[i];
                                colJson.bindName = bindNameI;
                                value = colRenderI0.callback.call(this,dataJ, typeof changeIndex==="undefined"?j:changeIndex, colJson) || value;
                                break;
                            case "fiexdFn" :
                                value = renderMethod[method](dataJ, colRenderI0.options, value) || value;
                                break;
                        }
                    }
                    if (method === "button" || ellipsis) {
                        tagHtml = [value, "</span>"].join("");
                    } else {
                        tagHtml = [value, "</span>", value].join("");
                    }
                    tdsPackageI = tdsPackage[i];
                    var html = tdsPackageI.html.replace("<!---->", tagHtml);
                    table.push('<td class="eg-fixed" style="', tdsPackageI.style, '">');
                    if (colstylerenderAble) {
                        colstyle = colstylerender(dataJ, bindNameI);
                        if (typeof colstyle === "string") {
                            html = html.replace("/**/", colstyle);
                        }
                    }
                    table.push(html, '</td>');
                }
                for (; i < colSize; i += 1) {
                    bindNameI = bindName[i];
                    tdsPackageI = tdsPackage[i];
                    if (numCol === i) {
                        value = j + bindNameI;
                    } else {
                        if (!bindNameI) {
                            value = "";
                        } else {
                            value = dataJ[bindNameI];
                        }
                    }

                    //value = C.String.htmlEncode(value, opts.XSSDefense);
                    
                    colRenderI   = colRender[i];
                    colRenderI0 = colRenderI[0];
                    colRenderI1 = colRenderI[1];
                    if (colRenderI1) {
                        value = colRenderI1.callback(value, colRenderI1.format) || value;
                    }
                    if (colRenderI0) {
                        render = colRenderI0.render;
                        switch (render) {
                            case "colrenderFn" :
                                value = colRenderI0.callback(dataJ, bindNameI) || value;
                                break;
                            case "renderFn" :
                                colJson          = colRenderI0.colJson;
                                colJson.el       = domTh[i];
                                colJson.bindName = bindNameI;
                                value             = colRenderI0.callback.call(this,dataJ, typeof changeIndex==="undefined"?j:changeIndex, colJson) || value;
                                break;
                            case "fiexdFn" :
                                value = renderMethod[colRenderI0.method](dataJ, colRenderI0.options, value) || value;
                                break;
                        }
                    }
                    //绑定td样式
                    var tdStyle = tdsPackageI.style;
                    if (colstylerenderAble) {
                        colstyle = colstylerender(dataJ, bindNameI);
                        if (typeof colstyle === "string") {
                            tdStyle += ";" + colstyle;
                        }
                    }

                    //如果是input并且设有mask=Int\Dec\Money
                    var uOpts = this.options.edittype[bindNameI] || {};
                    if(uOpts.uitype && uOpts.uitype.toLowerCase() === 'input' && value !== null && value !== undefined){
                        var maskOptions;
                        value = value + '';
                        switch (uOpts.mask){
                            case 'Int':
                                maskOptions = $.extend({
                                    prefix: '',
                                    separator: ','
                                }, uOpts.maskoptions);
                                value = C.Number.money(value, 0, maskOptions);
                                break;
                            case 'Dec':
                                maskOptions = $.extend({
                                    prefix: '',
                                    separator: ',',
                                    precision: null
                                }, uOpts.maskoptions);
                                value = C.Number.money(value, maskOptions.precision, maskOptions);
                                break;
                            case 'Money':
                                maskOptions = $.extend({
                                    prefix: '',
                                    separator: ',',
                                    precision: 2
                                }, uOpts.maskoptions);
                                value = C.Number.money(value, maskOptions.precision, maskOptions);
                                break;
                        }
                    }
                    table.push('<td style="', tdStyle, '">', value, '</td>');
                }
                table.push('</tr>');
            }
            this.odd = odd;
            table.push('</table>');
            createDomBox.innerHTML = table.join("");
            var domTr           = [],
                domTd           = [],
                domFixed        = [],
                domTable        = createDomBox.getElementsByTagName("table")[0];
            for (var m = 0, len = end - start; m < len; m += 1) {
                var domTrM = domTable.rows[m];
                domTr.push(domTrM);
                var domTdM = [];
                var domFixedM = [];
                for (var n = 0; n < colSize; n += 1) {
                    var domThN = domTrM.cells[n];
                    domTdM.push(domThN);
                    if (n < fixcolumnnumber) {
                        domFixedM.push(domThN.getElementsByTagName("span")[0]);
                    }
                }
                domTd.push(domTdM);
                domFixed.push(domFixedM);
            }
            return {
                domTd: domTd,
                domTr: domTr,
                domFixed: domFixed
            };
        },
        /**
         * 后面插入行
         * @param start
         * @param end
         * @private
         */
        _appendRows: function (start, end) {
            var dom        = this._dataToDom(this.data, start, end);
            this.domTr    = this.domTr.concat(dom.domTr);
            this.domTd    = this.domTd.concat(dom.domTd);
            this.domFixed = this.domFixed.concat(dom.domFixed);
            var domTr     = this.domTr;
            var gridTbody = this.gridTbody[0];
            for (var i = start; i < end; i += 1) {
                gridTbody.appendChild(domTr[i]);
            }
            this.renderComplete = true;
        },
        /**
         * 重新设置奇数偶数行样式
         * @private
         */
        _setOddEven: function (position) {
            var opts         = this.options;
            if (!opts.oddevenrow) {
                return;
            }
            var domTr       = this.domTr,
                rowSize      = this.rowSize,
                oddEvenClass = this.oddEvenClass,
                odd          = this.odd = position % 2 === 0,
                i            = position;
            for (; i < rowSize; i += 1) {
                if (!odd) {
                    $(domTr[i]).addClass(oddEvenClass);
                } else {
                    $(domTr[i]).removeClass(oddEvenClass);
                }
                odd = !odd;
            }
        },
        /**
         * 重设行号
         * @private
         */
        _setNum: function (position) {
            if (isNaN(this.numCol)) {
                return;
            }
            var domTd    = this.domTd,
                domFixed = this.domFixed,
                numCol   = this.numCol,
                start     = this.bindName[numCol],
                i         = position,
                rowSize   = this.rowSize;
            if (this.options.fixcolumnnumber > numCol) {
                for (; i < rowSize; i += 1) {
                    var domFixedI = domFixed[i + 1][numCol];
                    var value = i + start;
                    domFixedI.innerHTML = value;
                    if(domFixedI.nextSibling){
                        domFixedI.nextSibling.nodeValue = value;
                    }
                }
            } else {
                for (; i < rowSize; i += 1) {
                    domTd[i][numCol].innerHTML = i + start;
                }
            }
        },
        /**
         * 隐藏列,需要判断是否属于可编辑列，可编辑列不能被隐藏
         * @param hideBindName
         */
        hideCols: function (hideBindName) {
            if ($.type(hideBindName) !== "object") {
                return;
            }
            var colHidden = this.colHidden,
                colSize   = this.colSize,
                bindName  = this.bindName,
                bindNameI, falg,
                editType = this.editType;
            for (var i = 0; i < colSize; i += 1) {
                bindNameI = bindName[i];
                falg = hideBindName[bindNameI];
                if (editType[bindNameI]) {
                    colHidden[i] = false;
                } else if (typeof falg === "boolean") {
                    colHidden[i] = falg;
                }
            }
            this._colHidden(false);
        },
        /**
         * 获取查询参数
         */
        getQuery: function () {
            var newQuery = $.extend(true, {}, this.query),
                customQuery = this.customQuery;
            if (!customQuery) {
                return newQuery;
            }
            customQuery.pageSize = newQuery.pageSize;
            customQuery.pageNo = newQuery.pageNo;
            customQuery.sortName = $.extend([], newQuery.sortName);
            customQuery.sortType = $.extend([], newQuery.sortType);
            return customQuery;
        },
        /**
         * 设置查询参数
         * @param query
         */
        setQuery: function (query) {
            if (typeof query === "object") {
                this.customQuery = query;
            }
            query         = query || this.backupQuery;
            var sortstyle = this.options.sortstyle,
                newQuery = this.query;
            if (typeof query.pageSize === "number") {
                newQuery.pageSize = query.pageSize;
            }
            if (typeof query.pageNo === "number") {
                newQuery.pageNo = query.pageNo;
            }
            if ($.type(query.sortName) === "array") {
                newQuery.sortName = $.extend([], query.sortName);
                if (newQuery.sortName.length > sortstyle) {
                    newQuery.sortName.length = sortstyle;
                }
            }
            if ($.type(query.sortType) === "array") {
                newQuery.sortType = $.extend([], query.sortType);
                if (newQuery.sortType.length > sortstyle) {
                    newQuery.sortType.length = sortstyle;
                }
            }
            this._setPageSize();
            this._setSortTypeObj();
        },
        /**
         * 内部用的设置高度
         * @param height
         * @private
         */
        _setHeight: function (height) {
            if (typeof height !== "number" || height - 2 === this.gridHeight) {
                return false;
            }
            height          -= 2;
            this.boxHeight -= this.gridHeight - height;
            this.gridHeight = height;
            //this.isIttab = false;
            //高度改变,触发延迟加载
            this._setLayout();
            if (this.options.colhidden && this.hideCol.hideCol) {
                this.hideCol.hideCol.blur();
            }
            return true;
        },
        /**
         * 设置组件高度
         */
        setHeight: function (height) {//这个函数 要考虑分页部分的高度.
            this.autoHeight = !this._setHeight(height);
        },
        /**
         * 设置组件宽度
         */
        setWidth: function (width) {
            if (typeof width !== "number" || width - 2 === this.gridWidth) {
                return true;
            }
            var ittab = this.ittab; //修复IE下面出现滚动条，触发resize的bug
            if (ittab && ittab.ittabActive) {
                return;
            }
            width -= 2;
            if (this.options.adaptive) {
                this.tableWidth = width - 17;
                this.isIttab = false;
            }
            this.gridWidth = width;
            this._setLayout();
            if (this.options.colhidden && this.hideCol.hideCol) {
                this.hideCol.hideCol.blur();
            }
        },
        /**
         * 设置行高亮
         * @param pk
         * @param flag
         */
        setHighLight: function (pk, flag) {
            var index = this._pkToIndex(pk, false)[0];
            if (index === undefined) {
                return;
            }
            if (flag !== false) {
                $(this.domTr[index]).addClass("eg-highlight");
            } else {
                $(this.domTr[index]).removeClass("eg-highlight");
            }
            this.heightLight[index] = flag !== false;
        },
        /**
         * 通过序列选择行
         * @param index
         * @param flag
         * @returns {Array}
         */
        _selectRowsByIndex: function (index, flag) {
            flag = flag !== false;
            var opts = this.options,
                selectrows = opts.selectrows,
                data = this.data,
                dataI,
                ret = [],
                index0, indexI,
                disabledIndex = this.disabledIndex;
            if (selectrows === "no" || index >= this.rowSize) {
                return [];
            }
            if (flag !== false) {
                flag = true;
            }
            if (typeof index === "number") {
                index = [index];
            }
            if (selectrows === "single") {
                index0 = index[0];
                if (index0 > -1 && !disabledIndex[index0]) {
                    this._selectRows(index0, flag);
                    ret.push(data[index0]);
                }
            } else {
                for (var i = 0, len = index.length; i < len; i += 1) {
                    indexI = index[i];
                    if (!disabledIndex[i]) {
                        this._selectRows(indexI, flag);
                        ret.push(data[indexI]);
                    }
                }
            }
            return ret;
        },
        /**
         * 通过主键获取行号
         * @param pks
         * @param getInvalid 是否在匹配不上的时候返回-1
         * @returns {Array}
         * @private
         */
        _pkToIndex: function (pks, getInvalid) {
            var data = this.data,
                rowSize = this.rowSize,
                primarykey = this.options.primarykey;
            if (pks === undefined) {
                return [];
            }
            if ($.type(pks) !== "array") {
                pks = [pks];
            }
            var len = pks.length;
            var indexs = [];
            for (var i = 0; i < len; i += 1) {
                var pksI = pks[i] + "",
                    hasVal = false;
                for (var j = rowSize; j--;) {
                    if (data[j][primarykey] + "" === pksI) {
                        indexs.push(j);
                        hasVal = true;
                        break;
                    }
                }
                if (!hasVal && getInvalid) {
                    indexs.push(-1);
                }
            }
            return indexs;
        },
        /**
         * 通过主键选择行
         * @param pks
         * @param flag
         * @returns {*}
         */
        selectRowsByPK: function (pks, flag) {
            var opts = this.options;
            if ("array string number".indexOf($.type(pks)) === -1 ||
                opts.selectrows === "no" || !this.rowSize) {
                return [];
            }
            return this._selectRowsByIndex(this._pkToIndex(pks, true), flag);
        },
        selectRowsByIndex:function(rows,flag){
            return this._selectRowsByIndex(rows, flag);
        },
        /**
         * 禁用pk为啥啥啥的不能被选择，选中的便取消。
         * @param pks
         * @param flag
         */
        disableRows: function (pks, flag) {
            if (this.editObj) {
                this._destroyFormEle();
            }
            var
                opts = this.options,
                type = $.type(pks),
                indexs, indexsI,
                i, len,
                domTr, tr,
                disabledIndex = this.disabledIndex;
            if ("array string number".indexOf(type) === -1 ||
                opts.selectrows === "no" || !this.rowSize) {
                return;
            }
            flag = flag === undefined ? true : flag;
            if (flag) {
                this.selectRowsByPK(pks, false);
            }

            indexs = this._pkToIndex(pks, false);

            domTr = this.domTr;
            for (i = 0, len = indexs.length; i < len; i++) {
                indexsI = indexs[i];
                tr = $(domTr[indexsI]);
                if (flag) {
                    tr.addClass("eg-disable-row");
                } else {
                    tr.removeClass("eg-disable-row");
                }
                disabledIndex[indexsI] = flag;
            }
        },
        /**
         * 删除行操作.
         */
        _removeRow: function (row) {
            var data = this.data;
            var removeData = data[row];
            this.data.splice(row, 1);
            $(this.domTr[row]).remove();
            this.domTr.splice(row, 1);
            this.domTd.splice(row, 1);
            this.multiChecked.splice(row, 1);
            this.disabledIndex.splice(row, 1);
            if (this.singleChecked > row){
                this.singleChecked--;
            }
            this.domFixed.splice(row + 1, 1);
            return removeData;
        },
        /**
         * 删除行
         */
        _removeData: function (rows) {
            if (typeof rows === "number" || $.type(rows) === "array") {
                if (typeof rows === "number") {
                    rows = [rows];
                }
                rows.sort(function (a, b) {
                    return a - b;
                });
                var len            = rows.length,
                    removeDatas   = [],
                    singleChecked = this.singleChecked,
                    multiChecked  = this.multiChecked,
                    opts           = this.options,
                    selectrows     = opts.selectrows;
                for (var i = 0; i < len; i += 1) {
                    var rowsI = rows[i] - i;
                    var thisRowSize = this.rowSize;
                    if (isNaN(rowsI) || rowsI >= thisRowSize) {
                        rows[i] = 0;
                        break;
                    }
                    this.rowSize = thisRowSize - 1;
                    //选中重设
                    if (selectrows === "multi") {
                        if (multiChecked[rowsI] === true) {
                            this.multiCheckedNum--;
                        }
                    } else if (selectrows === "single" && singleChecked === rowsI) {
                        this.singleChecked = NaN;
                    }
                    var removeData = this._removeRow(rowsI);
                    if (removeData) {
                        removeDatas.push(removeData);
                    }
                }
                var rowSize = this.rowSize;
                //判断是否需要跳转上一页
                if (rowSize <= 0) {
                    if (this.query.pageNo > 1) {
                        this.query.pageNo -= 1;
                    }
                    this.rowSize = 0;
                    this._isEmpty();
                } else {
                    //判断是否全选
                    if (opts.selectrows === "multi") {
                        if (this.multiCheckedNum === rowSize) {
                            this.gridAllCheck.addClass("eg-all-checkbox-checked");
                        } else {
                            this.gridAllCheck.removeClass("eg-all-checkbox-checked");
                        }
                    }
                    //重设index
                    var domTr = this.domTr;
                    for (var j = this.rowSize; j--;) {
                        domTr[j].removeAttribute("index");
                    }
                    var rows0 = rows[0] - 0;
                    this._setOddEven(rows0);
                    this._setNum(rows0);
                }
                if(this.autoHeight && typeof this.options.resizewidth === "function") {
                    this.resize();
                } else {
                    this._setLayout();
                }
            }
        },
        /**
         * 改变某行数据
         * @param newData
         * @param index
         * @param currBindName
         * @private
         */
        _changeValue: function (newData, index, currBindName) {
            if ($.type(newData) !== "object") {
                return;
            }

            var opts = this.options,
                item,
                primarykey = opts.primarykey,
                pkValue = newData[primarykey],
                dom, newDomTd, oldDomTd,
                dataIndex,
                bindName= this.bindName,
                bindNameI, oldTdI,
                fixcolumnnumber = opts.fixcolumnnumber;
            if (index === undefined) {
                index = this._pkToIndex(pkValue, false)[0];
            }
            if (index < 0 || index >= this.rowSize) {
                return;
            }
            oldDomTd = this.domTd[index];
            dataIndex = $.extend({},this.data[index]);
            for (var i in newData) {
                item = newData[i];

                if (!dataIndex.hasOwnProperty(i) || item === undefined || item === dataIndex[i]) {
                    continue;
                }

                if ($.type(item) === "object") {
                    dataIndex[i] = item.value;
                    newData[i] = item.text;
                } else {
                    dataIndex[i] = item;
                }
            }
            newData = $.extend({}, dataIndex, newData);
            dom = this._dataToDom([newData], 0, 1);
            newDomTd = dom.domTd[0];
            //替换数据
            this.odd = !this.odd;
            for (var i = this.colSize; i--;) {
                bindNameI = bindName[i];
                //if (bindNameI === currBindName || this.data[bindNameI] === newData[bindNameI]) {
                //部分场景，需要对编辑列进行还原修改
                if (this.data[bindNameI] === newData[bindNameI]) {
                    //当前触发列不修改
                    continue;
                }
                oldTdI = $(oldDomTd[i]);
                oldTdI.removeAttr("title");
                if (i < fixcolumnnumber) {
                    if (typeof bindNameI !== "number") {
                        var oldSpan = oldTdI.find(".eg-fixed-s")[0];
                        var value    = $(newDomTd[i]).find(".eg-fixed-s")[0].innerHTML;
                        oldSpan.innerHTML = value;
                        if(oldSpan.nextSibling){
                            oldSpan.nextSibling.nodeValue = value;
                        }
                    }
                } else if (typeof bindNameI !== "number") {
                    oldTdI.html(newDomTd[i].innerHTML);
                }
            }
            this.data[index] = newData;
        },
        /**
         * 获取数据
         */
        getData: function () {
            if(this.editObj){
                this._destroyFormEle();
            }
           return $.extend(true, [], this.data); 
        },
        /**
         * 获取选中行数据集
         * @returns {Array}
         */
        getSelectedRowData: function () {
            if (this.editObj) {
                this._destroyFormEle();
            }
            var selectrows = this.options.selectrows;
            if (selectrows === "no") {
                return [];
            }
            var data = this.data;
            if (selectrows === "single") {
                return isNaN(this.singleChecked) ? [] : [data[this.singleChecked]];
            }
            if (this.multiCheckedNum === this.rowSize) {
                return this.data;
            }
            var multiChecked = this.multiChecked;
            var rowSize = this.rowSize;
            var ret = [];
            for (var i = 0; i < rowSize; i += 1) {
                if (multiChecked[i]) {
                    ret.push(data[i]);
                }
            }
            return ret;
        },
        /**
         * 获取选中行主键,新增行没有主键
         * @returns {Array}
         */
        getSelectedPrimaryKey: function () {
            if (this.editObj) {
                this._destroyFormEle();
            }
            var opts        = this.options,
                selectrows  = opts.selectrows,
                primarykey  = opts.primarykey,
                selectData = this.getSelectedRowData(),
                len         = selectData.length,
                pkValue;
            if (selectrows === "no" || !len) {
                return [];
            }
            var ret = [];
            for (var i = 0; i < len; i += 1) {
                pkValue = selectData[i][primarykey];
                if (pkValue !== undefined) {
                    //新增行没有pk，过滤掉
                    ret.push(selectData[i][primarykey]);
                }
            }
            return ret;
        },
        /**
         * 获取被选中的行数
         * @returns {Array}
         */
        getSelectedIndex: function () {
            if (this.editObj) {
                this._destroyFormEle();
            }
            var selectrows = this.options.selectrows;
            if (selectrows === "no") {
                return [];
            }
            if (selectrows === "single") {
                return [this.singleChecked];
            }
            var multiChecked = this.multiChecked;
            var rowSize = this.rowSize;
            var ret = [];
            for (var i = 0; i < rowSize; i += 1) {
                if (multiChecked[i]) {
                    ret.push(i);
                }
            }
            return ret;
        },
        /**
         * 根据主键获取对象
         * @param pks
         * @returns {*}
         */
        getRowsDataByPK: function (pks) {
            if (this.editObj) {
                this._destroyFormEle();
            }
            var primarykey = this.options.primarykey;
            var data = this.data;
            if ($.type(pks) !== "array") {
                pks = [pks];
            }
            var len = pks.length;
            var ret = [];
            for (var i = 0; i < len; i += 1) {
                var pksI = pks[i];
                for (var j = this.rowSize; j--;) {
                    if (data[j][primarykey] === pksI) {
                        ret.push(data[j]);
                        break;
                    }
                }
            }
            return ret;
        },
        /**
         * 根据行号获取数据
         * @param rows  {array}|number
         */
        getRowsDataByIndex:function(rows){
            if (this.editObj) {
                this._destroyFormEle();
            }
            var data = this.data;
            if (typeof rows === "number") {
                return [data[rows]];
            }
            if ($.type(rows) === "array") {
                var len = rows.length,
                    ret = [];
                for (var i = 0; i < len; i += 1) {
                    var dataI = data[rows[i]];
                    if (dataI) {
                        ret.push(dataI);
                    }
                }
                return ret;
            }
        },
        /**
         * 交换列
         * @param start
         * @param end
         */
        _switchCol: function (start, end) {
            var domHeadCol    = this.domHeadCol,
                domBodyCol    = this.domBodyCol,
                domTd          = this.domTd,
                domTh          = this.domTh,
                domFixed       = this.domFixed,
                domTr          = this.domTr,
                fixcolumnnumber = this.options.fixcolumnnumber,
                numCol         = this.numCol;
            //属性
            this._switchArrayValue(this.bindName, start, end);
            this._switchArrayValue(this.colIndex, start, end);
            this._switchArrayValue(this.theadText, start, end);
            this._switchArrayValue(this.renderStyle, start, end);
            this._switchArrayValue(this.colRender, start, end);
            this._switchArrayValue(this.colWidth, start, end);
            this._switchArrayValue(this.initColWidth, start, end);
            this._switchArrayValue(this.colWidthBackup, start, end);
            this._switchArrayValue(this.colHidden, start, end);
            this._switchArrayValue(this.tdsPackage, start, end);
            //排序列位置确定
            if (!isNaN(numCol)) {
                if (start === numCol) {
                    this.numCol = end - (start > end ? 0 : 1);
                } else if (start > numCol && end <= numCol){
                    this.numCol = numCol + 1;
                } else if (start < numCol && end > numCol) {
                    this.numCol = numCol - 1;
                }
            }
            //dom替换
            var domTdI = null;
            var i = this.rowSize;
            var hideCol = this.hideCol;
            var domA = hideCol.domA;
            var gridHideColList = hideCol.gridHidecolList;
            if (end === this.colSize) {
                var domThStart = $(domTh[start]);
                domThStart.appendTo(domThStart.parent());
                var domBodyColStart = $(domBodyCol[start]);
                domBodyColStart.appendTo(domBodyColStart.parent());
                var domHeadColStart = $(domHeadCol[start]);
                domHeadColStart.appendTo(domHeadColStart.parent());
                for (; i--;) {
                    domTdI = domTd[i];
                    domTr[i].appendChild(domTdI[start]);
                    this._switchArrayValue(domTdI, start, end);
                }
                if (gridHideColList) {
                    if (this.selectrowsClass !== "") {
                        gridHideColList.appendChild(domA[start - 1]);
                    } else {
                        gridHideColList.appendChild(domA[start]);
                    }
                }
            } else {
                $(domTh[start]).insertBefore(domTh[end]);
                $(domBodyCol[start]).insertBefore(domBodyCol[end]);
                $(domHeadCol[start]).insertBefore(domHeadCol[end]);
                for (; i--;) {
                    domTdI = domTd[i];
                    domTr[i].insertBefore(domTdI[start], domTdI[end]);
                    this._switchArrayValue(domTdI, start, end);
                }
                if (gridHideColList) {
                    if (this.selectrowsClass !== "") {
                        gridHideColList.insertBefore(domA[start - 1], domA[end - 1]);
                    } else {
                        gridHideColList.insertBefore(domA[start], domA[end]);
                    }
                }
            }
            //dom变量
            this._switchArrayValue(domTh, start, end);
            if (start < fixcolumnnumber || end < fixcolumnnumber) {
                //配置固定列的zIndex
                var min = Math.min(start, end),
                    max = Math.max(start, end);
                fixcolumnnumber++;
                for (var j = 0, rowSize = this.rowSize + 1; j < rowSize; j++) {
                    this._switchArrayValue(domFixed[j], start, end);
                    for (var k = min; k <= max; k++) {
                        $(domFixed[j][k]).parent().css("zIndex", fixcolumnnumber - k);
                    }
                }
            }
            this._switchArrayValue(domBodyCol, start, end);
            this._switchArrayValue(domHeadCol, start, end);
            //持久化
            if (this.persistence) {
                this._triggerStatusChange();
            }
        },
        /**
         * 交换数组的值
         * @param arr
         * @param start
         * @param end
         * @private
         */
        _switchArrayValue: function (arr, start, end) {
            if (arr.length < end) {
                arr[end] = undefined;
            }
            if (start > end) {
                arr.splice(end, 0, arr.splice(start, 1)[0]);
            } else {
                arr.splice(end - 1, 0, arr.splice(start, 1)[0]);
            }
        },
        //列宽拖动
        ittab: {
            ittabActive: false,
            _init: function (self) {
                var that         = this,
                    gridOverlay = self.gridOverlay,
                    gridLine    = self.gridLine,
                    colwidth    = [],
                    start        = 0,
                    end          = 0,
                    reTrigger   = true,
                    index        = NaN,
                    adaptive     = self.options.adaptive;
                self.gridHeadTable.find(".eg-ittab").show();
                self.gridHeadTable.on("mousedown", function (event) {
                    var target = event.target;
                    end = 0;
                    if (target.className === "eg-ittab") {
                        colwidth = self.colWidth;
                        index     = self._thIndex($(target).parents("th")[0]);
                        gridOverlay.show().css("cursor", "col-resize");
                        var left  = gridOverlay.offset().left;
                        start     = event.pageX - left;
                        gridLine.show().css("left", start);
                        reTrigger = false;
                        gridOverlay.off("mousemove").on("mousemove", function (event) {
                            event.stopPropagation();
                            end = event.pageX - left;
                            if (colwidth[index] + end - start < 24) {
                                end = 24 + start - colwidth[index];
                            }
                            gridLine.css("left", end);
                            return false;
                        });
                    }
                    return false;
                });
                gridOverlay.on("mouseup mouseout", function () {
                    if (reTrigger || isNaN(index)) {
                        return;
                    }
                    reTrigger = true;
                    $(this).hide();
                    gridLine.hide();
                    if (end === 0) {
                        return;
                    }
                    var change            = end - start;
                    self.isIttab         = true;
                    self.colWidth[index] = colwidth[index] + change;
                    self.tableWidth      = self.tableWidth + change;
                    that.ittabActive = true;
                    self._setColWidthStyle(!adaptive ? index : undefined);
                    if (self.persistence) {
                        self._triggerStatusChange();
                    }
                    self._setLayout();
                    that.ittabActive = false;
                    start = end = 0;
                    index = NaN;
                });
            }
        },
        //隐藏列
        hideCol: {
            /**
             * 初始化
             * @param self
             * @private
             */
            _init: function (self) {
                var
                    hideCol = this.hideCol = document.createElement("div"),
                    theadHeight   = self.theadHeight,
                    banHideHtml, ban = 0;
                hideCol.className = "eg-hidecol";
                hideCol.style.top = theadHeight + "px";
                hideCol.tabIndex  = "1";
                self.gridContainer.append(hideCol);

                hideCol     = $(hideCol);
                var colSize = self.colSize,
                    text     = self.theadText,
                    bindName = self.bindName,
                    editType = self.editType || {},
                    textI   = "",
                    disabled = self.disabled,
                    i        = 0;
                if (self.selectrowsClass !== "") {
                    i += 1;
                }
                var html = ['<div class="eg-hidecol-list" hidefocus="true" >'];
                for (; i < colSize; i += 1) {
                    textI = $.trim(text[i].replace(/<.*?>/g, ""));
                    if (editType[bindName[i]] || disabled[i]) {
                        banHideHtml = ' class="eg-hidecol-hide" banHide="true">';
                        ban++;
                    } else {
                        banHideHtml = '>';
                    }
                    html.push(
                        '<a href="javascript:;" hidefocus="true" title=',
                        textI,
                        //编辑列，不可隐藏
                        banHideHtml,
                        textI,
                        '</a>'
                    );
                }
                html.push(
                    '</div>',
                    '<div class="eg-hidecol-button">',
                    '<a href="javascript:;" hidefocus="true" class="cui-button blue-button eg-hidecol-confirm">确定</a>',
                    '<a href="javascript:;" hidefocus="true" class="cui-button red-button eg-hidecol-cancel">取消</a>',
                    '</div>'
                );
                hideCol.html(html.join(""));
                this.gridHidecolList = hideCol.find(".eg-hidecol-list")[0];
                this.domA             = this.gridHidecolList.getElementsByTagName("a");
                this.bindEvent(self, hideCol);
                this.ban = ban;
            },
            /**
             * 事件绑定
             * @param self
             * @param obj
             */
            bindEvent: function (self, obj) {
                var that = this,
                    colSize = self.colSize,
                    gridBox = self.gridBox,
                    gridOffsetLeft,
                    centerPoint,
                    parent = null,
                    focus = false,
                    start = 0,
                //inputs = obj.find("input"),
                    prevIndex = -1,
                    domA = this.domA,
                    span = document.createElement("span");
                if (self.selectrowsClass !== "") {
                    start += 1;
                }
                self.gridHeadTable.on("click", function (event) {
                    var target = $(event.target);
                    gridOffsetLeft = gridBox.offset().left;
                    centerPoint = gridOffsetLeft + self.gridWidth / 2;
                    if (target.hasClass("eg-select")) {
                        if (parent) {
                            obj.blur();
                        }
                        //inputs = obj.find("input");
                        parent = target.parents("th").addClass("eg-thead-select");
                        var offsetLeft = target.offset().left;
                        var left = offsetLeft - gridOffsetLeft + 2;
                        if (offsetLeft > centerPoint) {
                            left -= 126;
                        }
                        var height = Math.max(self.boxHeight + self.paginationHeight - 50, 60);
                        if (28 * (colSize - that.ban) > height) {
                            obj.children(".eg-hidecol-list").css("height", height);
                        } else {
                            obj.children(".eg-hidecol-list").css("height", "");
                        }
                        obj.css({"left": left, "top": self.theadHeight}).show().focus().attr("hidefocus", "true");
                        reStart();
                        var index = self._thIndex(parent[0]) - start;
                        $(domA).removeClass("eg-hidecol-disabled");
                        $(domA[index]).addClass("eg-hidecol-disabled");
                        //编辑列不能隐藏，这里需要做判断
                        prevIndex = domA[index].getAttribute("banHide") ? -1 : index;
                        focus = false;
                    } else {
                        $(obj).blur();
                    }
                });
                obj.on("blur", function () {
                    if (focus) {
                        obj.focus();
                        return;
                    }
                    if (parent) {
                        parent.removeClass("eg-thead-select");
                    }
                    $(obj).hide();
                });
                obj.on("mouseover", function () {
                    focus = true;
                });
                obj.on("mouseout", function () {
                    focus = false;
                });

                var hideCol = self.colHidden;
                obj.on("click", function (event) {
                    var target = $(event.target);
                    if (target.hasClass("eg-hidecol-confirm")) {
                        for (var i = start; i < colSize; i += 1) {
                            hideCol[i] = $(domA[i - start]).hasClass("eg-hidecol-nochecked");
                        }
                        focus = false;
                        self._colHidden(false);
                        $(this).blur();
                        return false;
                    }
                    if (target.hasClass("eg-hidecol-cancel")) {
                        reStart();
                        focus = false;
                        $(this).blur();
                        return false;
                    }
                    if (target.prop("tagName") === "A") {
                        if (!target.hasClass("eg-hidecol-disabled")) {
                            target.toggleClass("eg-hidecol-nochecked");
                        }
                        return false;
                    }
                    this.focus();
                });

                function reStart () {
                    for (var j = start; j < colSize; j+=1) {
                        if(hideCol[j]) {
                            $(domA[j - start]).addClass("eg-hidecol-nochecked");
                        } else {
                            $(domA[j - start]).removeClass("eg-hidecol-nochecked");
                        }
                    }
                }
                setTimeout(reStart, 100);
            }
        },
        /**
         * 列拖动
         */
        moveCol: {
            _init: function (self) {
                //插入dom
                var gridColMoveInsert = $("<div></div>"),
                    gridColMoveTag    = $("<div></div>"),
                    gridHeadTable      = self.gridHeadTable.addClass("eg-col-move");
                gridColMoveInsert.addClass("eg-col-move-insert");
                gridColMoveTag.addClass("eg-col-move-tag");
                self.gridHead.append(gridColMoveTag).append(gridColMoveInsert);
                //获取属性
                var opts             = self.options,
                    gridOverlay     = self.gridOverlay,
                    fixcolumnnumber  = opts.fixcolumnnumber,
                    selectrowsClass  = self.selectrowsClass,
                    colHidden       = null,
                    fixedWidth      = 0,
                    insertPosition  = [],
                    mousePosition   = [],
                    index            = NaN,
                    complate         = NaN,
                    isFixed         = false,
                    moveTrigger     = true;
                gridHeadTable.on("mousedown", function (event) {
                    var target = $(event.target);
                    if (!target.hasClass("eg-fixed-s") || target.hasClass("eg-no-move")) {
                        return;
                    }
                    if (opts.colhidden) {
                        self.hideCol.hideCol.blur();
                    }
                    //获取属性
                    moveTrigger         = false;
                    colHidden           = self.colHidden;
                    var colwidth        = self.colWidth,
                        colSize         = self.colSize,
                        domTh           = self.domTh,
                        domFixed0      = self.domFixed[0],
                        headOffsetLeft = Math.round(gridHeadTable.offset().left),
                        scrollLeft      = self.gridScroll[0].scrollLeft,
                        end              = 0,
                    //获取当前th
                        height           = self.theadHeight,
                        parent           = target.parents('th');
                    index                = self._thIndex(parent[0]);
                    //计算各th的位置
                    fixedWidth          = 0;
                    insertPosition      = [];
                    mousePosition       = [];
                    var i = 0, colWidthI = null, position = 0, leftIndex = 0;
                    if (index < fixcolumnnumber) {
                        isFixed = true;
                        for (; i < fixcolumnnumber; i += 1) {
                            colWidthI = colwidth[i];
                            fixedWidth += colWidthI;
                            position = Math.round($(domFixed0[i]).offset().left) - headOffsetLeft - scrollLeft;
                            if (colHidden[i] === true) {
                                position = -100;
                            }
                            insertPosition.push(position);
                            mousePosition.push(position);
                            if (!colHidden[i]) {
                                mousePosition[i] = position + colWidthI / 2;
                            }
                        }
                        insertPosition.push(fixedWidth - scrollLeft);
                        mousePosition.push(fixedWidth - scrollLeft - 1);
                        if (selectrowsClass) {
                            insertPosition[0] = mousePosition[0] = -100;
                        }
                        leftIndex = insertPosition[index] - 1;
                    } else {
                        isFixed = false;
                        for (i = fixcolumnnumber; i < colSize; i += 1) {
                            colWidthI = colwidth[i];
                            position = Math.round($(domTh[i]).offset().left) - headOffsetLeft - scrollLeft;
                            if (colHidden[i] === true) {
                                position = -100;
                            }
                            insertPosition.push(position);
                            mousePosition.push(position);
                            if (!colHidden[i]) {
                                mousePosition[i - fixcolumnnumber] = position + colWidthI / 2;
                            }
                        }
                        insertPosition.push(self.tableWidth - scrollLeft);
                        mousePosition.push(self.tableWidth - scrollLeft - 1);
                        if (fixcolumnnumber === 0 && selectrowsClass) {
                            insertPosition[0] = mousePosition[0] = -100;
                        }
                        leftIndex = insertPosition[index - fixcolumnnumber] - 1;
                    }
                    //设置框位置和大小
                    gridColMoveTag.show().css({
                        left       : leftIndex,
                        width      : parent.width(),
                        height     : height - 1,
                        lineHeight : height - 1 + "px"
                    }).html(parent.find(".eg-thead-text").eq(0).html());
                    gridColMoveInsert.show().css("height", height - 5);
                    gridOverlay.show().css("cursor", "move");
                    var start = event.pageX;
                    //事件
                    gridColMoveInsert.css("left", -1000);
                    gridOverlay.off("mousemove").on("mousemove", function (event) {
                        event.stopPropagation();
                        end = event.pageX;
                        gridColMoveTag.css("left", leftIndex - start + end);
                        var len = mousePosition.length;
                        for (var i = 0; i < len; i += 1) {
                            var mousePositionI = mousePosition[i];
                            if (mousePositionI < 0) {
                                continue;
                            }
                            if (end < mousePositionI) {
                                gridColMoveInsert.css("left", insertPosition[i]);
                                if (isFixed) {
                                    complate = i;
                                } else {
                                    complate = i + fixcolumnnumber;
                                }
                                break;
                            }
                        }
                        return false;
                    });
                });
                gridOverlay.on("mouseup", function () {
                    if (moveTrigger) {
                        return;
                    }
                    moveTrigger = true;
                    gridOverlay.hide();
                    gridColMoveInsert.hide();
                    gridColMoveTag.hide();
                    if (isNaN(complate) || isNaN(index) || complate === index || complate === index + 1) {
                        return;
                    }
                    if (index > complate) {
                        self._switchCol(index, complate);
                        complate = index = NaN;
                        return;
                    }
                    for (var i = index + 1; i < complate; i += 1) {
                        if (!colHidden[i]) {
                            self._switchCol(index, complate);
                            complate = index = NaN;
                            break;
                        }
                    }

                });
                gridOverlay.on("mouseout", function () {
                    gridOverlay.hide();
                    gridColMoveInsert.hide();
                    gridColMoveTag.hide();
                    complate = index = NaN;
                });
            }
        },
        /**
         * 编辑Grid
         */
        /**
         * 初始化编辑对象，在获取bindName后执行
         * @private
         */
        _initEditType: function () {
            var opts = this.options,
                optEditType = opts.edittype,
                editType = this.editType,
                bindName = this.bindName,
                colRender = this.colRender,
                bindNameI, optEditTypeI, uiType,
                i, j, datasource,
                fixcolumnnumber,
                editDict = this.editDict;
            for (i = 0, j = this.colSize; i < j; i++) {
                bindNameI = bindName[i];
                optEditTypeI = optEditType[bindNameI];
                if (typeof bindNameI === "string" && optEditTypeI) {
                    if (editUiType.test(optEditTypeI.uitype)) {
                        //内置编辑方法
                        uiType = optEditTypeI.uitype;
                        uiType = uiType.charAt(0).toLowerCase() + uiType.slice(1);
                        optEditTypeI.uitype = uiType;
                        editType[bindNameI] = optEditTypeI;
                        /**
                         * Pulldown需要渲染label
                         * 由这里定义渲染函数
                         * 看#2184 ，#2177，#1156
                         * @type {Array}
                         */
                        if (dictType.test(uiType)) { //pullDownType 看#13
                            datasource = optEditTypeI.datasource;
                            editDict[bindNameI] = datasource;
                            colRender[i] = [{
                                "render"  : "renderFn",
                                "colJson": {
                                    "bindName": bindNameI,
                                    "editType": optEditTypeI
                                },
                                "callback": singleCallback
                            }];
                            switch(uiType) {
                                case "multiPullDown":
                                    colRender[i][0].callback = multiCallback;
                                    break;
                                case "pullDown":
                                    if (optEditTypeI.mode === "Multi") {
                                        colRender[i][0].callback = multiCallback;
                                    }
                                    break;
                                case "checkboxGroup":
                                    colRender[i][0].callback = checkboxCallback;
                                    editDict[bindNameI] = optEditTypeI.checkbox_list;
                                    break;
                                case "radioGroup":
                                    colRender[i][0].callback = radioCallback;
                                    editDict[bindNameI] = optEditTypeI.radio_list;
                            }
                        }
                        //可编辑列不能被固定
                        if (fixcolumnnumber === undefined) {
                            fixcolumnnumber = i;
                        }
                    } else if (typeof optEditTypeI.create === "function" && typeof optEditTypeI.returnValue === "function") {
                        //第三方编辑方法
                        editType[bindNameI] = optEditTypeI;
                        delete optEditTypeI.uitype;
                        //可编辑列不能被固定
                        if (fixcolumnnumber === undefined) {
                            fixcolumnnumber = i;
                        }
                    } else if(optEditTypeI.thrdui){
                        editType[bindNameI] = optEditTypeI;
                        //可编辑列不能被固定
                        if (fixcolumnnumber === undefined) {
                            fixcolumnnumber = i;
                        }
                    }
                }
            }
            //可编辑列不能被固定
            if (fixcolumnnumber !== undefined && opts.fixcolumnnumber >= fixcolumnnumber ) {
                opts.fixcolumnnumber = fixcolumnnumber;
            }
        },
        /**
         * 创建一个表单元素,用于编辑
         * @param td
         * @param editOpts
         * @param index
         * @param bindNameI
         * @param isTab
         * @private
         */
        _createFormEle: function (td, editOpts, index, bindNameI, isTab) {
            var editCarrier = $("<div>").addClass("eg-edit-box"),
                type =  editOpts.uitype,
                rowData = this.data[index],
                value;
            //如果值是null或undefined，则直接设为空值  by chaoqun.lin 2014-10-08
            if(rowData[bindNameI] === null || rowData[bindNameI] === undefined){
                value = '';
            }else{
                value = rowData[bindNameI] + '';
            }

            td.addClass("eg-editing").html(editCarrier);
            if (type && !editOpts.thrdui) {
                //内置编辑方法
                type = type.charAt(0).toLowerCase() + type.slice(1);
                if (type === "checkboxGroup") {
                    value = value.split(";");
                }
                this.editObj = {
                    cuiObj: window.cui(editCarrier)[type]($.extend({
                        width: "100%",
                        name: Math.random() + "",
                        value: value
                    }, editOpts)),
                    editTdObj: td,
                    bindName: bindNameI,
                    index: index,
                    editOpts: editOpts
                };

                //将rowData给cuiObj

                this.editObj.cuiObj.editRowData=rowData;


                if (inputType.test(type)) {
                    editCarrier.find("input,textarea").select();
                } else if (isTab) {
                    td.find(":text").eq(0).focus();
                }
            } else {
                if(editOpts.thrdui){
                    cap.Editor[type].create(editCarrier[0],rowData,editOpts);
                }else{
                    //第三方编辑方法
                    editOpts.create(editCarrier[0], rowData);
                }
                this.editObj = {
                    cuiObj: null,
                    editTdObj: td,
                    bindName: bindNameI,
                    index: index,
                    editOpts: editOpts
                };
            }
        },
        /**
         * 编辑完成，销毁一个表单元素
         * 把值html()到td
         * 实现联动
         * 更新编辑状态
         * @private
         */
        _destroyFormEle: function () {
            var editObj = this.editObj,
                bindName = this.bindName,
                bindNameP,
                bindNameI = editObj.bindName,
                editTdObj = editObj.editTdObj,
                tds,
				editCarrier = editTdObj.find(".eg-edit-box").eq(0),
                cuiObj = editObj.cuiObj,
                value,
                editOpts = editObj.editOpts,
                validate = editOpts.validate,
                uitype = editOpts.uitype,
                label, dType,
                newRowData = this.data[editObj.index],//用于修改后的数据对象
                rowData = $.extend({}, newRowData),//原始数据对象
                editafter, afterRowData, pk, pkValue,
                i, dataBackup, dataBackupI, isChange, maskOptions;
			if (cuiObj) {
				//内置创建方法
				value = "checkboxGroup" === uitype ? cuiObj.getValueString(";") : cuiObj.getValue();

                //更新数据
                newRowData[bindNameI] = value;
                //如果是input，且设置了int\dec\money，则需要格式化
                if (uitype.toLowerCase() === 'input' && value !== '') {
                    switch (cuiObj.options.mask){
                        case 'Int':
                            maskOptions = $.extend({
                                prefix: '',
                                separator: ','
                            }, cuiObj.options.maskoptions);
                            label = C.Number.money(value, 0, maskOptions);
                            break;
                        case 'Dec':
                            maskOptions = $.extend({
                                prefix: '',
                                separator: ',',
                                precision: null
                            }, cuiObj.options.maskoptions);
                            label = C.Number.money(value, maskOptions.precision, maskOptions);
                            break;
                        case 'Money':
                            maskOptions = $.extend({
                                prefix: '',
                                separator: ',',
                                precision: 2
                            }, cuiObj.options.maskoptions);
                            label = C.Number.money(value, maskOptions.precision, maskOptions);
                            break;
                    }
                }
                if (dictType.test(uitype)) {
					//如果为pullDown，则需要把value转换成label
                    switch(uitype) {
                        case "singlePullDown":
                            dType = "single";
                            break;
                        case "multiPullDown":
                            dType = "multi";
                            break;
                        case "pullDown":
                            dType = editOpts.mode === "Multi" ? "multi" : "single";
                            break;
                        case "checkboxGroup":
                            label = checkboxCallback (newRowData, undefined, {
                                "bindName": bindNameI,
                                "editType": editOpts
                            });
                            break;
                        case "radioGroup":
                            label =  radioCallback (newRowData, undefined, {
                                "bindName": bindNameI,
                                "editType": editOpts
                            });
                    }
                    if (dType === "single") {
                        label = singleCallback(newRowData, undefined, {
                            "bindName": bindNameI,
                            "editType": editOpts
                        });
                        cuiObj.$box.remove();
                    } else if (dType === "multi") {
                        label = multiCallback(newRowData, undefined, {
                            "bindName": bindNameI,
                            "editType": editOpts
                        });
                        cuiObj.$box.remove();
                    }
				}
				cuiObj.destroy();
			} else {
                if(editOpts.thrdui){
				   value = cap.Editor[uitype].returnValue(editCarrier[0],newRowData,editOpts);
                }else{
				   value = editOpts.returnValue(editCarrier[0], rowData);
                }
                //更新数据
                if ($.type(value) === "object") {
                    label = value.text;
                    value = value.value;
                }
                newRowData[bindNameI] = editOpts.thrdui?newRowData[bindNameI]:value;
				editCarrier.remove();
				if (value === undefined) {
					return;
				}
			}
            editTdObj.html(label || value).removeClass("eg-editing");
            this.editObj = null;
            if (rowData[bindNameI] === value && value !== "") {
                //未改变，后面的内容不需要执行
                return;
            }
            //验证不过，后面的内容不执行
            if (validate && !this._validate(bindNameI, newRowData, validate, editTdObj)) {
                return;
            }
            pk = this.options.primarykey;
            pkValue = rowData[pk];
            //非新增行,需要备份原数据
            dataBackup = this.dataBackup;
            if (pkValue !== undefined && !dataBackup[pkValue]) {
                //第一次修改数据，才进行备份
                dataBackup[pkValue] = rowData;
            }

            //编辑联动
            editafter = this.options.editafter;
            if (typeof editafter === "function") {
                afterRowData = editafter($.extend({}, newRowData), bindNameI);
                if ($.type(afterRowData) === "object") {
                    newRowData = afterRowData;
                    //防止pk被改。
                    if (pkValue === undefined) {
                        delete newRowData[pk];
                    } else {
                        newRowData[pk] = pkValue;
                    }
                    this._changeValue(newRowData,
                        newRowData[pk] !== undefined ? undefined : editObj.index, bindNameI);
                }
            }

            // 判断当前行是否已经被修改。
            if (pkValue === undefined) {
                //新增的行被编辑
                this.changeEditData.insertData[rowData.__insertId__] = newRowData;
            } else {
                //有主键的行被编辑
                dataBackupI = dataBackup[pkValue];
                tds = editTdObj.closest("tr").find("td");
                for (i = this.colSize; i--;) {
                    bindNameP = bindName[i];
                    if (dataBackupI[bindNameP] !== newRowData[bindNameP]) {
                        //变化
                        tds.eq(i).addClass("eg-update");
                        isChange = true;
                    } else {
                        tds.eq(i).removeClass("eg-update");
                    }
                }
                if (isChange) {
                    this.changeEditData.updateData[pkValue] = newRowData;
                } else {
                    delete this.changeEditData.updateData[pkValue];
                }
            }
        },
        /**
         * 验证,并把验证状态更新到 validateState
         * @param bindName
         * @param rowData
         * @param validate
         * @param td
         * @returns {boolean}
         * @private
         */
        _validate: function (bindName, rowData, validate, td) {
            var lenValidate = validate.length,
                p, validateType, validateResult,
                pkValue = rowData[this.options.primarykey],
                vObj = pkValue !== undefined ? this.validateState.update : this.validateState.insert,
                vk = pkValue || rowData.__insertId__;

            if (td.attr("tip") === undefined) {
                window.cui.tip(td, { onlyEl: true });
            }
            td.attr("tip", "").removeClass("eg-error");

            for (p = 0; p < lenValidate; p++) {
                validateType = validate[p].type;
                if (rule[validateType]) {
                    validateResult = rule[validateType](rowData[bindName], $.extend({},{args:rowData},validate[p].rule));
                    if (validateResult !== true) {
                        vObj[vk] = vObj[vk] || {};
                        vObj[vk][bindName] = validateResult;
                        td.attr("tip", validateResult).addClass("eg-error");
                        return false;
                    }
                }
            }
            //验证通过
            if (vObj[vk]) {
                delete vObj[vk][bindName];
                if (this._isNullObj(vObj[vk]) === undefined) {
                    delete vObj[vk];
                }
            }
            return true;
        },
        /**
         * 插入一条数据
         * @param rowData
         * @param position
         */
        insertRow: function (rowData, position) {
            var editType = this.editType,
                bindName = this.bindName,
                bindNameP,
                colSize = this.colSize,
                rowSize = this.rowSize,
                insertId = this.insertId,
                rowDom,
                p, editBindNames = [], hasNullValue = 0, editTypeNum = 0,
                currTd, validate;
            if ($.type(rowData) !== "object") {
                return;
            }
            for (p in editType) {
                editTypeNum ++;
                if (rowData[p] === undefined) {
                    rowData[p] = "";
                    hasNullValue ++;
                }
                editBindNames[p] = true;
            }
            //防止新增数据里面含有主键，导致冲突
            //delete rowData[this.options.primarykey];
            rowData.__insertId__ = insertId + "";

            if(typeof position !== "number" || position >= rowSize || position < 0) {
                position = rowSize;
            }
            this._addData(rowData, position);
            //给新增行增加样式
            rowDom = this.domTr[position];
            for (p = 0; p < colSize; p++) {
                bindNameP = bindName[p];
                if (editBindNames[bindNameP]) {
                    currTd =  $(rowDom.cells[p]);
                    validate = editType[bindNameP].validate;
                    currTd.addClass("eg-insert");
                    if (validate) {
                        this._validate(bindNameP, rowData, validate, currTd);
                    }
                }
            }
            this.insertId = insertId + 1;
            //当所有数据都为空，新增行数据不保存
            if (hasNullValue !== editTypeNum) {
               // console.log(position,insertId);
                this.changeEditData.insertData[insertId] = this.data[position];
            }
        },
        /**
         * 是否是空对象,如果不是返回第一条
         * @param obj
         * @returns {*}
         * @private
         */
        _isNullObj: function (obj) {
            var p;
            for (p in obj) {
                break;
            }
            if (p === undefined) {
                return undefined;
            }
            return [p, obj[p]];
        },
        /**
         * 删除行数据
         * @param pk
         */
        deleteRow: function (pk/*pks*/) {
            if (this.editObj) {
                this._destroyFormEle();
            }
            this.deleteRowByIndex(this._pkToIndex(pk, false));
        },
        /**
         * 根据行数删除行
         * @param index
         * @private
         */
        deleteRowByIndex: function (index) {
            if (this.editObj) {
                this._destroyFormEle();
            }
            var data = this.data,
                opts = this.options,
                changeEditData = this.changeEditData,
                deletebefore = opts.deletebefore,
                isBefore = typeof deletebefore === "function",
                deleteafter = opts.deleteafter,
                isAfter = typeof deleteafter === "function",
                i, indexI, dataI,
                pk = opts.primarykey,
                insertId, pkValue,
                indexType = $.type(index);
            if (indexType === "number") {
                index = [index];
            } else if (indexType !== "array"){
                return;
            }
            for (i = index.length ; i--;) {
                indexI = index[i];
                if (typeof indexI !== "number") {
                    continue;
                }
                dataI = data[indexI];
                if (!dataI) {
                    continue;
                }
                pkValue = dataI[pk];
                if (isBefore && pkValue !== undefined && deletebefore.call(this, dataI) === false) {
                    continue;
                }
                insertId = dataI.__insertId__;
                if (insertId !== undefined) {
                    delete changeEditData.insertData[insertId];
                    delete this.validateState.insert[insertId];
                }
                if (pkValue !== undefined) {
                    delete changeEditData.updateData[pkValue];
                    changeEditData.deleteData.push(dataI);
                    delete this.validateState.update[pkValue];
                }
                this._removeData(indexI);
                if (isAfter) {
                    deleteafter.call(this, dataI);
                }
            }
        },
        /**
         * 删除选择行
         */
        deleteSelectRow: function () {
            if (this.editObj) {
                this._destroyFormEle();
            }
            this.deleteRowByIndex(this.getSelectedIndex());
        },
        /**
         * 获取新增行的index
         */
        getInsertedIndex: function () {
            var data = this.data,
                rowSize = this.rowSize,
                i, ret = [];
            for (i = 0; i < rowSize; i++) {
                if (data[i].hasOwnProperty("__insertId__")) {
                    ret.push(i);
                }
            }
            return ret;
        },
        /**
         * 获取增删改数据
         */
        getChangeData: function () {
            if(this.editObj){
                this._destroyFormEle();
            }

            var changeEditData = this.changeEditData,
                insertData = changeEditData.insertData, //object
                updateData = changeEditData.updateData, //object
                deleteData = changeEditData.deleteData, //array
                newInsert = [],
                newInsertI,
                newUpdate = [],
                newDelete = null,
                p;
            //拼凑insert
            for (p in insertData) {
                newInsertI = $.extend({}, insertData[p]);
                delete newInsertI.__insertId__;
                newInsert.push(newInsertI);

            }
            if (p !== undefined) {
                this.isChanged = true;
            } else {
                newInsert = null;
            }

            //拼凑update
            for (p in updateData) {
                newUpdate.push($.extend({}, updateData[p]));
            }
            if (p !== undefined) {
                this.isChanged = true;
            } else {
                newUpdate = null;
            }
            if ( deleteData.length) {
                this.isChanged = true;
                newDelete = $.extend(true, [], deleteData);
            }
            //拼凑delete,无
            return {
                "insertData": newInsert, //array
                "updateData": newUpdate, //array
                "deleteData": newDelete  //array
            };
        },
        getValidateResult:function(){
            if (this.editObj) {
                this._destroyFormEle();
            }
            var ary = [];
            $.each(this.validateState,function(key,value){
                $.each(value,function(i,item){
                    $.each(item, function(index, val) { 
                        ary.push({id:index,message:val,valid:false});
                    });
                });
            });
            return [ary,[],(ary.length==0?true:false)];
        },
        /**
         * 提交数据
         * @returns {*}
         */
        submit: function () {
            if (this.editObj) {
                this._destroyFormEle();
            }
            var changeData = this.getChangeData(),
                vInsert, vUpdate, bindName, i, colSize,
                theadText, _isNullObj, vilidateResult, index, vBindName;
            //判断是否全部验证通过
                vInsert = this.validateState.insert;
                vUpdate = this.validateState.update;
                bindName = this.bindName;
                theadText = this.theadText;
                _isNullObj = this._isNullObj;
                vilidateResult = _isNullObj(vInsert);
                index = -1;
            if (vilidateResult !== undefined) {
                index = this._insertIdToIndex(vilidateResult[0]);
                //插入行，存在验证不过
            } else {
                vilidateResult = _isNullObj(vUpdate);
                if (vilidateResult !== undefined) {
                    index = this._pkToIndex(vilidateResult[0], true)[0];
                }
            }
            if (index > -1) {
                vBindName = _isNullObj(vilidateResult[1]);
                for (i = 0, colSize = this.colSize; i < colSize; i++) {
                    if(bindName[i] === vBindName[0]) {
                        cui.alert(
                            ["第\"", index + 1, "\"行，\"", theadText[i], "\" 列：", vBindName[1]].join(""),
                            null,
                            {title: "提示", opacity:0.8}
                        );
                        return "fail";
                    }
                }
            }
            //没有改变,返回false;
            if (!this.isChanged) {
                return "noChange";
            }

            this.isSaveing = true;
            this._loading("show");
            this.options.submitdata(this, changeData);
            return "success";
        },
        /**
         * 通过插入ID获取index
         * @param id
         * @private
         */
        _insertIdToIndex: function (id) {
            var data = this.data,
                i, rowSize = this.rowSize;
            for (i = 0; i < rowSize; i++) {
                if (data[i].__insertId__ === id) {
                    return i;
                }
            }
            return -1;
        },
        /**
         * 提交完成
         */
        submitComplete: function () {
            if(!this.isSaveing) {
                return;
            }
            this.isSaveing = false;
            this._loading("hide");
            this.loadData();
        },
        /**
         *  替换数据
         * @param rowData要替换的数据
         * @param index要替换的行号
         * @param forceUseIndex是否强制使用行号
         * @param replaceData 是否强制替换数据
         */
        changeData:function(rowData,index,forceUseIndex,replaceData){
            if (this.editObj) {
                this._destroyFormEle();
            }
            if ($.type(rowData) !== "object") {
                return;
            }           
            if(forceUseIndex===true && typeof index!=="number"){
                return;
            }
            if(this.editObj){ //如果在编辑状态，先取消编辑状态
                this._destroyFormEle();
            }
            var opts = this.options,insertId;
            if(forceUseIndex!==true){
                var primarykey = opts.primarykey,
                    pkValue = rowData[primarykey];
                if (typeof pkValue !== "undefined") {
                    var newIndex = this._pkToIndex(pkValue, false)[0];
                    index = newIndex === undefined ? index : newIndex;
                }
            }

            if (typeof index !== "number" || index < 0 || index >= this.rowSize) {
                return;
            }
            if(typeof this.data[index].__insertId__!=="undefined"){ //判断当前被替换的目标行是否是新增的
                insertId=parseInt(this.data[index].__insertId__,10);
            }
            var pk =this.data[index][opts.primarykey];
            
            if(replaceData===true){//要求强制替换数据
                this.data[index] = $.extend(true,{},rowData);
            }else{
                this.data[index] = $.extend(true,{},this.data[index], rowData);
            }
            if(typeof insertId==="number"){
                /*
                *  目标行是新增的数据，保留 __insertId__
                *  删除pk;
                * */
            	 this.data[index].__insertId__ = insertId+"";
            	 delete this.data[index][opts.primarykey];
                 this.changeEditData.insertData[insertId]=this.data[index];
            }else{
            	 delete this.data[index].__insertId__; //修改数据不能包含 __insertId__
            	 this.data[index][opts.primarykey]=pk; // 每行的主键不能被修改
            	 this.changeEditData.updateData[pk] = this.data[index];
            }
            //回调colrender的时候index参数不能改变，所以此处调用 _dataToDom要多加一个参数。
            var dom = this._dataToDom([this.data[index]], 0, 1,index),
                newDomTd      = dom.domTd[0],
                oldDomTd      = this.domTd[index],
                bindName       = this.bindName,
                fixcolumnnumber = opts.fixcolumnnumber;
			for (var i = this.colSize; i--;) {
                var bindNameI = bindName[i],
                    oldTdI = $(oldDomTd[i]);
                oldTdI.removeAttr("title");
                if (i < fixcolumnnumber) {
                    if (typeof bindNameI !== "number") {
                        var oldSpan = oldTdI.find(".eg-fixed-s")[0];
                        var value    = $(newDomTd[i]).find(".eg-fixed-s")[0].innerHTML;
                        oldSpan.innerHTML = value;
                        if(oldSpan.nextSibling){
                            oldSpan.nextSibling.nodeValue = value;
                        }
                    }
                } else if (typeof bindNameI !== "number") {
                    oldTdI.html(newDomTd[i].innerHTML);
                }
            } 
              


        }
    });

    /**
     * 可编辑Grid单选下拉列渲染函数
     * @param dataJ
     * @param j
     * @param colJson
     * @returns {*}
     */
    function singleCallback(dataJ, j, colJson) {
        var k, l,
            value = dataJ[colJson.bindName] || "",
            editType = colJson.editType,
            datasource =  editType.datasource,
            singlePullDownOpt = UI.SinglePullDown.prototype.options,
            id = editType.value_field || singlePullDownOpt.value_field,
            text = editType.label_field || singlePullDownOpt.label_field;
            if(typeof webPath !== "undefined"){
                var webRoot = (webPath||$('#cuiExtendDictionary').attr('webRoot')) + '/top/cfg/getAllValue.ac';
                if(!datasource && editType.dictionary){
                    $.ajax({
                          type: "GET",
                          url: webRoot,
                          data: "&fullcode=" + editType.dictionary,
                          dataType: "json",
                          async:false
                    }).done(function(item){
                        editType.datasource = datasource = item
                    })
                }
            }
            if(datasource){
                for (k = 0, l = datasource.length; k < l; k++) {
                    if (datasource[k][id] === value) {
                        return datasource[k][text];
                    }
                }
            }
    }

    /**
     * 多选下拉渲染纠正
     * @param dataJ
     * @param j
     * @param colJson
     * @returns {*}
     */
    function multiCallback(dataJ, j, colJson) {
        var k, l, m, n,
            value = dataJ[colJson.bindName] || "",
            editType, datasource, singlePullDownOpt, id, text,
            ret;
        if (value === "") {
            return "";
        }
        value = value.split(";");
        editType = colJson.editType;
        datasource =  editType.datasource;
        singlePullDownOpt = UI.SinglePullDown.prototype.options;
        id = editType.value_field || singlePullDownOpt.value_field;
        text = editType.label_field || singlePullDownOpt.label_field;
        ret = [];
		if(typeof webPath !== "undefined"){
			var webRoot = (webPath||$('#cuiExtendDictionary').attr('webRoot')) + '/top/cfg/getAllValue.ac';
			if(!datasource && editType.dictionary){
				$.ajax({
					  type: "GET",
					  url: webRoot,
					  data: "&fullcode=" + editType.dictionary,
					  dataType: "json",
					  async:false
				}).done(function(item){
					editType.datasource = datasource = item
				})
			}
		}
		if(datasource){
			for (m = 0, n = value.length; m < n; m++) {
				for (k = 0, l = datasource.length; k < l; k++) {
					if (datasource[k][id] === value[m]) {
						ret.push(datasource[k][text]) ;
					}
				}
			}
		}
        
        return ret.join(";");
    }

    /**
     * 单选渲染纠正
     * @param dataJ
     * @param j
     * @param colJson
     * @returns {*}
     */
    function radioCallback (dataJ, j, colJson) {
        var k, l,
            value="",
            editType = colJson.editType,
            radioList =  editType.radio_list;
        if(typeof dataJ[colJson.bindName]!=="undefined"){
            value= dataJ[colJson.bindName];
        }
        if(typeof webPath !== "undefined"){
            var webRoot = (webPath||$('#cuiExtendDictionary').attr('webRoot')) + '/top/cfg/getAllValue.ac';
            if(!radioList && editType.dictionary){
                $.ajax({
                      type: "GET",
                      url: webRoot,
                      data: "&fullcode=" + editType.dictionary,
                      dataType: "json",
                      async:false
                }).done(function(item){
                    editType.radio_list = radioList = item
                })
            }
        }
        if(radioList){
            for (k = 0, l = radioList.length; k < l; k++) {
                if (radioList[k].value+"" === value+"") {
                    return radioList[k].text;
                }
            }
        }
    }

    /**
     * 多选渲染纠正
     * @param dataJ
     * @param j
     * @param colJson
     * @returns {string}
     */
    function checkboxCallback (dataJ, j, colJson) {
        var k, l, m, n,
            value = dataJ[colJson.bindName] || "",
            editType, checkboxList,
            ret;
        if (value === "") {
            return "";
        }
        value = value.split(";");
        editType = colJson.editType;
        checkboxList =  editType.checkbox_list;
        ret = [];
        if(typeof webPath !== "undefined"){
            var webRoot = (webPath||$('#cuiExtendDictionary').attr('webRoot')) + '/top/cfg/getAllValue.ac';
            if(!checkboxList && editType.dictionary){
                $.ajax({
                      type: "GET",
                      url: webRoot,
                      data: "&fullcode=" + editType.dictionary,
                      dataType: "json",
                      async:false
                }).done(function(item){
                    editType.checkbox_list = checkboxList = item
                })
            }
        }
        if(checkboxList){
            for (m = 0, n = value.length; m < n; m++) {
                for (k = 0, l = checkboxList.length; k < l; k++) {
                    if (checkboxList[k].value === value[m]) {
                        ret.push(checkboxList[k].text) ;
                    }
                }
            }
        }
        return ret.join(";");
    }
})(window.comtop);
;(function($, C){
	/*C.UI.Calculate = C.UI.Base.extend({
		options: {
			uitype: 'Calculate'
		},
		setAutoCalculate: function(el, func, dependEls) {
			for (var i = 0; i < dependEls.length; i++) {
				var dependEl = dependEls[i];
				cui(dependEl).bind('change', function() {
					var result = func();
					cui(el).setValue(result);
				});
			}
		}
	});
    cui.calculate = cui('').calculate();*/
    cui.calculate = cui.calculate || {};
    cui.calculate.setAutoCalculate = function(el, func, dependEls){
        for (var i = 0; i < dependEls.length; i++) {
            var dependEl = dependEls[i];
            cui(dependEl).bind('change', function() {
                var result = func();
                cui(el).setValue(result);
            });
        }
    };
})(window.comtop.cQuery, window.comtop);
/**
 * 扫描器，自动创建组件
 * Author: chaoqun.lin
 * Date: 12-11-15 下午5:55
 * Version: 1.1.0
 */
;(function($, C){
    /**
     * 扫描器
     */
    C.UI.scan = function(){
        var options = {};
        for(var i = 0; i < arguments.length; i ++){
            switch (typeof arguments[i]){
                case 'string':
                case 'object':
                    options.range = $(arguments[i]);
                    break;
                case 'boolean':
                    options.databind = arguments[i];
                    break;
            }
        }
        options = $.extend({
            range: document,
            databind: true
        }, options);
        //_init(options);
        //扫描实例化，规避多扫描导致的变量冲突
        var scaner = new Scan(options);
        //销毁扫描对象
        scaner = undefined;
    };
    //调试开关
    C.UI.scan.debug = false;
    //开启文本模式
    C.UI.scan.textmode = false;
    //开启不可用模式
    C.UI.scan.disable = false;
    //开启只读模式
    C.UI.scan.readonly = false;
    //开启设计模式
    C.UI.scan.designMode = false;
    //执行数据绑定
    C.UI.scan.databind = _customInitData;
    //表单组件setReadonly
    C.UI.scan.setReadonly = _setReadonly;
    //局部变量
    function Scan(opts){
        this.$uiCmp = null;
        this.optsList = [];
        this.errorLog = [];
        this._init(opts);
    }
    Scan.prototype = {
        _init: function(opts){
            var self = this;
            this.$uiCmp = $('[uitype]', opts.range);
            //根据元素，统一实例化（注：创建100个input并获取它们上面的属性，耗时在350mm左右）
            this.$uiCmp.each(function(){
                var $tg = $(this);
                var uiType = $tg.attr('uitype');
                //如果存在，不再创建
                if($tg.data('uitype') || !C.UI[uiType.charAt(0).toUpperCase() + uiType.substring(1)]){
                    self.$uiCmp = self.$uiCmp.not($tg);
                    //跳至下一个
                    return true;
                }
                self.optsList.push(self._scan($tg, uiType));
            });

            var $tg = null;
            if(opts.databind){
                this._initData();
            }
            if(!C.UI.scan.textmode && !C.UI.scan.disable&&!C.UI.scan.designMode){
                for(var i = 0, len = this.$uiCmp.length; i < len; i ++){
                    $tg = this.$uiCmp.eq(i).data('uitype');
                    if($tg && !$tg.options.textmode && !$tg.options.disable){
                        this.errorLog.push(this._bindValidate(this.$uiCmp.eq(i), this.optsList[i]));
                        this.errorLog.push(this._bindTip(this.$uiCmp.eq(i), this.optsList[i], $tg.tipPosition || $tg.options.el));
                    }
                }
            }

            if(C.UI.scan.debug){
                this._debug(opts.databind);
            }
            opts = undefined;
        },
        _scan: function($el, uiType){
            //如果没有uiType就直接跳过
            if(!uiType && uiType === ''){
                return false;
            }
            /**
             * 关于dialog在页面的模板，默认将display=none这种方式，改为将dialog设置在不可见的区域
             */
            if(uiType.toLocaleLowerCase() === 'dialog'){
                $el.addClass('cui-dialog').css('display','block');
                return {};
            }


            //获取标签上的属性
            var opts = _getParam($el[0]);
            var valiOpts = {
                validate: opts.validate
            };
            var dbOpts = {
                databind: opts.databind
            };
            var tipOpts = {
                tip: opts.tip,
                trigger: opts.tipTrigger ? opts.tipTrigger : 'hover'
            };

            //尽量删除一些不必要的属性值
            delete opts.uitype;
            delete opts.tipTrigger;
            delete opts.tip;
            delete opts.databind;
            delete opts.validate;

            //如果uiType组件存在，则执行实例化
            var uncapliseUIType = uiType.charAt(0).toLowerCase() + uiType.substring(1);

            //如果开启XSS防御，则所有组件的XSSDefense自动设为true
            if(C.UI.scan.XSSDefense){
                opts.XSSDefense = true;
            }
            //如果开启文本模式，则所有组件的textmode自动设为true
            if(C.UI.scan.textmode){
                opts.textmode = true;
                opts.readonly = false;
                opts.disable = false;
            }
            //如果开启文本模式，则所有组件的disable自动设为true
            if(C.UI.scan.disable){
                opts.textmode = false;
                opts.readonly = false;
                opts.disable = true;
            }
            //如果开启只读模式，则所有组件的readonly自动设为true
            if(C.UI.scan.readonly){
                opts.readonly = true;
                opts.textmode = false;
                opts.disable = false;
            }
            if(C.UI.scan.designMode){
               opts.designMode=true;
            }
            //实例化
            if(C.UI.scan.debug){
                try{
                    $el[uncapliseUIType](opts);
                }catch(e){
                    this.errorLog.push('[' + uiType + ':' + $el.attr('id') + ']:' + '组件创建失败，可能参数配置不正确或者组件存在问题；\n');
                }
            }else{
                $el[uncapliseUIType](opts);
            }

            //移除占位符上的name
            $el.removeAttr('name');

            return {
                opts: opts,
                valiOpts: valiOpts,
                dbOpts: dbOpts,
                tipOpts: tipOpts
            };
        },
        _initData: function(){
            if(!this.$uiCmp || this.$uiCmp.length === 0){
                return;
            }
            for(var i = 0, len = this.$uiCmp.length; i < len; i ++){
                this.$uiCmp.eq(i).data('uitype') && this.errorLog.push(this._bindData(this.$uiCmp.eq(i), this.optsList[i]));
            }
        },
        _debug: function(databind){
            if(C.UI.scan.debug){
                var tmpErrorLog = [];
                for(var i = 0, len = this.errorLog.length; i < len; i ++){
                    this.errorLog[i] && tmpErrorLog.push(this.errorLog[i]);
                }
                tmpErrorLog.length > 0 && alert(tmpErrorLog.join(''));
            }
            this.errorLog = [];
            if(!databind){
                this.$uiCmp = undefined;
                this.optsList = [];
            }
        },
        _bindData: function($el, opts){
            //获取校验配置参数
            var db = opts.dbOpts.databind;
            var errorLog = null;
            var debug = C.UI.scan.debug;

            //数据绑定
            if (db) {
                var chain = db.split('.');
                if(chain.length < 2){
                    debug && (errorLog = '[' + $el.attr('uitype') + ':' + $el.attr('id') + ']' +
                    ':绑定的数据必须为JSON格式里的成员变量;\n');
                    return false;
                }
                var dataSourceName = [];
                var dataSource;
                var propName;
                for(var i = 0, iLen = chain.length; i < iLen; i++){
                    if(i < iLen - 1){
                        dataSourceName.push(chain[i]);
                    }else{
                        propName = chain[i];
                    }
                }
                dataSource = C.namespace(dataSourceName.join('.'));

                if(dataSource.nodeName){
                    debug && (errorLog = '[' + $el.attr('uitype') + ':' + $el.attr('id') + ']' +
                    ':数据'+ dataSourceName +'与页面的标签ID名相同，请更名;\n');
                    return false;
                }
                var databinder = cui(dataSource).databind();
                databinder.addBind($el, propName);
            }
            return errorLog;
        },
        _bindValidate: function($el, opts){
            var vd = opts.valiOpts.validate;
            var errorLog = '';

            if(vd){
                var jsonReg = /^(?:\{.*\}|\[.*\])$/;
                //校验绑定
                if(!window.validater){
                    window.validater = cui().validate();
                }
                if(jsonReg.test(vd)){
                    try{
                        vd = $.parseJSON(vd.replace(/\\'/g, '#@@#').replace(/'/g, '"').replace(/#@@#/g, '\''));
                    }catch(e){
                        errorLog = '[' + $el.attr('uitype') + ':' + $el.attr('id') + ']' + ':校验的JSON数据有误;\n';
                    }
                }else{
                    try{
                        vd = _getObject(vd);
                    }catch(e){
                        errorLog = '[' + $el.attr('uitype') + ':' + $el.attr('id') + ']' + ':校验数据有误或不存在;\n';
                    }
                }
                switch ($.type(vd)){
                    case 'array':
                        for(var i = 0; i < vd.length; i ++){
                            if(vd[i].rule){
                                window.validater.add(cui($el), vd[i].type, vd[i].rule);
                            }else{
                                window.validater.add(cui($el), vd[i].type);
                            }
                        }
                        break;
                    case 'string':
                        window.validater.add(cui($el), vd);
                }
            }
            return errorLog;
        },
        _bindTip: function($el, opts, $tipPos){
            var errorLog = '';
            $tipPos = $($tipPos, $el);
            //if(opts.valiOpts.validate && !opts.tipOpts.tip){
            if(cui($el).options.textmode != undefined && !opts.tipOpts.tip){
                $el.attr('tip', '');
                opts.tipOpts.tip = '';
            }
            if(opts.tipOpts.tip != undefined){
                try{
                    cui.tip($tipPos, {
                        trigger: opts.tipOpts.trigger,
                        tipEl: $el,
						uitype:'Tip'
                    });
                }catch(e){
                    errorLog = '[' + $el.attr('uitype') + ':' + $el.attr('id') + ']' + ':提示创建失败;\n';
                }
            }
            return errorLog;
        }
    };

    /**
     * 手动绑定数据
     * @private
     */
    function _customInitData(){
        var $uiCmp = $('[uitype]', $('body'));
        if(!$uiCmp || $uiCmp.length === 0){
            return;
        }
        for(var i = 0, len = $uiCmp.length; i < len; i ++){
            $uiCmp.eq(i).data('uitype') && _customBindData($uiCmp.eq(i), $uiCmp.eq(i).attr('databind'));
        }
    }

    /**
     * 绑定数据
     * @param $el
     * @param databindValue
     * @returns {boolean}
     * @private
     */
    function _customBindData($el, databindValue){
        //获取校验配置参数
        var db = databindValue;

        //数据绑定
        if (db) {
            var chain = db.split('.');
            if(chain.length < 2){
                return false;
            }
            var dataSourceName = [];
            var dataSource;
            var propName;
            for(var i = 0, iLen = chain.length; i < iLen; i++){
                if(i < iLen - 1){
                    dataSourceName.push(chain[i]);
                }else{
                    propName = chain[i];
                }
            }
            dataSource = C.namespace(dataSourceName.join('.'));

            if(dataSource.nodeName){
                return false;
            }
            var databinder = cui(dataSource).databind();
            databinder.addBind($el, propName);
        }
    }

    /**
     * 获取属性参数
     * @param {HTMLElement} el 扫描的占位符
     * @return {Object} JSON 式 options
     * @private
     */
    function _getParam(el){
        var $el = $(el);

        return {
            isScanner: true,
            databind: $el.attr('databind'),
            validate: $el.attr('validate'),
            tip: $el.attr('tip'),
            tipTrigger: $el.attr('tip_trigger')
        };
    }

    /**
     * 判断是否是页面变量
     * @param nodeValue
     * @return {window}
     * @private
     */
    function _getObject(nodeValue){
        var objStr = nodeValue.split('.'),
            objParent = window;
        for(var k = 0; k < objStr.length; k ++){
            objParent = objParent[objStr[k]];
        }
        return (typeof objParent === 'object' && !objParent.nodeName) ? objParent : nodeValue;
    }

    /**
     * 设置只读
     * @param flag {Boolean} 设为只读，true为只读，false恢复可写
     * @param setRange {jQuery | String} 只读范围
     * @private
     */
    function _setReadonly(flag, setRange){
        flag = typeof flag === 'undefined' ? true : flag;
        setRange = typeof setRange === 'undefined' ? 'body' : setRange;
        var formElements = [];
        var $setRange = $(setRange);
        var i, len;
        //如果是全局扫描，即不做范围检查
        if(setRange !== 'document' && setRange !== 'body' && setRange !== 'html'){
            for(i = 0, len = C.UI.componentList.length; i < len; i ++){
                if($setRange.find(C.UI.componentList[i].options.el).length){
                    formElements.push(C.UI.componentList[i]);
                }
            }
        }else{
            formElements = C.UI.componentList;
        }

        for(i = 0, len = formElements.length; i < len; i ++){
            if(typeof formElements[i].setReadonly === 'function'){
                formElements[i].setReadonly(flag);
            }
        }
    }
})(window.comtop.cQuery, window.comtop);
;(function($, C) {
C.UI.Label = C.UI.Base.extend({
        options: {
            uitype: 'Label',          //组件类型
            name: '',                 //组件名
            value: 'label',            //默认文本值
            isReddot:false,
            isBold:false,
            model:"",
            textmode : false,
            size:"",
            cls:"",
            line:""
        },
        _init: function() {
            var opts = this.options;
            this.$el = opts.el;
            if (opts.name === '') {
                opts.name = C.guid() + "_" + opts.uitype;
            }
            if(opts.model==="title1"){
                opts.tpls = {'label':'label1'}
            }else if(opts.model==="title2"){
                opts.tpls = {'label':'label1'}
                opts.blockCls = "cui-label-titletwo";
            }
            opts.value = (opts.value === null || opts.value === undefined) ? '' : opts.value;
        },
        /**
         * 初始化方法
         * @private
         */
        _create: function() {
            this._initVar();
            this._renderDom();
        },
        /*
        *缓存一些节点JQ对象便于后面操作
        */
        _initVar:function(){
            this.$textDom = this.$el.find(".cui-label-text");
        },
        /**
         * 创建label所有dom元素
         * @private
         */
        _renderDom: function () {
            var opts = this.options,
                labelHtml = [];
            this.$el.attr('name',opts.name).addClass("cui-label");

            if(opts.isBold) {
                this.$textDom.css("font-weight","bold");
            };
            if(opts.size){
                this.$textDom.css("font-size",opts.size);
            }
            var that = this;
            if (opts.cls) {
                $.each(opts.cls.split(";"),function(i,item){
                    var ary = item.split(":");
                    that.$textDom.css(ary[0],ary[1]);
                })
            };
        },
        /**
         * 设置label
         * @param value {String | Number} 值
         */
        setLabel: function(value) {
            var value = (value == null || value == undefined) ? '' : value;
            this.$el.children("span").text(value);
        },
        /**
         * 获取label
         * @returns {string} label文字
         */
        getLabel: function(){
            return this.options.value;
        },
        /**
         * 设置只读
         * @param flag 是否只读
         */
        setReadOnly: function(flag) {
            var value = this.options.value,
                $el = this.$el;

            $el.text(value);
        },
        setTextMode : function(flag) {
            this.setReadOnly(true);
        }
    });
})(window.comtop.cQuery, window.comtop);
;
(function($, C) {
    C.UI.Image = C.UI.Base.extend({
        options: {
            uitype: 'Image',
            name: '',
            url: '',
            cls: '',
            height: '',
            width: '',
            on_click: null,
            designMode: false,
            on_mouseover: null,
            on_mouseout: null,
            on_load: null
        },
        _init: function() {
            this.$el = this.options.el;
        },
        _create: function() {
            var that = this,
                opt = this.options,
                img = this.$el.find("img");

            img.attr("src", opt.url);
            img.on("click", function(e) {
                opt.on_click && opt.on_click.call(this, e, that)
            }).hover(function(e) {
                opt.on_mouseover && opt.on_mouseover.call(this, e, that)
            }, function(e) {
                opt.on_mouseout && opt.on_mouseout.call(this, e, that)
            }).on("load", function(e) {
                if (opt.designMode) { //设计模式处理
                    this.height = parseInt(opt.height) || this.naturalHeight;
                    this.width = parseInt(opt.width) || this.naturalWidth;
                    if (that.isloadfail) {
                        this.height = 100;
                        this.width = 100;
                    }
                }
                opt.on_load && opt.on_load(this, e, that);
                that._triggerHandler("ready");
            }).on("error", function(e) {
                that.isloadfail = true;
                this.src = comtop.cuiFilePath + "/themes/default/images/image/defalut.png"
            })
        }
    })

})(window.comtop.cQuery, window.comtop);
(function($, C) {
    C.UI.Frame = C.UI.Base.extend({
        options: {
            uitype: 'Frame',
            name: '',
            id: '',
            url: '',
            cls: '',
            height: 'auto',
            width: 'auto',
            designMode: false,
            on_load: null
        },
        _init: function() {
            this.$el = this.options.el;
        },
        _create: function() {
            var that = this,
                frame = this.$el.find("iframe");
            frame.css({ width: this.options.width, height: this.options.height });
            frame.on("load", function(e) {
                that.options.on_load && that.options.on_load.call(this, e, that);
            })
            if (this.options.designMode) {
                frame[0].contentDocument.body.style.display = "flex"
                frame[0].contentDocument.body.innerHTML = "<div style='margin:auto;display:flex;align-content:center;justify-content:center;width:100%;'>Page</div>";
                frame.css({ "border": "1px solid #ddd" })
            }
        }
    });

    C.UI.CodeArea = C.UI.Base.extend({
        options: {
            uitype: 'CodeArea',
            height: '100px',
            width: '100px',
            text: "",
            onlyDesign: true
        },
        _init: function() {
            this.$el = this.options.el;
        },
        _create: function() {
            this.$el.find("div").css({ width: this.options.width, height: this.options.height, "line-height": this.options.height });
        }
    });

    C.UI.AtmSep = C.UI.Base.extend({
        options: {
            uitype: 'AtmSep',
            height: '150px',
            width: '300px',
            text: "",
            onlyDesign: true
        },
        _init: function() {
            this.$el = this.options.el;
        },
        _create: function() {
            this.$el.find("div").css({ width: this.options.width, height: this.options.height, "line-height": this.options.height });
        }
    });

    C.UI.IncludePage = C.UI.Base.extend({
        options: {
            uitype: 'IncludePage',
            height: '200px',
            width: '300px',
            text: "",
            onlyDesign: true
        },
        _init: function() {
            this.$el = this.options.el;
        },
        _create: function() {
            this.$el.find("div").css({ width: this.options.width, height: this.options.height, "line-height": this.options.height });
        }
    });

    C.UI.Line = C.UI.Base.extend({
        options: {
            uitype: 'Line',
            name: "",
            cls: ''
        },
        _init: function() {
            this.$el = this.options.el;
        },
        _create: function() {
            this.$el.find("hr").addClass(this.options.cls || "");
        }
    })
    C.UI.Div = C.UI.Base.extend({
        options: {
            uitype: 'Div',
            height: '200px',
            width: '300px',
            name: '',
            onlyDesign: true
        },
        _init: function() {
            this.$el = this.options.el;
        },
        _create: function() {
            var lineHeight = this.options.height;
            if (lineHeight.indexOf("px") === -1) {
                lineHeight += "px";
            }
            this.$el.find("div").css({ width: this.options.width, height: this.options.height, "line-height": lineHeight });
        }
    });
})(window.comtop.cQuery, window.comtop)

comtop.version="V4.2.32-build20161117";
