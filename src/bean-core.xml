<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xmlns:mongo="http://www.springframework.org/schema/data/mongo"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
       http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
       http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd">
       
    <!-- 加载properties配置文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <!-- <value>classpath:config_test.properties</value> -->
                <!-- <value>classpath:config_online.properties</value> -->
                <value>classpath:config_local.properties</value>
            </list>
        </property>
    </bean>   
       
    <!--freemarker配置-->
    <bean id="freeMarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPaths" value="/"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="freemarkerSettings">
            <props>
                <prop key="classic_compatible">true</prop>
                <prop key="number_format">#.####</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="time_format">HH:mm:ss</prop>
                <prop key="url_escaping_charset">UTF-8</prop>
            </props>
        </property>
    </bean>

    <!--freemarker视图定义-->
    <bean id="freeMarkerViewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView "/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <property name="cache" value="true"/>
        <property name="prefix" value="/WEB-INF/view"/>
        <property name="suffix" value=".ftl"/>
        <property name="order" value="1"/>
        <property name="exposeRequestAttributes" value="true"/>
        <property name="exposeSessionAttributes" value="true"/>
        <property name="exposeSpringMacroHelpers" value="true"/>
    </bean>

    <!--启动加载异常处理的类，用于监听各控制器中触发的异常 -->
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="defaultErrorView" value="/error"/>
        <property name="exceptionMappings">
            <props>
                <prop key="com.rogrand.core.exception.NotAccessException">/notAccess</prop>
                <prop key="com.rogrand.core.exception.NotExistException">/notExist</prop>
                <prop key="com.rogrand.core.exception.NotLoginException">/notLogin</prop>
            </props>
        </property>
    </bean>

    <!--数据源-->
    <bean id="dataSource" class="org.apache.tomcat.dbcp.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="maxIdle" value="${jdbc.maxIdle}"/>
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <property name="validationQuery" value="${jdbc.validationQuery}"/>
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
    </bean>

    <!--对于clob和blob的处理Handler（非oracle）-->
    <bean id="defaultLobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true"/>

    <!--对于clob和blob的处理Handler（oracle)-->
    <bean id="oracleLobHandler" lazy-init="true" class="org.springframework.jdbc.support.lob.OracleLobHandler">
        <property name="nativeJdbcExtractor">
            <bean class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor" lazy-init="true"/>
        </property>
    </bean>

    <!--Ibatis的sql配置文件的加载-->
    <bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
        <property name="configLocation" value="classpath:sqlMapConfig.xml"/>
        <property name="lobHandler" ref="defaultLobHandler"/>
        <property name="mappingLocations">
            <list>
                <value>classpath:com/rogrand/*/domain/*.xml</value>
            </list>
        </property>
    </bean>

    <!--数据源事务管理-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--翻页service(根据数据库类型来调用相应的翻页service)-->
    <bean id="pageService" class="com.rogrand.core.service.PageService">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
    </bean>

    <!--通过注解加载com.rogrand包下的所有service和dao，不包括controller-->
    <context:component-scan base-package="com.rogrand">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--通过注解的方式事务代理-->
    <tx:annotation-driven transaction-manager="transactionManager" order="1" proxy-target-class="true"/>

    <!--代理配置:对所有SqlDao的数据更新操作进行处理-->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="daoOperation" expression="execution(* com.rogrand.core.dao.SqlDao.create(..)) or
                                                    execution(* com.rogrand.core.dao.SqlDao.update(..)) or
                                                    execution(* com.rogrand.core.dao.SqlDao.delete(..)) 
                                                    "/>
        <aop:advisor advice-ref="daoAdvice" pointcut-ref="daoOperation"/>
    </aop:config>

    <import resource="classpath:META-INF/cxf/cxf.xml" />
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml" />
    
    <!-- 线程池，完成系统需要异步的任务 -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="2" /><!-- 核心线程数 -->
		<property name="maxPoolSize" value="200" /><!-- 最大线程数 -->
		<property name="keepAliveSeconds" value="500" /><!-- 线程所允许的空闲时间 -->
		<property name="queueCapacity" value="5000" /><!-- 工作队列最大长度 -->
	</bean>
    
    <!-- jedis 连接池配置-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxActive" value="${redis.pool.maxActive}" />
        <property name="maxIdle" value="${redis.pool.maxIdle}" />
        <property name="maxWait" value="${redis.pool.maxWait}" />
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
    </bean>

    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.ip}" />
        <property name="port" value="${redis.port}" />
        <property name="password" value="${redis.password}" />
        <property name="poolConfig" ref="jedisPoolConfig" />
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"></property>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
    </bean>
    <!--redis end-->
    
    <!--配置mongoDB数据库-->
    <mongo:db-factory id="mongoDbFactory" username="${mongodb.username}" password="${mongodb.password}" host="${mongodb.host}" port="${mongodb.port}"  dbname="${mongodb.dbname}" />  
    <bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">  
        <constructor-arg ref="mongoDbFactory"/>  
    </bean>

    <bean id="springContextHolder" class="com.rogrand.core.util.SpringContextHolder" />
</beans>